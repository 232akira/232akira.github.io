{
    "version": "https://jsonfeed.org/version/1",
    "title": "Per aspera ad astra",
    "description": "欢迎交流学习!",
    "home_page_url": "https://232akira.github.io",
    "items": [
        {
            "id": "https://232akira.github.io/2025/03/17/%E8%BF%99%E9%87%8C%E6%9C%89%E4%BA%9B%E7%AE%80%E5%8E%86%E4%B8%8A%E6%B2%A1%E5%86%99%E7%9A%84%E6%95%85%E4%BA%8B/",
            "url": "https://232akira.github.io/2025/03/17/%E8%BF%99%E9%87%8C%E6%9C%89%E4%BA%9B%E7%AE%80%E5%8E%86%E4%B8%8A%E6%B2%A1%E5%86%99%E7%9A%84%E6%95%85%E4%BA%8B/",
            "title": "🔝这里有些简历上没写的故事",
            "date_published": "2025-03-17T08:19:53.000Z",
            "content_html": "<p>无论最后是否有结果，感谢您愿意抽出时间。</p>\n<h1 id=\"🎯-我是谁？\"><a href=\"#🎯-我是谁？\" class=\"headerlink\" title=\"🎯 我是谁？\"></a>🎯 <strong>我是谁？</strong></h1><blockquote>\n<ul>\n<li><strong>主业</strong>：相信您已经从简历里了解到了</li>\n<li><strong>副业</strong>：GitHub折腾者 &#x2F; 深夜Debug战士 &#x2F; 奶茶续命选手（在控制了）</li>\n</ul>\n</blockquote>\n<h2 id=\"最近在干什么？\"><a href=\"#最近在干什么？\" class=\"headerlink\" title=\"最近在干什么？\"></a>最近在干什么？</h2><p><em><strong>找暑期实习</strong></em>。六月期末结束立即到岗👋</p>\n<ul>\n<li>死磕算法基础，感觉自己还不够扎实，正在找补</li>\n<li>梳理之前做过的项目内容</li>\n<li>顺便修修本博客，结果越修坑越多</li>\n</ul>\n<h1 id=\"💻-关于这个博客\"><a href=\"#💻-关于这个博客\" class=\"headerlink\" title=\"💻 关于这个博客\"></a>💻 <strong>关于这个博客</strong></h1><h2 id=\"为什么建？\"><a href=\"#为什么建？\" class=\"headerlink\" title=\"为什么建？\"></a><strong>为什么建？</strong></h2><p>作为学计算机的，最开始是想至少有个地方记录技术笔记，后来上头了啥都放进来。</p>\n<h2 id=\"目前配置：\"><a href=\"#目前配置：\" class=\"headerlink\" title=\"目前配置：\"></a><strong>目前配置：</strong></h2><ul>\n<li><strong>Hexo + ShokaX 主题</strong> 踩坑无数，终于稳定</li>\n<li><strong>Waline + Vercel</strong> 没成。您会发现评论提交不了😂想联系我直接+v即可</li>\n<li><strong>GitHub Actions 自动部署</strong> 避免手动push折腾</li>\n</ul>\n<h2 id=\"未来要做的\"><a href=\"#未来要做的\" class=\"headerlink\" title=\"未来要做的\"></a><strong>未来要做的</strong></h2><ul>\n<li>集成评论系统</li>\n<li>代码渲染器</li>\n<li>添加不蒜子访问量统计</li>\n</ul>\n<h2 id=\"踩过的坑：博客运维现场实录\"><a href=\"#踩过的坑：博客运维现场实录\" class=\"headerlink\" title=\"踩过的坑：博客运维现场实录\"></a><strong>踩过的坑：博客运维现场实录</strong></h2><p>早期 GitHub Actions一直自动部署失败，巨崩溃，排查半天才发现是Node.js版本问题，最后升级+重装插件才修好。<br>具体搭载方式可以看<a href=\"https://232akira.github.io/2025/02/20/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%8D%8A%E5%B9%B4%E7%9A%84%E7%97%9B/\">另一篇</a>。</p>\n<h1 id=\"🔧技术探索碎片\"><a href=\"#🔧技术探索碎片\" class=\"headerlink\" title=\"🔧技术探索碎片\"></a>🔧技术探索碎片</h1><p>除了简历上的项目，这里还有些更零散但值得一提的东西。最近在尝试深入一些方向，记录作品都会慢慢放上来。</p>\n<h2 id=\"1️⃣-后端开发\"><a href=\"#1️⃣-后端开发\" class=\"headerlink\" title=\"1️⃣ 后端开发\"></a>1️⃣ <strong>后端开发</strong></h2><ul>\n<li><code>C++</code>和<code>Python</code>是主力。但是主要是算法方面，纯开发这一块经验少。Java和sql多少做过几个前后端项目。</li>\n<li>习惯关注代码工程化，做项目时会尽量保证清晰的模块划分（命名强迫症在此）</li>\n</ul>\n<h2 id=\"2️⃣-人工智能-深度学习\"><a href=\"#2️⃣-人工智能-深度学习\" class=\"headerlink\" title=\"2️⃣ 人工智能 &amp; 深度学习\"></a>2️⃣ <strong>人工智能 &amp; 深度学习</strong></h2><ul>\n<li><code>VGG16</code>进行花卉识别，也做过<code>DO（溶解氧）预测实验</code>等等，不过由于个人设备和资源限制，没法深入优化模型（数据量但凡大一点我的笔记本就超烫），只能在已有框架上调整参数、跑实验、对比结果。</li>\n<li>之前了解过<code>YOLOv8</code>，尝试过跑一些示例代码和<code>labelimg打标</code>，但目前还没深入应用，更多是出于兴趣在学习。</li>\n<li>AI方面的<code>理论知识</code>课上是学过，什么卷积层全连接层、什么池化归一化…浅尝辄止</li>\n</ul>\n<h2 id=\"3️⃣-游戏开发\"><a href=\"#3️⃣-游戏开发\" class=\"headerlink\" title=\"3️⃣ 游戏开发\"></a>3️⃣ <strong>游戏开发</strong></h2><ul>\n<li>用<code>Unity</code>+<code>C#</code>做过一些小demo，尝试为部分元素添加材质、物理碰撞体，并进行脚本控制。记得当时特别想试试做人物交互，但是事情一多起来就抛在脑后了。</li>\n<li>对<code>shader</code>有兴趣，之前没事就在blender上玩弄模型的渲染😂之前也试图做了点mmd和Ae的pv。</li>\n<li>这块实际求职中发现项目需求很高，最近在思考做个作品集。</li>\n<li>对于<code>玩游戏</code>的经验：移动pc和掌机都玩过不少类型：模拟经营、解谜、横板2d像素、3d开放世界、RPG、ARPG、回合制、卡牌类，包括常年玩的音游和女性向游戏等等。</li>\n</ul>\n<h2 id=\"4️⃣-GIS-课程相关\"><a href=\"#4️⃣-GIS-课程相关\" class=\"headerlink\" title=\"4️⃣ GIS &amp; 课程相关\"></a>4️⃣ <strong>GIS &amp; 课程相关</strong></h2><ul>\n<li>在<code>GIS</code>课程里做过空间分析实验，包括Kriging插值、网络分析等，还有IDW、Kriging、Spline等空间插值算法的参数影响分析。软件包括ArcGIS&#x2F;ENVI&#x2F;SNAP等。</li>\n<li>matlab<code>数字信号处理</code>，有音频倒放、图片去噪之类。</li>\n</ul>\n<h1 id=\"🎨-非技术面面观：\"><a href=\"#🎨-非技术面面观：\" class=\"headerlink\" title=\"🎨 非技术面面观：\"></a>🎨 <strong>非技术面面观：</strong></h1><blockquote>\n<p>我认为展示自己的<code>其他技能</code>也同样重要，但是因为这些对技术岗而言并非硬性需求，所以简历上就没有放。</p>\n</blockquote>\n<h2 id=\"性格方面\"><a href=\"#性格方面\" class=\"headerlink\" title=\"性格方面\"></a>性格方面</h2><ul>\n<li>按现在年轻人的认知，e还是i？那我必是个<code>i人</code>。<br>关于具体mbti我实在记不住什么abcd，而且有时候每次测结果都不一样…所以问了就是不知道。<br>说实话，性格比较<code>倔</code>。如果有什么事情没完成，我就那个如鲠在喉啊，睡不着受不了。</li>\n<li>另，我还是那种<code>又菜又倔</code>，如果你想了解我先前的教育经历：<br>坐标22河南理科，排名两万六来的海大计算机专业。经历多年衡水式教育+疫情封校，午睡都是掐着分钟睡（当然现在来上海发现中午睡都不用睡了）。入学时编程基础几乎为0，装个C语言的IDE不会，问一圈舍友和百度才装好，输出helloworld好几天理解不了，笨吧？真的学起来很吃力。</li>\n</ul>\n<p><code>一眨眼明年就要毕业了，感慨啊...</code></p>\n<h2 id=\"兴趣爱好方面\"><a href=\"#兴趣爱好方面\" class=\"headerlink\" title=\"兴趣爱好方面\"></a>兴趣爱好方面</h2><p>基本都是小学练的，这点感谢父母。</p>\n<ul>\n<li>跟班学了<code>电子琴/钢琴</code>6~7年，现在怎么弹琴快忘光，手速全用在打字上了😂</li>\n<li><code>画画</code>跟班+自学到现在也有15年了，业余水平画着玩，主打解闷儿</li>\n<li><code>写字</code>还不错</li>\n<li>乱七八糟的<code>手工</code>都沾点边</li>\n</ul>\n<h1 id=\"📬-来唠个五毛钱的？\"><a href=\"#📬-来唠个五毛钱的？\" class=\"headerlink\" title=\"📬 来唠个五毛钱的？\"></a>📬 <strong>来唠个五毛钱的？</strong></h1><p>如果你看到这里…<code>非常感谢🥰祝你今天好心情！！！</code></p>\n<ul>\n<li><strong>是 HR →</strong> 欢迎随时联系。</li>\n<li><strong>是同行 →</strong> 求分享防脱发秘籍，长时间写代码头发真的越来越秃了。  </li>\n<li><strong>是校友 →</strong> 相逢即是缘。来二餐一，请你喝我老家蜜雪。</li>\n</ul>\n",
            "tags": [
                "记录"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/03/17/%E7%AE%97%E6%B3%95%E5%A4%87%E5%BF%98%E5%BD%95/",
            "url": "https://232akira.github.io/2025/03/17/%E7%AE%97%E6%B3%95%E5%A4%87%E5%BF%98%E5%BD%95/",
            "title": "算法备忘录",
            "date_published": "2025-03-17T07:29:31.000Z",
            "content_html": "<h1 id=\"基础算法问题\"><a href=\"#基础算法问题\" class=\"headerlink\" title=\"基础算法问题\"></a>基础算法问题</h1><p>这些题听着老熟了，一到写起来就主打一个略有耳闻🫠</p>\n<h2 id=\"题目一览\"><a href=\"#题目一览\" class=\"headerlink\" title=\"题目一览\"></a>题目一览</h2><p>省流表👇️</p>\n<blockquote>\n<p>题目并非只有表中那几个，可在<a href=\"https://leetcode.cn/problemset/\">此页</a>自行筛选。</p>\n</blockquote>\n<h3 id=\"1️⃣数组与数学类\"><a href=\"#1️⃣数组与数学类\" class=\"headerlink\" title=\"1️⃣数组与数学类\"></a><em><strong>1️⃣数组与数学类</strong></em></h3><table>\n<thead>\n<tr>\n<th align=\"center\">题目</th>\n<th align=\"center\">力扣题号</th>\n<th align=\"center\">变体 &#x2F; 要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">杨辉三角</td>\n<td align=\"center\"><code>[118/119]</code></td>\n<td align=\"center\">一维数组</td>\n</tr>\n<tr>\n<td align=\"center\">斐波那契数列</td>\n<td align=\"center\"><code>[509]</code></td>\n<td align=\"center\">爬楼梯问题<code>[70]</code>&#x2F;递归&#x2F;迭代&#x2F;动态规划</td>\n</tr>\n<tr>\n<td align=\"center\">两数之和</td>\n<td align=\"center\"><code>[1]</code></td>\n<td align=\"center\">哈希表优化时间复杂度到O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">合并两个有序数组</td>\n<td align=\"center\"><code>[88]</code></td>\n<td align=\"center\">原地合并（从后向前填充）</td>\n</tr>\n<tr>\n<td align=\"center\">最大子数组和</td>\n<td align=\"center\"><code>[53]</code></td>\n<td align=\"center\">动态规划</td>\n</tr>\n</tbody></table>\n<h3 id=\"2️⃣字符串操作类\"><a href=\"#2️⃣字符串操作类\" class=\"headerlink\" title=\"2️⃣字符串操作类\"></a><em><strong>2️⃣字符串操作类</strong></em></h3><table>\n<thead>\n<tr>\n<th align=\"center\">题目</th>\n<th align=\"center\">力扣题号</th>\n<th align=\"center\">变体&#x2F;要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">反转字符串</td>\n<td align=\"center\"><code>[344]</code></td>\n<td align=\"center\">原地修改（双指针）</td>\n</tr>\n<tr>\n<td align=\"center\">有效的括号</td>\n<td align=\"center\"><code>[20]</code></td>\n<td align=\"center\">用栈实现括号匹配</td>\n</tr>\n<tr>\n<td align=\"center\">最长公共前缀</td>\n<td align=\"center\"><code>[14]</code></td>\n<td align=\"center\">纵向扫描&#x2F;分治</td>\n</tr>\n<tr>\n<td align=\"center\">字符串转整数</td>\n<td align=\"center\"><code>[8]</code></td>\n<td align=\"center\">处理边界（溢出&#x2F;符号&#x2F;空格）</td>\n</tr>\n</tbody></table>\n<h3 id=\"3️⃣链表类\"><a href=\"#3️⃣链表类\" class=\"headerlink\" title=\"3️⃣链表类\"></a><em><strong>3️⃣链表类</strong></em></h3><table>\n<thead>\n<tr>\n<th align=\"center\">题目</th>\n<th align=\"center\">力扣题号</th>\n<th align=\"center\">变体&#x2F;要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">反转链表</td>\n<td align=\"center\"><code>[206]</code></td>\n<td align=\"center\">迭代&#x2F;递归</td>\n</tr>\n<tr>\n<td align=\"center\">环形链表</td>\n<td align=\"center\"><code>[141]</code></td>\n<td align=\"center\">快慢指针判环</td>\n</tr>\n<tr>\n<td align=\"center\">合并两个有序链表</td>\n<td align=\"center\"><code>[21]</code></td>\n<td align=\"center\">迭代&#x2F;递归</td>\n</tr>\n<tr>\n<td align=\"center\">删除链表倒数第N个节点</td>\n<td align=\"center\"><code>[19]</code></td>\n<td align=\"center\">一趟扫描</td>\n</tr>\n</tbody></table>\n<h3 id=\"4️⃣树与递归\"><a href=\"#4️⃣树与递归\" class=\"headerlink\" title=\"4️⃣树与递归\"></a><em><strong>4️⃣树与递归</strong></em></h3><table>\n<thead>\n<tr>\n<th align=\"center\">题目</th>\n<th align=\"center\">力扣题号</th>\n<th align=\"center\">变体&#x2F;要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">二叉树的最大深度</td>\n<td align=\"center\"><code>[104]</code></td>\n<td align=\"center\">迭代&#x2F;递归</td>\n</tr>\n<tr>\n<td align=\"center\">对称二叉树</td>\n<td align=\"center\"><code>[101]</code></td>\n<td align=\"center\">迭代（队列&#x2F;栈）&#x2F;递归</td>\n</tr>\n<tr>\n<td align=\"center\">路径总和</td>\n<td align=\"center\"><code>[112]</code></td>\n<td align=\"center\">动回溯法</td>\n</tr>\n</tbody></table>\n<h3 id=\"5️⃣动态规划\"><a href=\"#5️⃣动态规划\" class=\"headerlink\" title=\"5️⃣动态规划\"></a><em><strong>5️⃣动态规划</strong></em></h3><table>\n<thead>\n<tr>\n<th align=\"center\">题目</th>\n<th align=\"center\">力扣题号</th>\n<th align=\"center\">变体&#x2F;要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">打家劫舍</td>\n<td align=\"center\"><code>[198]</code></td>\n<td align=\"center\">状态转移方程推导</td>\n</tr>\n<tr>\n<td align=\"center\">零钱兑换</td>\n<td align=\"center\"><code>[322]</code></td>\n<td align=\"center\">完全背包问题解法</td>\n</tr>\n<tr>\n<td align=\"center\">最长递增子序列</td>\n<td align=\"center\"><code>[300]</code></td>\n<td align=\"center\">O(nlogn)优化解法</td>\n</tr>\n</tbody></table>\n<h3 id=\"6️⃣排序与查找\"><a href=\"#6️⃣排序与查找\" class=\"headerlink\" title=\"6️⃣排序与查找\"></a><em><strong>6️⃣排序与查找</strong></em></h3><table>\n<thead>\n<tr>\n<th align=\"center\">题目</th>\n<th align=\"center\">力扣题号</th>\n<th align=\"center\">变体&#x2F;要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">快速排序</td>\n<td align=\"center\"><code>力扣排序题均可</code></td>\n<td align=\"center\">手写递归和非递归版本</td>\n</tr>\n<tr>\n<td align=\"center\">二分查找</td>\n<td align=\"center\"><code>[53]</code></td>\n<td align=\"center\">处理边界条件（左闭右闭&#x2F;左闭右开）</td>\n</tr>\n<tr>\n<td align=\"center\">寻找峰值</td>\n<td align=\"center\"><code>[53]</code></td>\n<td align=\"center\">二分法的特殊应用</td>\n</tr>\n</tbody></table>\n<h3 id=\"7️⃣其他高频\"><a href=\"#7️⃣其他高频\" class=\"headerlink\" title=\"7️⃣其他高频\"></a><em><strong>7️⃣其他高频</strong></em></h3><table>\n<thead>\n<tr>\n<th align=\"center\">题目</th>\n<th align=\"center\">力扣题号</th>\n<th align=\"center\">变体&#x2F;要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">LRU缓存</td>\n<td align=\"center\"><code>[146]</code></td>\n<td align=\"center\">手写递归和非递归版本</td>\n</tr>\n<tr>\n<td align=\"center\">实现队列&#x2F;栈</td>\n<td align=\"center\"><code>[232/225]</code></td>\n<td align=\"center\">处理边界条件（左闭右闭&#x2F;左闭右开）</td>\n</tr>\n<tr>\n<td align=\"center\">汉明距离</td>\n<td align=\"center\"><code>[461]</code></td>\n<td align=\"center\">二分法的特殊应用</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "力扣",
                "算法",
                "记录"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/03/12/%E4%B8%93%E9%A2%981-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",
            "url": "https://232akira.github.io/2025/03/12/%E4%B8%93%E9%A2%981-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",
            "title": "专题1️⃣ 滑动窗口",
            "date_published": "2025-03-12T10:20:15.000Z",
            "content_html": "<p>今天照例每日一题，然后麻溜的看题解，发现又是一道滑动窗口题。所以开个专题归类一下。</p>\n<h1 id=\"2269-找到一个数字的-K-美丽值\"><a href=\"#2269-找到一个数字的-K-美丽值\" class=\"headerlink\" title=\"2269.找到一个数字的 K 美丽值\"></a>2269.找到一个数字的 K 美丽值</h1><p>今天字符串也要美丽了🆘</p>\n<blockquote>\n<p>一个整数num的k美丽值定义为num中符合以下条件的子字符串数目：</p>\n<ul>\n<li>子字符串长度为k。</li>\n<li>子字符串能整除num。<br>给你整数num和k，请你返回num的k美丽值。<br>注意：<br>允许有前缀0。<br>0不能整除任何值。<br>一个子字符串是一个字符串里的连续一段字符序列。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= num &lt;= 109</code></li>\n<li><code>1 &lt;= k &lt;= num.length</code> （将 num 视为字符串）</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>我觉得这道的要点就是子串怎么得，剩下的就好判断了。偏偏我就栽在这儿了😅</p>\n<ul>\n<li><strong>int转string</strong> <code>to_string()</code>注意此函数需要赋给个string变量</li>\n<li><strong>string转int</strong> <code>stoi()</code>同样，需要赋给个int变量</li>\n<li><strong>获取长度为k的字符串</strong> <code>substr(i,k)</code>距离c++学这个函数已经过了一两年了，忘的一干二净，趁此好机会来总结一下。</li>\n</ul>\n<p>👇️ <em><strong>获取子串</strong></em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>substr(pos,len)</code></td>\n<td align=\"center\">从pos开始，提取长度为len的子串</td>\n</tr>\n</tbody></table>\n<p>👇️ <em><strong>查找字符串</strong></em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>find(str,pos)</code></td>\n<td align=\"center\">在pos之后查找str的位置，找不到返回string::pos</td>\n</tr>\n<tr>\n<td align=\"center\"><code>rfind(str,pos)</code></td>\n<td align=\"center\">逆向查找str,从pos开始向前找</td>\n</tr>\n<tr>\n<td align=\"center\"><code>find_first_of(chars,pos)</code></td>\n<td align=\"center\">查找chars中的任意字符的第一次出现</td>\n</tr>\n<tr>\n<td align=\"center\"><code>find_last_of(chars,pos)</code></td>\n<td align=\"center\">查找chars中的任意字符的最后一次出现</td>\n</tr>\n</tbody></table>\n<p>👇️ <em><strong>替换字符串</strong></em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>replace(pos,len,str)</code></td>\n<td align=\"center\">从pos开始，用str替换len个字符</td>\n</tr>\n<tr>\n<td align=\"center\"><code>erase(pos,len)</code></td>\n<td align=\"center\">删除从pos开始的len个字符</td>\n</tr>\n<tr>\n<td align=\"center\"><code>insert(pos,str)</code></td>\n<td align=\"center\">在pos位置插入str</td>\n</tr>\n</tbody></table>\n<p>👇️ <em><strong>大小写转换</strong></em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>toupper(c)</code></td>\n<td align=\"center\">将字符c转换为大写</td>\n</tr>\n<tr>\n<td align=\"center\"><code>tolower(c)</code></td>\n<td align=\"center\">将字符c转换为小写</td>\n</tr>\n</tbody></table>\n<p>👇️ <em><strong>数字与字符串转换</strong></em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>to_string(num)</code></td>\n<td align=\"center\">把num转换为字符串</td>\n</tr>\n<tr>\n<td align=\"center\"><code>stoi(str)</code></td>\n<td align=\"center\">把str转换为int</td>\n</tr>\n<tr>\n<td align=\"center\"><code>stol(str)</code></td>\n<td align=\"center\">把str转换为long</td>\n</tr>\n<tr>\n<td align=\"center\"><code>stod(str)</code></td>\n<td align=\"center\">把str转换为double</td>\n</tr>\n</tbody></table>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int divisorSubstrings(int num, int k) &#123;\n        int cnt=0;\n        string str=to_string(num);\n        for(int i=0;i&lt;=str.size()-k;i++)&#123;\n            string ans=str.substr(i,k);\n            int answer=stoi(ans);\n            if(answer!=0 &amp;&amp; num%answer==0)&#123;\n                cnt++;\n            &#125;\n        &#125;\n        return cnt;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"3305-元音辅音字符串计数Ⅰ\"><a href=\"#3305-元音辅音字符串计数Ⅰ\" class=\"headerlink\" title=\"3305.元音辅音字符串计数Ⅰ\"></a>3305.元音辅音字符串计数Ⅰ</h1><blockquote>\n<p>给你一个字符串word和一个非负整数 k。<br>返回word的子字符串中，每个元音字母（’a’、’e’、’i’、’o’、’u’）至少出现一次，并且恰好包含k个辅音字母的子字符串的总数。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>5 &lt;&#x3D; word.length &lt;&#x3D; 250</li>\n<li>word 仅由小写英文字母组成。</li>\n<li>0 &lt;&#x3D; k &lt;&#x3D; word.length - 5</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>先试了试暴力😤循环套三层观感太差，不放上来。</p>\n<p><strong>正经解法</strong></p>\n<ul>\n<li>滑动窗口代替暴力循环</li>\n<li>哈希表统计元音出现次数</li>\n</ul>\n<p><strong>注意几个用法</strong><br><em><strong>1️⃣ 几个键值对容器</strong></em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">键值对容器</th>\n<th align=\"center\">实现方式</th>\n<th align=\"center\">键值</th>\n<th align=\"center\">时间复杂度</th>\n<th align=\"center\">是否有序</th>\n<th align=\"center\">使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>unordered_map</code></td>\n<td align=\"center\">哈希表</td>\n<td align=\"center\">键-值对</td>\n<td align=\"center\">平均O(1)</td>\n<td align=\"center\">无序</td>\n<td align=\"center\">快速查找键对应的值</td>\n</tr>\n<tr>\n<td align=\"center\"><code>map</code></td>\n<td align=\"center\">红黑树</td>\n<td align=\"center\">键-值对</td>\n<td align=\"center\">O(logn)</td>\n<td align=\"center\">有序</td>\n<td align=\"center\">需要有序键值对</td>\n</tr>\n<tr>\n<td align=\"center\"><code>unordered_set</code></td>\n<td align=\"center\">哈希表</td>\n<td align=\"center\">键</td>\n<td align=\"center\">平均O(1)</td>\n<td align=\"center\">无序</td>\n<td align=\"center\">快速查找元素是否存在</td>\n</tr>\n<tr>\n<td align=\"center\"><code>set</code></td>\n<td align=\"center\">红黑树</td>\n<td align=\"center\">键</td>\n<td align=\"center\">O(logn)</td>\n<td align=\"center\">有序</td>\n<td align=\"center\">需要排序的集合</td>\n</tr>\n</tbody></table>\n<p><em><strong>2️⃣ 键值对容器+函数求的是什么？</strong></em></p>\n<ul>\n<li><code>unordered_map.size()</code>返回unordered_map中<strong>键值对的数量</strong>。</li>\n<li><code>unordered_set.count(x)</code>unordered_set中<strong>某个元素是否存在</strong>，返回1表示在，0表示不在。</li>\n</ul>\n<p>代码思路如下。这个方法时间空间上并非最优，后续需要调整思路。</p>\n<pre><code class=\"language-cpp\">定义n：word长度;\n定义unordered_map类型的vowel_cnt:元音出现次数;\n定义consonant_cnt:辅音个数;\n定义ans：统计最终答案;\n定义unordered_set类型的vowels:所有元音字母;\n定义左指针j=0;\n遍历word从下标0~word.size():\n    定义右元素right=word[i];\n    统计元音出现次数：\n        进行元/辅音计数;\n    当辅音数量超过k://收缩窗口左边界\n        定义左元素left=word[左指针];//取左边界字符\n        如果left是元音：\n            该元音出现次数--;\n            当元音的计数减少到0时：\n                将它从vowel_cnt中删除；\n        否则：\n            辅音个数--;\n        左指针右移;\n    如果包含所有元音且辅音个数为k:\n        //避免修改原窗口状态,思路整体与上半部分相同☝️\n        定义临时变量temp_vowel=vowel_cnt;\n        定义临时变量temp_consonant=consonant_cnt;\n        定义临时变量temp_j=j;\n        定义计数cnt=0;\n        当临时左下标&lt;=右下标:\n            如果包含所有临时元音且临时辅音个数为k:\n                cnt++;\n            否则:\n                退出该层循环;\n            定义c:word[临时左指针];\n            如果c是元音：\n                临时该元音出现次数--;\n                当临时元音的计数减少到0时：\n                    将它从临时vowel_cnt中删除;\n            否则:\n                临时辅音个数--;\n            临时左指针j右移;\n        ans+=cnt;\n返回ans;\n</code></pre>\n<h2 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int countOfSubstrings(string word, int k) &#123;\n        int len=word.size();\n        unordered_map&lt;char,int&gt;vowel_cnt;\n        int consonant_cnt=0;\n        int ans=0;\n        unordered_set&lt;int&gt;vowels=&#123;&#39;a&#39;,&#39;e&#39;,&#39;i&#39;,&#39;o&#39;,&#39;u&#39;&#125;;\n        int j=0;\n        for(int i=0;i&lt;len;i++)&#123;\n            char right=word[i];\n            if(vowels.count(right))&#123;\n                vowel_cnt[right]++;\n            &#125;\n            else&#123;\n                consonant_cnt++;\n            &#125;\n            while(consonant_cnt&gt;k)&#123;\n                char left=word[j];\n                if(vowels.count(left))&#123;\n                    vowel_cnt[left]--;\n                    if(vowel_cnt[left]==0)&#123;\n                        vowel_cnt.erase(left);\n                    &#125;\n                &#125;\n                else&#123;\n                    consonant_cnt--;\n                &#125;\n                j++;\n            &#125;\n            if(vowel_cnt.size()==5 &amp;&amp; consonant_cnt==k)&#123;\n                unordered_map&lt;char,int&gt;temp_vowel=vowel_cnt;\n                int temp_consonant=consonant_cnt;\n                int temp_j=j;\n                int cnt=0;\n                while(temp_j&lt;=i)&#123;\n                    if(temp_vowel.size()==5 &amp;&amp; temp_consonant==k)&#123;\n                        cnt++;\n                    &#125;\n                    else&#123;\n                        break;\n                    &#125;\n                    int c=word[temp_j];\n                    if(vowels.count(c))&#123;\n                        temp_vowel[c]--;\n                        if(temp_vowel[c]==0)&#123;\n                            temp_vowel.erase(c);\n                        &#125;\n                    &#125;\n                    else&#123;\n                        temp_consonant--;\n                    &#125;\n                    temp_j++;\n                &#125;\n                ans+=cnt;\n            &#125;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"3306-元音辅音字符串计数Ⅱ\"><a href=\"#3306-元音辅音字符串计数Ⅱ\" class=\"headerlink\" title=\"3306.元音辅音字符串计数Ⅱ\"></a>3306.元音辅音字符串计数Ⅱ</h1><p>不行，彻底懵了脑子转不动做梦都是元辅音😫先把copy的官方题解放这，过两天我再苟回来看。</p>\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h2 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    long long countOfSubstrings(string word, int k) &#123;\n        set&lt;char&gt; vowels = &#123;&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;&#125;;\n        auto count = [&amp;](int m) -&gt; long long &#123;\n            int n = word.size(), consonants = 0;\n            long long res = 0;\n            map&lt;char, int&gt; occur;\n            for (int i = 0, j = 0; i &lt; n; i++) &#123;\n                while (j &lt; n &amp;&amp; (consonants &lt; m || occur.size() &lt; vowels.size())) &#123;\n                    if (vowels.count(word[j])) &#123;\n                        occur[word[j]]++;\n                    &#125; else &#123;\n                        consonants++;\n                    &#125;\n                    j++;\n                &#125;\n                if (consonants &gt;= m &amp;&amp; occur.size() == vowels.size()) &#123;\n                    res += n - j + 1;\n                &#125;\n                if (vowels.count(word[i])) &#123;\n                    occur[word[i]]--;\n                    if (occur[word[i]] == 0) &#123;\n                        occur.erase(word[i]);\n                    &#125;\n                &#125; else &#123;\n                    consonants--;\n                &#125;\n            &#125;\n            return res;\n        &#125;;\n        return count(k) - count(k + 1);\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "力扣",
                "哈希表",
                "算法",
                "字符串",
                "滑动窗口"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/03/06/Leetcode%E9%93%BE%E8%A1%A8/",
            "url": "https://232akira.github.io/2025/03/06/Leetcode%E9%93%BE%E8%A1%A8/",
            "title": "Leetcode链表",
            "date_published": "2025-03-06T02:25:28.000Z",
            "content_html": "<p>链表这东西真的学一阵忘一阵😂</p>\n<h1 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a>单向链表</h1><h2 id=\"结构定义\"><a href=\"#结构定义\" class=\"headerlink\" title=\"结构定义\"></a>结构定义</h2><ul>\n<li>节点结构 <code>ListNode</code></li>\n<li>值 <code>data</code></li>\n<li>指向下一个节点的指针 <code>next</code></li>\n</ul>\n<pre><code class=\"language-cpp\">struct ListNode&#123;\n    int data;\n    ListNode* next;\n    ListNode(int x):data(x),next(nullptr)&#123;&#125;\n&#125;Node;\n</code></pre>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h3 id=\"创建链表\"><a href=\"#创建链表\" class=\"headerlink\" title=\"创建链表\"></a>创建链表</h3><p>定义单链表类，封装基本操作。下面的几个操作都在public里~</p>\n<pre><code class=\"language-cpp\">class LinkedList&#123;\npublic:\n    ListNode* head;\n    LinkedList():head(nullptr);\n&#125;\n</code></pre>\n<h3 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h3><ul>\n<li>头插法:新节点加到链表头部</li>\n</ul>\n<pre><code class=\"language-cpp\">void insertAtHead(int data)&#123;\n    ListNode* newNode=new ListNode(data);\n    newNode-&gt;next=head;\n    head=newNode;\n&#125;\n</code></pre>\n<ul>\n<li>尾插法：:新节点加到链表尾部</li>\n</ul>\n<pre><code class=\"language-cpp\">void insertAtTail(int data)&#123;\n    ListNode* newNode=new ListNode(data);\n    if(!head)&#123;\n        head=newNode;\n        return;\n    &#125;\n    ListNode* temp=head;\n    while(temp-&gt;next)&#123;\n        temp=temp-&gt;next;\n    &#125;\n    temp-&gt;next=newNode;\n&#125;\n</code></pre>\n<h3 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h3><pre><code class=\"language-cpp\">void deleteNode(int data)&#123;\n    if(!head)&#123;\n        return;\n    &#125;\n    if(head-&gt;data==data)&#123;\n        ListNode* temp=head;\n        head=head-&gt;next;\n        delete temp;\n        return;\n    &#125;\n    ListNode* temp=head;\n    while(temp-&gt;next &amp;&amp; temp-&gt;next-&gt;val !=val)&#123;\n        temp=temp-&gt;next;\n    &#125;\n    if(temp-&gt;next)&#123;\n        ListNode* delNode=temp-&gt;next;\n        temp-&gt;next=temp-&gt;next-&gt;next;\n        delete delNode;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"修改节点\"><a href=\"#修改节点\" class=\"headerlink\" title=\"修改节点\"></a>修改节点</h3><pre><code class=\"language-cpp\">void updateNode(int oldData,newData)&#123;\n    ListNode* temp=head;\n    while(temp)&#123;\n        if(temp-data==oldData)&#123;\n            temp-&gt;data==oldData;\n            return;\n        &#125;\n        temp=temp-&gt;next;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"查找节点\"><a href=\"#查找节点\" class=\"headerlink\" title=\"查找节点\"></a>查找节点</h3><pre><code class=\"language-cpp\">bool searchNode(int data)&#123;\n    ListNode* temp=head;\n    while(temp)&#123;\n        if(temp-&gt;data==data)&#123;\n            return true;\n        &#125;\n    &#125;\n    return false;\n&#125;\n</code></pre>\n<h3 id=\"打印链表\"><a href=\"#打印链表\" class=\"headerlink\" title=\"打印链表\"></a>打印链表</h3><pre><code class=\"language-cpp\">void printList()&#123;\n    ListNode* temp=head;\n    while(temp)&#123;\n        cout&lt;&lt;temp-&gt;val&lt;&lt;&quot;-&gt;&quot;;\n        temp=temp-&gt;next;\n    &#125;\n    cout&lt;&lt;&quot;NULL&quot;&lt;&lt;endl;\n&#125;\n</code></pre>\n<h3 id=\"释放链表内存\"><a href=\"#释放链表内存\" class=\"headerlink\" title=\"释放链表内存\"></a>释放链表内存</h3><pre><code class=\"language-cpp\">~LinkedList()&#123;\n    while(head)&#123;\n        ListNode* temp=head;\n        head=head-&gt;next;\n        delete temp;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"21-合并两个有序链表\"><a href=\"#21-合并两个有序链表\" class=\"headerlink\" title=\"21.合并两个有序链表\"></a>21.合并两个有序链表</h1><blockquote>\n<p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<br>提示：</p>\n<ul>\n<li>两个链表的节点数目范围是 [0, 50]</li>\n<li>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</li>\n<li>l1和l2均按非递减顺序排列</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>👉️ <em><strong>终止条件</strong></em>：有链表为空</p>\n<ul>\n<li>list1为空，合并结果直接为list2</li>\n<li>list2为空，合并结果直接为list1</li>\n</ul>\n<p>👉️ <em><strong>递归调用</strong></em>：小的打头，每一步递归后返回的值链接到链表末尾</p>\n<ul>\n<li>如果<code>list1节点的值 &lt; list2</code>：寻找list1后面节点还有没有也比list2小的节点</li>\n</ul>\n<pre><code>让list1-&gt;next接上递归后合并的结果；\n返回当前较小的节点list1;\n</code></pre>\n<ul>\n<li>else：寻找list2后面节点还有没有也比list1小的节点</li>\n</ul>\n<pre><code>让list2-&gt;next接上递归后合并的结果；\n返回当前较小的节点list2;\n</code></pre>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">/**\n * Definition for singly-linked list.\n * struct ListNode &#123;\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) &#123;&#125;\n *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;\n *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;\n * &#125;;\n */\nclass Solution &#123;\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) &#123;\n        if(list1==NULL || list2==NULL)&#123;\n            return list1==NULL ? list2:list1;\n        &#125;\n        if(list1-&gt;val &lt; list2-&gt;val)&#123;\n            list1-&gt;next = mergeTwoLists(list1-&gt;next,list2);\n            return list1;\n        &#125;\n        else&#123;\n            list2-&gt;next = mergeTwoLists(list1,list2-&gt;next);\n            return list2;\n        &#125;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"206-反转链表\"><a href=\"#206-反转链表\" class=\"headerlink\" title=\"206.反转链表\"></a>206.反转链表</h1><p>又是一道经典中的经典题🙀</p>\n<blockquote>\n<p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目范围是 [0, 5000]</li>\n<li>-5000 &lt;&#x3D; Node.val &lt;&#x3D; 5000</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>👉️ <em><strong>链表反转的本质</strong></em></p>\n<ul>\n<li>**让当前节点<code>cur</code>指向它的前一个节点<code>pre</code>。**而不是后一个节点next</li>\n<li>**更新<code>pre</code>和<code>cur</code>，直到cur为空。**此时pre为新的head节点</li>\n</ul>\n<p>这里模拟一下过程。<br>👉️ <em><strong>假设存在链表：1-&gt;2-&gt;3-&gt;4-&gt;nullptr</strong></em><br>初始状态：</p>\n<ul>\n<li><code>pre = nullptr</code></li>\n<li><code>cur = head</code><br>那么逐步变化如下：<br>| <code>cur</code> | <code>tmp(cur-&gt;next)</code> | <code>cur-&gt;next=pre</code> | <code>pre=cur</code> | <code>cur=tmpS</code> |<br>| :–: | :–: | :–: |<br>| 1 | 2 | <code>1-&gt;nullptr</code> | <code>pre=1</code> | <code>cur=2</code> |<br>| 2 | 3 | <code>2-&gt;1</code> | <code>pre=2</code> | <code>cur=3</code> |<br>| 3 | 4 | <code>3-&gt;2</code> | <code>pre=3</code> | <code>cur=4</code> |<br>| 4 | nullptr | <code>4-&gt;3</code> | <code>pre=4</code> | <code>cur=nullptr</code>（结束） |<br>最终pre变成4，即新的链表头头。此时链表结构为：5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; nullptr</li>\n</ul>\n<p>👉️ <em><strong>简单来说，关键步骤是</strong></em><br>1️⃣记录下一个节点<br>2️⃣反转指向<br>3️⃣更新pre（当前节点变成新的头）<br>4️⃣继续遍历<br>over。</p>\n<h2 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">/**\n * Definition for singly-linked list.\n * struct ListNode &#123;\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) &#123;&#125;\n *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;\n *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;\n * &#125;;\n */\nclass Solution &#123;\npublic:\n    ListNode* reverseList(ListNode* head) &#123;\n        ListNode* pre=nullptr;\n        ListNode* cur=head;\n        while(cur!=nullptr)&#123;\n            ListNode* tmp=cur-&gt;next;\n            cur-&gt;next=pre;\n            pre=cur;\n            cur=tmp;\n        &#125;\n        return pre;\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "力扣",
                "算法",
                "链表"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/03/05/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://232akira.github.io/2025/03/05/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "Leetcode字符串",
            "date_published": "2025-03-05T07:22:48.000Z",
            "content_html": "<h1 id=\"58-最后一个单词的长度\"><a href=\"#58-最后一个单词的长度\" class=\"headerlink\" title=\"58.最后一个单词的长度\"></a>58.最后一个单词的长度</h1><blockquote>\n<p><strong>给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。</strong></p>\n</blockquote>\n<p>KMP有点难理解了对我而言…看不懂就放两天继续钻，再多看看大佬博客的不同理解，效果会更好。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>参考链接：<br><a href=\"https://www.cnblogs.com/dusf/p/kmp.html\">1️⃣</a><br><a href=\"https://blog.csdn.net/yyzsir/article/details/89462339?ops_request_misc=%257B%2522request%255Fid%2522%253A%252292dce769a412320e26ef79eb85ca18cd%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=92dce769a412320e26ef79eb85ca18cd&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-89462339-null-null.142%5Ev101%5Epc_search_result_base5&utm_term=yyzsir%20kmp&spm=1018.2226.3001.4187\">2️⃣</a></li>\n</ul>\n<hr>\n<h3 id=\"朴素模式匹配BF\"><a href=\"#朴素模式匹配BF\" class=\"headerlink\" title=\"朴素模式匹配BF\"></a>朴素模式匹配<code>BF</code></h3><p>首先来个<strong>暴力</strong>方法：不匹配模式串就右挪一位。</p>\n<pre><code>//暴力模式匹配\nint 主串位置i；\nint 模式串位置j；\nint 主串长度；\nint 子串长度；\n\n当（主串位置 &lt;= 主串长度 &amp;&amp; 模式串位置&lt;模式串长度）:\n    如果（该主串位置的主串字符 == 该模式串位置的模式串字符）：\n        i++；\n        j++；\n    否则：\n        i后退至上一轮匹配开始位置的后一位；\n        j归零；\n如果（模式串位置 == 模式串长度）：\n    匹配成功，返回出现位置；\n否则\n    匹配失败，返回-1；\n</code></pre>\n<h3 id=\"优化模式匹配KMP\"><a href=\"#优化模式匹配KMP\" class=\"headerlink\" title=\"优化模式匹配KMP\"></a>优化模式匹配<code>KMP</code></h3><p>即利用<strong>已经部分匹配</strong>这个信息，保持<strong>i指针不回溯</strong>，并通过j指针让<strong>模式串</strong>尽可能移动到<strong>更有效的位置</strong>。</p>\n<p>那么有几个要点：</p>\n<ul>\n<li><p><em><strong>前缀(Prefix)和后缀（Suffix）</strong></em><br>举个🌰，给定一个字符串s:<code>“abcab”</code>,那么:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">s的子串</th>\n<th align=\"center\"><strong>前缀</strong></th>\n<th align=\"center\"><strong>后缀</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">ab</td>\n<td align=\"center\">a</td>\n<td align=\"center\">b</td>\n</tr>\n<tr>\n<td align=\"center\">abc</td>\n<td align=\"center\">a,ab</td>\n<td align=\"center\">c,bc</td>\n</tr>\n<tr>\n<td align=\"center\">abca</td>\n<td align=\"center\">a,ab,abc</td>\n<td align=\"center\">a,ca,bca</td>\n</tr>\n<tr>\n<td align=\"center\">abcab</td>\n<td align=\"center\">a,ab,abc,abca</td>\n<td align=\"center\">b,ab,cab,bcab</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><em><strong>公共前后缀最长长度</strong></em><br>从上面的前后缀不难看出，对于s的子串，存在部分前后缀重复的情况，我们需要的正是重复子串的最大长度。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">s的子串</th>\n<th align=\"center\">前缀</th>\n<th align=\"center\">后缀</th>\n<th align=\"center\"><strong>公共前后缀最长长度</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">ab</td>\n<td align=\"center\">a</td>\n<td align=\"center\">b</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">abc</td>\n<td align=\"center\">a,ab</td>\n<td align=\"center\">c,bc</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">abca</td>\n<td align=\"center\"><code>a</code>,ab,abc</td>\n<td align=\"center\"><code>a</code>,ca,bca</td>\n<td align=\"center\"><code>1</code></td>\n</tr>\n<tr>\n<td align=\"center\">abcab</td>\n<td align=\"center\">a,<code>ab</code>,abc,abca</td>\n<td align=\"center\">b,<code>ab</code>,cab,bcab</td>\n<td align=\"center\"><code>2</code></td>\n</tr>\n</tbody></table>\n</li>\n<li><p><em><strong>next数组（部分匹配表）</strong></em><br>KMP的next数组告诉我们：当模式串中的某个字符跟主串中的某个字符失配时，模式串下一步应该跳到哪个位置。</p>\n</li>\n</ul>\n<p>对于s的<strong>每个字符</strong>而言，当这个字符作为子串的最后一位时，公共前后缀最长长度为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字符（标红部分）</th>\n<th align=\"center\">公共前后缀最长长度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>a</code>bcab</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">a<code>b</code>cab</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">ab<code>c</code>ab</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">abc<code>a</code>b</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">abca<code>b</code></td>\n<td align=\"center\">2</td>\n</tr>\n</tbody></table>\n<p>那么全部右移一位，令next[0]&#x3D;-1：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字符</th>\n<th align=\"center\">i</th>\n<th align=\"center\">next[i]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">0</td>\n<td align=\"center\">-1</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">c</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td align=\"center\">3</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\">4</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<p><strong>实际匹配过程中，j移动到子串p的next[j]位置，p相对s向右移动j-next[j]位置。</strong></p>\n<ul>\n<li><strong>迭代法求p的next数组</strong><br>我们知道：</li>\n</ul>\n<pre><code class=\"language-cpp\">next[0]=-1;\nnext[1]=0;\n</code></pre>\n<p>并且<code>next[j]</code>代表p[0…j-1]的子串公共前后缀最长长度。<br>∴ 变量定义如下：<br><code>j</code>：当前子串指针<br><code>k</code>：当前匹配的前后缀长度（&#x3D;next[j-1]）<br><code>next[j]=k</code>：next[0]&#x3D;-1 即当p[0]都匹配失败时，只能回到j&#x3D;0重新匹配。</p>\n<pre><code class=\"language-cpp\">void GetNext(char p[], int next[])\n&#123;\n    int j = 0, k = -1;\n    next[j] = k;\n    while (p[j] != &#39;\\0&#39;)             //遍历整个子串p\n    &#123;\n        if (k == -1 || p[j] == p[k]) //匹配成功😀或者k=-1（刚匹配到字串的第一个）\n        &#123;\n            j++;                     //j指针后移\n            k++;\n            next[j] = k;             //记录当前前后缀匹配长度\n        &#125; \n        else \n        &#123;\n            k = next[k];             //匹配失败😭，回溯到next[k]寻找更短的前后缀\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<ul>\n<li>KMP主算法<br>得到next数组的方法<code>GetNext()</code>，就可以完整的写出KMP函数。这里写成一个函数：</li>\n</ul>\n<pre><code class=\"language-cpp\">int KMP(string s,string p)&#123;\n    int m=s.size();\n    int n=p.size();\n    if(m==0)&#123;\n        return 0;\n    &#125;\n    //⬇️计算next数组\n    vector&lt;int&gt;next;\n    int j=0;\n    for(int i=0;i&lt;n;i++)&#123;\n        while(j&gt;0 &amp;&amp; p[i]!=p[j])&#123;\n            j=next[j-1];\n        &#125;\n        if(p[i]==p[j])&#123;\n            j++;\n        &#125;\n        next[i]=j;\n    &#125;\n    //⬇️KMP搜索匹配\n    int j=0;\n    for(int i=0;i&lt;m;i++)&#123;\n        while(j&gt;0 &amp;&amp; s[i]!=p[j])&#123;\n            j=next[j-1];\n        &#125;\n        if(s[i]==p[j])&#123;\n            j++;\n        &#125;\n        if(j==n)&#123;\n            return i-n+1;\n        &#125;\n    &#125;\n    return -1;\n&#125;\n</code></pre>\n<p>说实话，后半部分现在不能完全理解，让我再多磕几天。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int lengthOfLastWord(string s) &#123;\n        int len=s.length();\n        int m=0,n=0;\n        for(int i=len-1;i&gt;0;i--)&#123;\n            if(s[i]!=&#39; &#39; &amp;&amp; (s[i+1]==&#39; &#39; || s[i+1]==&#39;\\0&#39;))&#123;\n                m=i;\n            &#125;\n            if((s[i-1]==&#39; &#39; || s[i-1]==&#39;\\0&#39;) &amp;&amp; s[i]!=&#39; &#39;)&#123;\n                n=i;\n                break;\n            &#125;\n        &#125;\n        return m-n+1;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"1021-删除最外层的括号\"><a href=\"#1021-删除最外层的括号\" class=\"headerlink\" title=\"1021.删除最外层的括号\"></a>1021.删除最外层的括号</h1><blockquote>\n<p>有效括号字符串为空 “”、”(“ + A + “)” 或 A + B ，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。<br>例如，””，”()”，”(())()” 和 “(()(()))” 都是有效的括号字符串。<br>如果有效字符串 s 非空，且不存在将其拆分为 s &#x3D; A + B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。<br>给出一个非空有效字符串 s，考虑将其进行原语化分解，使得：s &#x3D; P_1 + P_2 + … + P_k，其中 P_i 是有效括号字符串原语。<br>对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; s.length &lt;&#x3D; 105</li>\n<li>s[i] 为 ‘(‘ 或 ‘)’</li>\n<li>s 是一个有效括号字符串</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>引用官方题解的话：<strong>遍历 s，并用一个栈来表示括号的深度。遇到 ‘(’ 则将字符入栈，遇到 ‘)’ 则将栈顶字符出栈。栈从空到下一次空的过程，则是扫描了一个原语的过程。</strong></p>\n<h2 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    string removeOuterParentheses(string s) &#123;\n        string res;\n        int cnt=0;\n        for(char ch:s)&#123;\n            if(ch==&#39;)&#39;)&#123;\n                cnt--;\n            &#125;\n            if(cnt&gt;0)&#123;\n                res.push_back(ch);\n            &#125;\n            if(ch==&#39;(&#39;)&#123;\n                cnt++;\n            &#125;\n        &#125;\n        return res;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"859-亲密字符串\"><a href=\"#859-亲密字符串\" class=\"headerlink\" title=\"859.亲密字符串\"></a>859.亲密字符串</h1><blockquote>\n<p>给你两个字符串 s 和 goal ，只要我们可以通过交换 s 中的两个字母得到与 goal 相等的结果，就返回 true ；否则返回 false 。<br>交换字母的定义是：取两个下标 i 和 j （下标从 0 开始）且满足 i !&#x3D; j ，接着交换 s[i] 和 s[j] 处的字符。</p>\n<ul>\n<li>例如，在 “abcd” 中交换下标 0 和下标 2 的元素可以生成 “cbad” 。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; s.length, goal.length &lt;&#x3D; 2 * 104</li>\n<li>s 和 goal 由小写英文字母组成</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>都去给我关注<a href=\"https://leetcode.cn/u/ac_oier/\">三叶大佬</a>！<br>属于<strong>模拟</strong>类型的题目<br>既然交换s中的两个字母&#x3D;&#x3D;goal，即为亲密。那么：<br><em><strong>1️⃣不亲密</strong></em><br><code>s</code>与<code>goal</code>长度不同 <strong>或</strong> 词频不同<br><em><strong>2️⃣亲密</strong></em></p>\n<ul>\n<li><code>s</code>与<code>goal</code>不同的的字符串数量为2<br><strong>或</strong></li>\n<li><code>s</code>与<code>goal</code>不同的字符串数量为0 并且 <code>s</code>中存在出现次数&gt;2的字符</li>\n</ul>\n<p> PS: 这里<a href=\"https://leetcode.cn/u/MiracleSNeko/\">评论区</a>特好玩😂“我真傻，真的，”我抬起我没有神采的眼睛来，接着说。“我单知道两个不同的字符互相交换，会生成一个亲密字符串；我不知道相同的字符也会互相换着玩。……” 我接着但是呜咽，说不出成句的话来。（</p>\n<p>所以注意：即使一开始s&#x3D;&#x3D;goal，但是s怎么交换2字符都不能再&#x3D;&#x3D;goal，也<strong>不算亲密</strong>。</p>\n<p>还有一个代码小细节：<strong>为什么是26？</strong><br>字符<code>&#39;a&#39;</code> - <code>&#39;z&#39;</code>共26个：<br>题目限定了输入字符串只包含小写字母，所以最多只需要存储26个字符的频次。</p>\n<h2 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-CPP\">class Solution &#123;\npublic:\n    bool buddyStrings(string s, string goal) &#123;\n        if(s.size()!=goal.size())&#123;\n            return false;\n        &#125;\n        if(s==goal)&#123;\n            vector&lt;int&gt; cnt(26);\n            for(int i=0;i&lt;s.size();i++)&#123;\n                cnt[s[i]-&#39;a&#39;]++;\n                if(cnt[s[i]-&#39;a&#39;]&gt;1)&#123;\n                    return true;\n                &#125;\n            &#125;\n            return false;\n        &#125;\n        else&#123;//记录s和goal不相同的字符位置\n            int first,second;\n            first=-1;\n            second=-1;\n            for(int i=0;i&lt;s.size();i++)&#123;\n                if(s[i]!=goal[i])&#123;\n                    if(first==-1)&#123;\n                        first=i;\n                    &#125;\n                    else if(second==-1)&#123;\n                        second=i;\n                    &#125;\n                    else&#123;\n                        return false;\n                    &#125;\n                &#125;\n            &#125;\n        //检查是否可以交换\n        return (second!=-1 &amp;&amp; s[first]==goal[second] &amp;&amp; s[second]==goal[first]);\n        &#125;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"3304-找出第K个字符Ⅰ\"><a href=\"#3304-找出第K个字符Ⅰ\" class=\"headerlink\" title=\"3304.找出第K个字符Ⅰ\"></a>3304.找出第K个字符Ⅰ</h1><blockquote>\n<p>Alice 和 Bob 正在玩一个游戏。最初，Alice 有一个字符串 word &#x3D; “a”。<br>给定一个正整数 k。<br>现在 Bob 会要求 Alice 执行以下操作 无限次 :</p>\n<ul>\n<li>将 word 中的每个字符 更改 为英文字母表中的 下一个 字符来生成一个新字符串，并将其 追加 到原始的 word。<br>例如，对 “c” 进行操作生成 “cd”，对 “zb” 进行操作生成 “zbac”。<br>在执行足够多的操作后， word 中 至少 存在 k 个字符，此时返回 word 中第 k 个字符的值。<br>注意，在操作中字符 ‘z’ 可以变成 ‘a’。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; k &lt;&#x3D; 500</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>主打一个模拟：<br><em><strong>1️⃣构造字符串<code>s</code></strong></em></p>\n<ul>\n<li><p>初始值为<code>&quot;a&quot;</code></p>\n</li>\n<li><p>每轮迭代，生成s的副本t，然后每个字符变成它的下一个字母：<code>((word[i]-&#39;a&#39;+1)%26+&#39;a&#39;)</code></p>\n<blockquote>\n<p>这里用ASCII码运算，因为’a’<del>‘z’为98</del>233,所以<code>word[i]-&#39;a&#39;</code>计算word[i]相对与a的偏移量，即字符word[i]是字母表中的<strong>第<code>word[i]-&#39;a&#39;</code>个字母</strong>，<code>+1</code>即为后一个字符；<br><code>%26+&#39;a&#39;</code>的原因是：当word[i]为<code>&#39;z&#39;</code>时,让26变回0，所以%26取模。</p>\n</blockquote>\n</li>\n<li><p>将<code>t</code>拼接回<code>s</code></p>\n</li>\n</ul>\n<p><em><strong>2️⃣终止条件</strong></em></p>\n<ul>\n<li>当<code>s.size()&gt;=k</code>时，直接返回s[k-1]</li>\n</ul>\n<h2 id=\"完整代码-3\"><a href=\"#完整代码-3\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>c&#x3D;word[i]</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    char kthCharacter(int k) &#123;\n        string word=&quot;a&quot;;\n        while(word.size()&lt;k)&#123;\n            string t;\n            for(char c:word)&#123;\n                t.push_back((c-&#39;a&#39;+1)%26+&#39;a&#39;);\n            &#125;\n            word+=t;\n        &#125;\n        return word[k-1];\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "算法",
                "字符串",
                "滑动窗口"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/03/04/Leetcode%E6%95%B0%E7%BB%84/",
            "url": "https://232akira.github.io/2025/03/04/Leetcode%E6%95%B0%E7%BB%84/",
            "title": "Leetcode数组",
            "date_published": "2025-03-04T11:15:05.000Z",
            "content_html": "<p>本来想一道题一篇文，但是做的大多是简单题所以按模块归类好复习一点。</p>\n<h1 id=\"1232-缀点成线\"><a href=\"#1232-缀点成线\" class=\"headerlink\" title=\"1232.缀点成线\"></a>1232.缀点成线</h1><blockquote>\n<p>给定一个数组 coordinates ，其中 coordinates[i] &#x3D; [x, y] ， [x, y] 表示横坐标为 x、纵坐标为 y 的点。请你来判断，这些点是否在该坐标系中属于同一条直线上。</p>\n<ul>\n<li>2 &lt;&#x3D; coordinates.length &lt;&#x3D; 1000</li>\n<li>coordinates[i].length &#x3D;&#x3D; 2</li>\n<li>-10^4 &lt;&#x3D; coordinates[i][0], coordinates[i][1] &lt;&#x3D; 10^4</li>\n<li>coordinates 中不含重复的点</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>我本来是想着soeasy，用y&#x2F;x对比斜率就行了，然后发现部分样例通不过。定睛一看，发现直线不一定过原点…</p>\n<p>那么就不使用斜率，而是使用<strong>斜率交叉乘法</strong>：如果所有点都在同一条直线上，那么<strong>对于任意两点P1(x1,y1)、P2(x2,y2)、P3(x3,y3)之间的斜率必须相等</strong>。也就是<code>(y2-y1)/(x2-x1)=(y3-y1)/(x3-x1)</code>。为避免除法带来的浮点误差，用<strong>交叉相乘</strong>验证更好。<br><em><strong>并且注意！</strong></em><br>因为我的验证方法需要三个点，但是这道题有可<code>coordinates,length=2</code>的情况，那就直接返回true，因为<strong>两点确定一条直线</strong>。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    bool checkStraightLine(vector&lt;vector&lt;int&gt;&gt;&amp; coordinates) &#123;\n        int x1,y1,x2,y2;\n        x1=coordinates[0][0];\n        y1=coordinates[0][1];\n        x2=coordinates[1][0];\n        y2=coordinates[1][1];\n        if(coordinates.size()==2)&#123;\n            return true;\n        &#125;\n        for(int i=2;i&lt;coordinates.size();i++)&#123;\n            int x3=coordinates[i][0];\n            int y3=coordinates[i][1];\n            if((y2-y1)*(x3-x1)!=(x2-x1)*(y3-y1))&#123;\n                return false;\n            &#125;\n        &#125;\n        return true;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2597-美丽子集的数目\"><a href=\"#2597-美丽子集的数目\" class=\"headerlink\" title=\"2597.美丽子集的数目\"></a>2597.美丽子集的数目</h1><blockquote>\n<p>给你一个由正整数组成的数组 nums 和一个 正 整数 k 。<br>如果 nums 的子集中，任意两个整数的绝对差均不等于 k ，则认为该子数组是一个 美丽 子集。<br>返回数组 nums 中 非空 且 美丽 的子集数目。<br>nums 的子集定义为：可以经由 nums 删除某些元素（也可能不删除）得到的一个数组。只有在删除元素时选择的索引不同的情况下，两个子集才会被视作是不同的子集。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 18</li>\n<li>1 &lt;&#x3D; nums[i], k &lt;&#x3D; 1000</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>涉及<strong>子集</strong>相关问题，一般有两种方法：</p>\n<ul>\n<li>回溯</li>\n<li>位运算<br>本题选择<strong>回溯</strong>算法。因为该方法可在生成子集时<strong>剪枝</strong>。</li>\n</ul>\n<p>假设 nums &#x3D; [2, 4, 6]，我们希望生成所有子集,那么回溯的选择路径如下：</p>\n<pre><code>          dfs(0)\n        /        \\\n    不选2        选2\n     / \\         /  \\\n  不选4  选4   不选4  选4\n  ...\n</code></pre>\n<h2 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int ans=0;\n    void dfs(int index,vector&lt;int&gt;&amp; nums,unordered_map&lt;int,int&gt;&amp; freq,int k)&#123;\n        if(index==nums.size())&#123;\n            ans++;\n            return;\n        &#125;\n        dfs(index+1,nums,freq,k);\n        if(freq[nums[index]-k]==0 &amp;&amp; freq[nums[index]+k]==0)&#123;\n            freq[nums[index]]++;\n            dfs(index+1,nums,freq,k);\n            freq[nums[index]]--;\n        &#125;\n    &#125;\n    int beautifulSubsets(vector&lt;int&gt;&amp; nums, int k) &#123;\n        unordered_map&lt;int,int&gt; freq;\n        dfs(0,nums,freq,k);\n        return ans-1;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2070-每一个查询的最大美丽值\"><a href=\"#2070-每一个查询的最大美丽值\" class=\"headerlink\" title=\"2070.每一个查询的最大美丽值\"></a>2070.每一个查询的最大美丽值</h1><p>又美丽了家人们🤣</p>\n<blockquote>\n<p>给你一个二维整数数组 items ，其中 items[i] &#x3D; [pricei, beautyi] 分别表示每一个物品的价格和美丽值 。<br>同时给你一个下标从 0 开始的整数数组 queries 。对于每个查询 queries[j] ，你想求出价格小于等于 queries[j] 的物品中，最大的美丽值 是多少。如果不存在符合条件的物品，那么查询的结果为 0 。<br>请你返回一个长度与 queries 相同的数组 answer，其中 answer[j]是第 j 个查询的答案。</p>\n</blockquote>\n<blockquote>\n<p>提示：<br>-1 &lt;&#x3D; items.length, queries.length &lt;&#x3D; 105<br>-items[i].length &#x3D;&#x3D; 2<br>-1 &lt;&#x3D; pricei, beautyi, queries[j] &lt;&#x3D; 109</p>\n</blockquote>\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h3><p>首先复习一下二分查找，我又忘了咋写。<a href=\"https://232akira.github.io/2025/03/02/%E5%8A%9B%E6%89%A3%E5%A4%87%E5%BF%98%E5%BD%95/\">另一篇</a>copy来的</p>\n<blockquote>\n<ul>\n<li>要查找的目标<code>target</code></li>\n<li>索引<code>index</code></li>\n<li>左、右指示符<code>left</code>、<code>right</code></li>\n<li>中间指示符<code>mid</code><br>主要思路就是计算<code>mid</code>的位置：<br>1️⃣<code>nums[mid] == target</code> 🤭找到了<br>2️⃣<code>nums[mid] &lt; target</code> → target在left的右边 → left右移 👉️left&#x3D;mid+1;<br>3️⃣<code>nums[mid] &gt; target</code> → target在right的左边 → right左移 👉️right&#x3D;mid-1;</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-cpp\">//形参：vector&lt;int&gt;nums,int target\nint left=0;\nint right=nums.size()-1;\nwhile(left&lt;=right)&#123;\n    int mid=left+(right-left)/2;\n    if(nums[mid]=target)&#123;\n        return mid;\n    &#125;\n    else if(nums[mid]&lt;target)&#123;\n        left=mid+1;\n    &#125;\n    else&#123;\n        right=mid-1;\n    &#125;\n    return index;\n&#125;\n</code></pre>\n<h3 id=\"本题思路\"><a href=\"#本题思路\" class=\"headerlink\" title=\"本题思路\"></a>本题思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a><em><strong>方法一</strong></em></h4><p>完球，力扣的急速判题卡死了😂第一个方法直观而且没用二分，美美超时。</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    vector&lt;int&gt; maximumBeauty(vector&lt;vector&lt;int&gt;&gt;&amp; items, vector&lt;int&gt;&amp; queries) &#123;\n        vector&lt;int&gt; answer(queries.size(),0);\n        for(int j=0;j&lt;queries.size();j++)&#123;\n            int target=queries[j];\n            int maxnum=0;\n            for(int i=0;i&lt;items.size();i++)&#123;\n                if(items[i][0]&lt;=target)&#123;\n                    maxnum=max(maxnum,items[i][1]);\n                &#125;\n            &#125;\n            answer[j]=maxnum;\n        &#125;\n        return answer;\n    &#125;\n&#125;;\n</code></pre>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a><em><strong>方法二</strong></em></h4><p>老老实实用二分。注意：二分查找的前提是<strong>有序</strong>。</p>\n<ul>\n<li>先按照price递增排序;</li>\n<li>定义美丽数组;</li>\n<li>遍历items:<strong>存储当前遍历到的最大美丽值</strong>;</li>\n<li>定义答案数组;</li>\n<li>遍历querties：<strong>二分查找</strong></li>\n</ul>\n<p>二分查找目标🤟<code>items[i][0] &lt;= queries[j]</code> 的最大 i<br>有点绕了，兄弟兄弟…</p>\n<h2 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    vector&lt;int&gt; maximumBeauty(vector&lt;vector&lt;int&gt;&gt;&amp; items, vector&lt;int&gt;&amp; queries) &#123;\n        sort(items.begin(),items.end());\n        vector&lt;int&gt;maxbeauty(items.size());\n        maxbeauty[0]=items[0][1];\n        for(int i=1;i&lt;items.size();i++)&#123;\n            maxbeauty[i]=max(maxbeauty[i-1],items[i][1]);\n        &#125;\n        vector&lt;int&gt;answer(queries.size(),0);\n        for(int j=0;j&lt;queries.size();j++)&#123;\n            int target=queries[j];\n            int left=0;\n            int right=items.size()-1;\n            int index=-1;\n            while(left&lt;=right)&#123;\n                int mid=left+(right-left)/2;\n                if(items[mid][0]&lt;=target)&#123;\n                    index=mid;\n                    left=mid+1;\n                &#125;\n                else&#123;\n                    right=mid-1;\n                &#125;\n            &#125;\n            if(index!=-1)&#123;\n                answer[j]=maxbeauty[index];\n            &#125;\n        &#125;\n        return answer;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2269-找到一个数字的-K-美丽值\"><a href=\"#2269-找到一个数字的-K-美丽值\" class=\"headerlink\" title=\"2269.找到一个数字的 K 美丽值\"></a>2269.找到一个数字的 K 美丽值</h1><blockquote>\n<p>给你一个下标从0开始的整数数组nums。对于每个下标i（1 &lt;&#x3D; i &lt;&#x3D; nums.length - 2），nums[i] 的美丽值等于：<br>2，对于所有 0 &lt;&#x3D; j &lt; i 且 i &lt; k &lt;&#x3D; nums.length - 1 ，满足 nums[j] &lt; nums[i] &lt; nums[k]<br>1，如果满足 nums[i - 1] &lt; nums[i] &lt; nums[i + 1] ，且不满足前面的条件<br>0，如果上述条件全部不满足<br>返回符合 1 &lt;&#x3D; i &lt;&#x3D; nums.length - 2 的所有 nums[i] 的美丽值的总和。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>3 &lt;&#x3D; nums.length &lt;&#x3D; 105</li>\n<li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 105</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><strong>难点在于nums[i]的美丽值为2的情况：</strong><br>突然想起来高中数学老师的口头禅：“大于大的，小于小的”。<br>nums[i]需要满足：比其左侧所有的nums[j]更大，以及<em>比其右侧所有的nums</em>[k]更小。<br>即<strong>大于左侧最大值，小于右侧最小值</strong>。</p>\n<ul>\n<li><code>*max_element(arr.begin(),arr.end())</code>求数组最大值</li>\n<li><code>*min_element(arr.begin(),arr.end())</code>求数组最小值</li>\n</ul>\n<p>？超时了😇我还说想清楚了不难呢…</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int sumOfBeauties(vector&lt;int&gt;&amp; nums) &#123;\n        int maxval,minval,ans=0;\n        for(int i=1;i&lt;nums.size()-1;i++)&#123;\n            maxval=*max_element(nums.begin(),nums.begin()+i);\n            minval=*min_element(nums.begin()+i+1,nums.end());\n            if(maxval&lt;nums[i] &amp;&amp; minval&gt;nums[i])&#123;\n                ans+=2;\n            &#125;\n            else if(nums[i-1]&lt;nums[i] &amp;&amp; nums[i+1]&gt;nums[i])&#123;\n                ans+=1;\n            &#125;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<p>改进方法就是：左侧最大值和右侧最小值各自都用一个数组存起来所有i的情况，再进行条件判断。同时可以存一个，另一个随每次判断进行更新就好。</p>\n<pre><code>定义左侧最大int数组leftMax;\n遍历i从1到nums.size()：\n    leftMax[i]=max(左侧最大数组[i-1],原数组[i-1]);\nint 美丽值;\n定义右侧最小int变量rightMin并初始化为原数组[length()-1];\n遍历i从length()-2到0:\n    如果（条件一）：\n        美丽值+=2;\n    否则如果（条件2）：\n        美丽值+=1;\n    更新右侧最小值=min（右侧最小值，原数组[i]）;\n返回美丽值\n</code></pre>\n<h2 id=\"完整代码-3\"><a href=\"#完整代码-3\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int sumOfBeauties(vector&lt;int&gt;&amp; nums) &#123;\n        vector&lt;int&gt; leftMax(nums.size(),0);\n        for(int i=1;i&lt;nums.size();i++)&#123;\n            leftMax[i]=max(leftMax[i-1],nums[i-1]);\n        &#125;\n        int ans=0;\n        int rightMin=nums[nums.size()-1];\n        for(int i=nums.size()-2;i&gt;0;i--)&#123;\n            if(leftMax[i]&lt;nums[i] &amp;&amp; nums[i]&lt;rightMin)&#123;\n                ans+=2;\n            &#125;\n            else if(nums[i-1]&lt;nums[i] &amp;&amp; nums[i]&lt;nums[i+1])&#123;\n                ans+=1;\n            &#125;\n            rightMin=min(rightMin,nums[i]);\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"杨辉三角（一维数组版）\"><a href=\"#杨辉三角（一维数组版）\" class=\"headerlink\" title=\"杨辉三角（一维数组版）\"></a>杨辉三角（一维数组版）</h1><h2 id=\"完整代码-4\"><a href=\"#完整代码-4\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-c\">void Print_TR(int n)&#123;\n    int arr[n]=&#123;1&#125;;\n    for(int i=0;i&lt;n;i++)&#123;\n        for(int j=i;j&gt;0;j--)&#123;\n            arr[j]+=arr[j-1];\n        &#125;\n        //打印\n        for(int j=0;j&lt;=i;j++)&#123;\n            printf(&quot;%d &quot;,arr[j]);\n        &#125;\n        printf(&quot;\\n&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"53-最大子数组和\"><a href=\"#53-最大子数组和\" class=\"headerlink\" title=\"53.最大子数组和\"></a>53.最大子数组和</h1><blockquote>\n<p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>子数组是数组中的一个连续部分。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 105</li>\n<li>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><strong>经典解法：Kadane算法</strong>。核心思路是动态规划，通过遍历数组维护当前最大子数组和。整体思路如下：<br>1️⃣<strong>维护两个变量：</strong></p>\n<ul>\n<li><code>sum</code>当前最大子数组和</li>\n<li><code>maxsum</code>全局最大子数组和<br>2️⃣<strong>遍历数组，每次决定是否扩展当前子数组</strong></li>\n<li>如果<code>sum+nums[i] &lt; nums[i]</code> 从nums[i]重新开始（之前的子数组必定与最大和无关</li>\n<li>否则继续累加nums[i]<br>3️⃣<strong>每次更新<code>maxsum</code></strong></li>\n</ul>\n<h2 id=\"完整代码-5\"><a href=\"#完整代码-5\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) &#123;\n        int sum=nums[0];\n        int maxsum=nums[0];\n        for(int i=1;i&lt;nums.size();i++)&#123;\n            sum=max(nums[i],sum+nums[i]);\n            maxsum=max(sum,maxsum);\n        &#125;\n        return maxsum;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"53-最大子数组和-1\"><a href=\"#53-最大子数组和-1\" class=\"headerlink\" title=\"53.最大子数组和\"></a>53.最大子数组和</h1><blockquote>\n<p>给你一个整数数组 nums 。请你创建一个满足以下条件的二维数组：</p>\n<ul>\n<li>二维数组应该 只 包含数组 nums 中的元素。</li>\n<li>二维数组中的每一行都包含 不同 的整数。</li>\n<li>二维数组的行数应尽可能 少 。<br>返回结果数组。如果存在多种答案，则返回其中任何一种。<br>请注意，二维数组的每一行上可以存在不同数量的元素。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 200</li>\n<li>1 &lt;&#x3D; nums[i] &lt;&#x3D; nums.length</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-5\"><a href=\"#解题思路-5\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>用<strong>哈希表</strong>！😎统计元素出现次数，定义一个一维数组存每行元素。每用一个元素。哈希表中该元素次数–（当次数为0时）从表中删除该元素。</p>\n<p>这里看题解 涉及到stl<strong>迭代器</strong><code>it</code>的用法：对于定义一个哈希表:<code>unordered_map&lt;int,int&gt;cnt</code></p>\n<ul>\n<li>当用<code>auto:it</code>遍历<code>cnt.begin()</code>到<code>!=cnt.end()</code>时</li>\n<li><code>it-&gt;first</code>即为哈希表键值对(key,value)中的<code>key</code>。本题中即为<strong>元素本身</strong></li>\n<li><code>it-&gt;second</code>即为哈希表键值对(key,value)中的<code>value</code>。本题中即为元素的<strong>出现次数</strong></li>\n</ul>\n<h2 id=\"完整代码-6\"><a href=\"#完整代码-6\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>感谢<a href=\"https://leetcode.cn/u/endlesscheng/\">灵神</a>题解，教会我很多</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    vector&lt;vector&lt;int&gt;&gt; findMatrix(vector&lt;int&gt;&amp; nums) &#123;\n        unordered_map&lt;int,int&gt; cnt;\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        for(int x:nums)&#123;\n            cnt[x]++;\n        &#125;\n        while(!cnt.empty())&#123;\n            vector&lt;int&gt;row;\n            for(auto it=cnt.begin();it!=cnt.end();)&#123;\n                row.push_back(it-&gt;first);\n                if(--it-&gt;second==0)&#123;\n                    it=cnt.erase(it);\n                &#125;\n                else&#123;\n                    it++;\n                &#125;\n            &#125;\n            ans.push_back(row);\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "力扣",
                "数组",
                "C++",
                "哈希表",
                "动态规划",
                "二分查找"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/03/04/Leetcode%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/",
            "url": "https://232akira.github.io/2025/03/04/Leetcode%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/",
            "title": "Leetcode贪心算法",
            "date_published": "2025-03-04T05:41:46.000Z",
            "content_html": "<p>力扣连着刷到了几个贪心，而且另一篇笔记字数要爆了，决定先按大类慢慢分一下。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://zhuanlan.zhihu.com/p/180104885\">https://zhuanlan.zhihu.com/p/180104885</a></p>\n<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><p>规律特征就是更加注重当前的状态,通常用于组合优化问题。即每一次都做出<strong>当前</strong>看起来<strong>最好的</strong>选择。每次只需要考虑一个问题，并通常是自底向上求解。即<strong>局部最优→全局最优</strong>。<br>下面上题：</p>\n<h3 id=\"Leetcode-No-455-分发饼干\"><a href=\"#Leetcode-No-455-分发饼干\" class=\"headerlink\" title=\"Leetcode No.455 分发饼干\"></a>Leetcode No.455 分发饼干</h3><p>待续~</p>\n<h3 id=\"Leetcode-No-976-三角形的最大周长\"><a href=\"#Leetcode-No-976-三角形的最大周长\" class=\"headerlink\" title=\"Leetcode No.976 三角形的最大周长\"></a>Leetcode No.976 三角形的最大周长</h3><blockquote>\n<p>给定由一些正数（代表长度）组成的数组 nums ，返回 由其中三个长度组成的、面积不为零的三角形的最大周长 。如果不能形成任何面积不为零的三角形，返回 0。</p>\n<ul>\n<li><code>3 &lt;= nums.length &lt;= 104</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 106</code></li>\n</ul>\n</blockquote>\n<h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>因为题目需要的是最大的三角形周长，所以不需要暴力列举所有的情况再一一对比，而是直接奔着“最大”这个目标求解就行:<br>三条边a,b,c（假设从小到大已排好），当a+b&gt;c时满足三角形。<strong>如果不满足，必须换更大的a,b</strong>。<br>贪心优化策略：</p>\n<ul>\n<li>nums排序</li>\n<li>从最大的三个数开始 尝试是否满足</li>\n<li>若无法满足，往前找更小的a,b</li>\n<li>一旦找到符合条件的三边，直接返回</li>\n</ul>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><pre><code>class Solution &#123;\npublic:\n    int largestPerimeter(vector&lt;int&gt;&amp; nums) &#123;\n        sort(nums.begin(),nums.end());\n        for(int i=nums.size()-1;i&gt;=2;i++)&#123;\n            if(nums[i-1]+nums[i-2]&gt;nums[i])\n        &#125;\n        return 0;\n    &#125;\n&#125;;\n</code></pre>\n<h3 id=\"Leetcode-No-860-柠檬水找零\"><a href=\"#Leetcode-No-860-柠檬水找零\" class=\"headerlink\" title=\"Leetcode No.860 柠檬水找零\"></a>Leetcode No.860 柠檬水找零</h3><blockquote>\n<p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。<br>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。<br>注意，一开始你手头没有任何零钱。<br>给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p>\n<ul>\n<li><code>1 &lt;= bills.length &lt;= 105</code></li>\n<li><code>bills[i] 不是 5 就是 10 或是 20 </code></li>\n</ul>\n</blockquote>\n<h4 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>**找零时，尽量先用大额。**并且只记录5美元、10美元的数量（因为这题目的情况不可能找20块）那么</p>\n<ul>\n<li>收到5美元  直接收 </li>\n<li>收到10美元 <code>10-5=5</code> 找5美元（如果有）</li>\n<li>收到20美元 <strong>贪心来了~</strong><code>20-5=15</code>优先使用10+5找零，否则用5+5+5（如果有）</li>\n</ul>\n<h4 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><pre><code>class Solution &#123;\npublic:\n    bool lemonadeChange(vector&lt;int&gt;&amp; bills) &#123;\n        int five=0,ten=0;\n        for(int bill:bills)&#123;\n            if(bill==5)&#123;\n                five++;\n            &#125;\n            else if(bill==10)&#123;\n                if(five!=0)&#123;\n                    five--;\n                    ten++;\n                &#125;\n                else&#123;\n                    return false;\n                &#125;\n            &#125;\n            else if(bill==20)&#123;\n                if(ten&gt;0 &amp;&amp; five&gt;0)&#123;\n                    ten--;\n                    five--;\n                &#125;\n                else if(five&gt;=3)&#123;\n                    five-=3;\n                &#125;\n                else&#123;\n                    return false;\n                &#125;\n                \n            &#125;\n        &#125;\n        return true;\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "C++",
                "算法"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/03/02/%E5%8A%9B%E6%89%A3%E5%A4%87%E5%BF%98%E5%BD%95/",
            "url": "https://232akira.github.io/2025/03/02/%E5%8A%9B%E6%89%A3%E5%A4%87%E5%BF%98%E5%BD%95/",
            "title": "力扣备忘录",
            "date_published": "2025-03-02T11:55:55.000Z",
            "content_html": "<h1 id=\"简单题\"><a href=\"#简单题\" class=\"headerlink\" title=\"简单题\"></a>简单题</h1><h2 id=\"283-移动零\"><a href=\"#283-移动零\" class=\"headerlink\" title=\"283.移动零\"></a>283.移动零</h2><blockquote>\n<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<strong>请注意</strong>，必须在不复制数组的情况下原地对数组进行操作。</p>\n</blockquote>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>一开始看到这道题就觉得不就是交换嘛。但是发现题目中的：“保持非零元素的相对顺序”我就懵了。于是开始暴力穷举循环一层套一层…后来被拉回正道。<br>核心思想不变，仍是“交换”。<br>但是交换的条件是<strong>将非零元素全部移到数组头部</strong>，虽然直观看来与题目所引导的“0全部移到末尾”完全反着来，但是我发现这样做比把0移到末尾再对非零元素进行某种交换排序要来的简单得多。题目作者居心叵测啊（不是</p>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    void swap(vector&lt;int&gt;&amp; nums,int i,int j)&#123;\n        int t;\n        t=nums[i];\n        nums[i]=nums[j];\n        nums[j]=t;\n        \n    &#125;\n    void moveZeroes(vector&lt;int&gt;&amp; nums) &#123;\n        int i=0; \n        for(int j=0;j&lt;nums.size();j++)&#123;\n            if(nums[j]!=0)&#123;\n                swap(nums,i,j);\n                i++;\n            &#125;\n        &#125;\n\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"66-加一\"><a href=\"#66-加一\" class=\"headerlink\" title=\"66.加一\"></a>66.加一</h2><blockquote>\n<p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。<br>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。<br>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>\n</blockquote>\n<h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>判断数组末尾是否有9：\n    无9：末尾数字+1;\n    有9：\n        是否全为9：\n            是全9：\n                构造长度=size+1的数组，首位=1，其余全置0;\n            非全9：\n                找到倒着数第一个不是9的元素,\n                该元素加1,\n                末尾所有的9置0;\n</code></pre>\n<h3 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    vector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) &#123;\n        int len=digits.size();\n        if(digits[len-1]!=9)&#123;\n            digits[len-1]+=1;\n        &#125;\n        else&#123;\n            int cnt=0;//记录9出现的次数，第一个非9元素的下标即为len-cnt-1\n            for(int i=len-1;i&gt;=0;i--)&#123;\n                if(digits[i]==9)&#123;\n                    cnt++;\n                &#125;\n                else&#123;\n                    break;\n                &#125;\n            &#125;\n            if(cnt==len)&#123;\n                digits.insert(digits.begin(),1);\n                for(int i=1;i&lt;len+1;i++)&#123;\n                    digits[i]=0;\n                &#125;\n            &#125;\n            else&#123;\n                int index=len-cnt-1;\n                digits[index]+=1;\n                for(int i=index+1;i&lt;len;i++)&#123;\n                    digits[i]=0;\n                &#125;\n            &#125;\n        &#125;\n        return digits;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"896-单调数列\"><a href=\"#896-单调数列\" class=\"headerlink\" title=\"896.单调数列\"></a>896.单调数列</h2><blockquote>\n<p>如果数组是单调递增或单调递减的，那么它是<strong>单调</strong>的。<br>如果对于所有 i &lt;&#x3D; j，nums[i] &lt;&#x3D; nums[j]，那么数组 nums 是单调递增的。 如果对于所有 i &lt;&#x3D; j，nums[i] &gt;&#x3D; nums[j]，那么数组 nums 是单调递减的。<br>当给定的数组 nums 是单调数组时返回 true，否则返回 false。</p>\n</blockquote>\n<h3 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>bool 递增变量=真，递减变量=真；\n遍历数组：\n    如果该元素+1 大于 该元素：\n        标记递减变量=假；\n    如果该元素+1 小于 该元素：\n        标记递增变量=假；\n如果递增or递减=真，返回真；\n</code></pre>\n<h3 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    bool isMonotonic(vector&lt;int&gt;&amp; nums) &#123;\n        bool increase=true,decrease=true;\n        for(int i=0;i&lt;nums.size()-1;i++)&#123;\n            if(nums[i+1] &gt; nums[i])&#123;\n                decrease=false;\n            &#125;\n            if(nums[i+1] &lt; nums[i])&#123;\n                increase=false;\n            &#125;\n        &#125;\n        return decrease || increase;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"896-罗马数字转整数\"><a href=\"#896-罗马数字转整数\" class=\"headerlink\" title=\"896.罗马数字转整数\"></a>896.罗马数字转整数</h2><blockquote>\n<p><strong>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</strong><br>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</li>\n<li>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：<br>①I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>②X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>③C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>给定一个罗马数字，将其转换成整数。</strong></p>\n</blockquote>\n<h3 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这题一开始我无从下手，直接跑去翻题解了。</p>\n<p><strong>C++ <a href=\"https://www.w3cschool.cn/cpp/cpp-fu8l2ppt.html\">map</a>用法</strong><br>想起来python的字典。同样cpp stl中的map提供的是一种键值对（key-value）容器，其中的数据成对出现。</p>\n<ul>\n<li>初始化：<code>map类型 &lt;数据类型1，数据类型2&gt; 容器名</code></li>\n</ul>\n<p>对于map类型：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">键值对容器</th>\n<th align=\"center\">实现方式</th>\n<th align=\"center\">键值</th>\n<th align=\"center\">时间复杂度</th>\n<th align=\"center\">是否有序</th>\n<th align=\"center\">使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>unordered_map</code></td>\n<td align=\"center\">哈希表</td>\n<td align=\"center\">键-值对</td>\n<td align=\"center\">平均O(1)</td>\n<td align=\"center\">无序</td>\n<td align=\"center\">快速查找键对应的值</td>\n</tr>\n<tr>\n<td align=\"center\"><code>map</code></td>\n<td align=\"center\">红黑树</td>\n<td align=\"center\">键-值对</td>\n<td align=\"center\">O(logn)</td>\n<td align=\"center\">有序</td>\n<td align=\"center\">需要有序键值对</td>\n</tr>\n<tr>\n<td align=\"center\"><code>unordered_set</code></td>\n<td align=\"center\">哈希表</td>\n<td align=\"center\">键</td>\n<td align=\"center\">平均O(1)</td>\n<td align=\"center\">无序</td>\n<td align=\"center\">快速查找元素是否存在</td>\n</tr>\n<tr>\n<td align=\"center\"><code>set</code></td>\n<td align=\"center\">红黑树</td>\n<td align=\"center\">键</td>\n<td align=\"center\">O(logn)</td>\n<td align=\"center\">有序</td>\n<td align=\"center\">需要排序的集合</td>\n</tr>\n<tr>\n<td align=\"center\"><code>unordered_multimap</code></td>\n<td align=\"center\">哈希表</td>\n<td align=\"center\">键-值</td>\n<td align=\"center\">平均O(1)</td>\n<td align=\"center\">无序</td>\n<td align=\"center\">有重复键且不关心顺序</td>\n</tr>\n</tbody></table>\n<p><strong>对于本题</strong><br>引用评论区<a href=\"https://leetcode.cn/u/hust_wei/\">大佬</a>的解释：当前位置的元素比下个位置的元素小，就减去当前值，否则加上当前值。</p>\n<pre><code>定义键值对容器 &lt;字符，整型&gt; \n    分别对应罗马数字的字符和数值(注意字符变量加单引号);\n\nint 结果变量；\nint 罗马数字长度；\n遍历罗马数字：\n    如果元素 当前位置&lt;下一个位置：（注意使用值时加方括号[]）\n        结果变量-=值变量；\n    否则：\n        结果变量+=值变量；\n返回结果；\n</code></pre>\n<h3 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    unordered_map&lt;char,int&gt;mymap=&#123;\n        &#123;&#39;I&#39;,1&#125;,\n        &#123;&#39;V&#39;,5&#125;,\n        &#123;&#39;X&#39;,10&#125;,\n        &#123;&#39;L&#39;,50&#125;,\n        &#123;&#39;C&#39;,100&#125;,\n        &#123;&#39;D&#39;,500&#125;,\n        &#123;&#39;M&#39;,1000&#125;,\n    &#125;;\n    int romanToInt(string s) &#123;\n        int ans=0;\n        int len=s.length();\n        for(int i=0;i&lt;len;i++)&#123;\n            if(mymap[s[i]]&lt;mymap[s[i+1]])&#123;\n                ans-=mymap[s[i]];\n            &#125;\n            else&#123;\n                ans+=mymap[s[i]];\n            &#125;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"58-最后一个单词的长度\"><a href=\"#58-最后一个单词的长度\" class=\"headerlink\" title=\"58.最后一个单词的长度\"></a>58.最后一个单词的长度</h2><blockquote>\n<p>给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。<br><strong>单词</strong>是指仅由字母组成、不包含任何空格字符的最大子字符串。</p>\n</blockquote>\n<h3 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p><strong>【方法一】</strong><br>我的思路是<strong>从后向前</strong>遍历字符串时：如果它的后一个是空格或空，自己不是空格，意味着句尾有空格，该下标是倒着数第一个不为空格的字母；如果前一个是空格或空，自己不是空格，代表这是词的开头，记录下标直接退出循环。最后长度就是二者相减。<br>但是这样写大多数样例不通过（悲</p>\n<p>（二编）卧槽我改对了！！！</p>\n<p><strong>【方法二】</strong><br>不对那就改呗：直接从字符串的尾部开始遍历，<strong>跳过所有尾部空格</strong>，直到遇到<strong>第一个非空格字符</strong>，并计算其长度。能够更好的处理边界情况。</p>\n<pre><code>int 长度=字符串长度;\nint i=长度-1;\nint 结果长度=0\n当i大于等于0并且s的第i个字符为空格时：\n    i--；（倒着循环遍历）\n*本题设定s不为空，若无此条件需在此判断：当i&lt;0时直接返回（s为空）\n当i大于等于0并且s的第i个字符不为空格时：\n    结果长度++；\n    i--；\n返回结果长度;\n</code></pre>\n<h3 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p><strong>【方法一】</strong></p>\n<pre><code>class Solution &#123;\npublic:\n    int lengthOfLastWord(string s) &#123;\n        int len=s.length();\n        int m=0,n=0;\n        for(int i=len-1;i&gt;0;i--)&#123;\n            if(s[i]!=&#39; &#39; &amp;&amp; (s[i+1]==&#39; &#39; || s[i+1]==&#39;\\0&#39;))&#123;\n                m=i;\n            &#125;\n            if((s[i-1]==&#39; &#39; || s[i-1]==&#39;\\0&#39;) &amp;&amp; s[i]!=&#39; &#39;)&#123;\n                n=i;\n                break;\n            &#125;\n        &#125;\n        return m-n+1;\n    &#125;\n&#125;;\n</code></pre>\n<p><strong>【方法二】</strong></p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int lengthOfLastWord(string s) &#123;\n        int len=s.length();\n        int ans=0;\n        int i=len-1;\n        while(i&gt;=0 &amp;&amp; s[i]==&#39; &#39;)&#123;\n            i--;\n        &#125;\n        while(i&gt;=0 &amp;&amp; s[i]!=&#39; &#39;)&#123;\n            ans++;\n            i--;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"9-回文数\"><a href=\"#9-回文数\" class=\"headerlink\" title=\"9.回文数\"></a>9.回文数</h2><blockquote>\n<p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。<br>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>例如，121 是回文，而 123 不是。</p>\n</blockquote>\n<h3 id=\"解题思路-5\"><a href=\"#解题思路-5\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p><strong>关键点</strong></p>\n<ul>\n<li>回文数是正整数</li>\n<li>负数不是回文数</li>\n<li>一个数的最后一位是0且这个数不为0，不是回文数</li>\n</ul>\n<p>将数字的后半部分反转，用<code>反转数字</code>存储。最后的反转数字包含原始x的后半部分，x包含原始x的前半部分。<br>最后返回时：若<strong>原始x是偶数</strong>，那么对于回文数，<strong>x一定&#x3D;反转数字</strong>。若<strong>原始x是奇数</strong>，那么反转数字会比x多一位，这一位是反转数字的个位并且是原始x的中位数，不影响回文数判断。所以<strong>先去掉个位</strong>再与当前的x比较。</p>\n<pre><code>如果（x小于0，或者x的个位不等于0且x不等于0）：\n    不是回文数；\n定义反转数字=0；\n当（x &gt; 反转数字）：\n    反转数字=反转数字*10+x%10；\n    x/=10；\nx = 反转数字\n返回x = 反转数字 或者 x = 去掉个位的反转数字；\n</code></pre>\n<h3 id=\"AC代码-5\"><a href=\"#AC代码-5\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    bool isPalindrome(int x) &#123;\n        if(x&lt;0 || (x%10==0 &amp;&amp; x!=0))&#123;\n            return false;\n        &#125;\n        int num=0;\n        while(x&gt;num)&#123;\n            num=num*10+x%10;\n            x/=10;\n        &#125;\n        return x==num || x==num/10;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"14-最长公共前缀\"><a href=\"#14-最长公共前缀\" class=\"headerlink\" title=\"14.最长公共前缀\"></a>14.最长公共前缀</h2><blockquote>\n<p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</p>\n</blockquote>\n<h3 id=\"解题思路-6\"><a href=\"#解题思路-6\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>区区小简单，真是难倒我了。<br>这里总结力扣官方题解的纵向扫描方法。我一开始想的也是类似思路，奈何憋不出来代码。<br><strong>关键点</strong></p>\n<ul>\n<li>最长公共前缀的长度不可能超过任何一个字符串的长度</li>\n<li>数组strs的大小即为字符串的总个数</li>\n<li><strong>二维数组形式</strong>可以直接表示第i个字符的第j位</li>\n<li>如果 <strong><code>i</code>超出某个字符串的长度</strong>或**第<code>j</code>个字符串的第<code>i</code>个字符不等于<code>c</code>**时，直接返回当前的公共前缀。</li>\n<li>循环结束说明所有字符串的所有字符都匹配，那么第一个字符串本身就是最长公共前缀，返回第一个字符串<code>strs[0]</code>。</li>\n</ul>\n<pre><code>如果数组为空：\n    返回&quot;&quot;；\nint 长度变量=数组第一个字符串元素的长度；\nint 计数变量=数组大小；\n遍历i，从0到长度变量：\n    char 字符变量=第一个字符串的第i个字符；\n    遍历j，从1到计数变量：\n        如果（i==第j个字符串的大小 || 第j个字符串的第i个字符 ！= 字符变量）：\n            返回 第一个字符串的第一个字符~第i个字符；\n返回 第一个字符；\n</code></pre>\n<h3 id=\"AC代码-6\"><a href=\"#AC代码-6\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) &#123;\n        if(!strs.size())&#123;\n            return &quot;&quot;;\n        &#125;\n        int len=strs[0].size();\n        int cnt=strs.size();\n        for(int i=0;i&lt;len;i++)&#123;\n            char c=strs[0][i];\n            for(int j=1;j&lt;cnt;j++)&#123;\n                if(i==strs[j].size() || strs[j][i]!=c)&#123;\n                    return strs[0].substr(0,i);\n                &#125;\n            &#125;\n        &#125;\n        return strs[0];\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"20-有效的括号\"><a href=\"#20-有效的括号\" class=\"headerlink\" title=\"20.有效的括号\"></a>20.有效的括号</h2><blockquote>\n<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>\n</blockquote>\n<blockquote>\n<p>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p>\n</blockquote>\n<h3 id=\"解题思路-7\"><a href=\"#解题思路-7\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>定义栈的括号匹配规则；() [] &#123;&#125;\n\n初始化一个栈;\n当遇到左括号时：\n    左括号压栈；\n当遇到右括号时:\n    如果（栈空）:\n        ×；\n    否则：\n        char 栈顶元素；\n        弹出栈顶元素；\n        如果栈顶元素与当前右括号不匹配：\n            ×；\n字符串遍历完后：\n    如果（栈空）：\n        √；\n</code></pre>\n<ul>\n<li>这里的for循环可以直接用for(char ch:s)，表示<strong>对于字符串<code>s</code>中的每一个字符<code>ch</code>,执行循环内容</strong>。</li>\n</ul>\n<h3 id=\"AC代码-7\"><a href=\"#AC代码-7\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>\n</code></pre>\n<h2 id=\"682-棒球比赛\"><a href=\"#682-棒球比赛\" class=\"headerlink\" title=\"682.棒球比赛\"></a>682.棒球比赛</h2><blockquote>\n<p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p>\n</blockquote>\n<blockquote>\n<p>比赛开始时，记录是空白的。你会得到一个记录操作的<strong>字符串列表</strong> ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：</p>\n<ul>\n<li>整数 x - 表示本回合新获得分数 x</li>\n<li>“+” - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。</li>\n<li>“D” - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。</li>\n<li>“C” - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>请你返回记录中所有得分的总和。</li>\n</ul>\n</blockquote>\n<h3 id=\"解题思路-8\"><a href=\"#解题思路-8\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>用int动态数组ans记录得分，但是不用i做索引来查询，而是用begin、end、size、back等方法来防止发生越界访问。</p>\n<ul>\n<li>注意<code>string</code>类型为字符串，用双引号””括起来，<code>char</code>类型为字符，用单引号’’。</li>\n</ul>\n<pre><code>前两次得分之和：size-1 +size-2\n前一次得分：back\n最近一次得分移除-&gt;出栈-&gt;pop_back\n加入得分：压栈-&gt;push_back\n字符串转整型：stoi\n计算动态数组的和：accumulate\n</code></pre>\n<p>另外，我一开始想用<code>unordered_map</code>，做题做迷了。后来发现动态数组完全可以解决：C++ 标准库中的 vector 支持动态调整大小，可以方便地模拟栈的行为。而unordered_map 是用来存储键值对（key-value pairs）的哈希表。<br>本问题中不需要映射关系，所以并不需要用到 unordered_map。<br>还有，<strong>stack<int><strong>的<code>.push()</code>和<code>.pop()</code>也可，但是</strong>vector</strong>的<code>.push_back()</code>和<code>.pop_back()</code>也同样可以。那就选更常用的vector，何乐而不为呢？</p>\n<h3 id=\"AC代码-8\"><a href=\"#AC代码-8\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p>用时击败7%，悲。之后滚回来优化算法。</p>\n<pre><code>class Solution &#123;\npublic:\n    int calPoints(vector&lt;string&gt;&amp; operations) &#123;\n        vector&lt;int&gt;ans;\n        for(string ch:operations)&#123;\n            if(ch==&quot;+&quot;)&#123;\n                ans.push_back(ans[ans.size()-1]+ans[ans.size()-2]);\n            &#125;\n            else if(ch==&quot;D&quot;)&#123;\n                ans.push_back(ans.back()*2);\n            &#125;\n            else if(ch==&quot;C&quot;)&#123;\n                ans.pop_back();\n            &#125;\n            else&#123;\n                ans.push_back(stoi(ch));\n            &#125;\n        &#125;\n        return accumulate(ans.begin(),ans.end(),0);\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"26-删除有序数组中的重复项\"><a href=\"#26-删除有序数组中的重复项\" class=\"headerlink\" title=\"26.删除有序数组中的重复项\"></a>26.删除有序数组中的重复项</h2><blockquote>\n<p>给你一个非严格递增排列的数组nums,请你原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回nums中唯一元素的个数。</p>\n</blockquote>\n<blockquote>\n<p>考虑nums的唯一元素的数量为k，你需要做以下事情确保你的题解可以被通过：</p>\n<ul>\n<li>更改数组nums，使nums的前k个元素包含唯一元素，并按照它们最初在nums中出现的顺序排列。nums的其余元素与nums的大小不重要。</li>\n<li>返回 k 。</li>\n</ul>\n</blockquote>\n<h3 id=\"解题思路-9\"><a href=\"#解题思路-9\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>int 最终数组长度=1;\n遍历nums：\n    如果第i个元素不等于第i-1个元素：\n        nums[最终数组长度]=nums[i]；\n        最终数组长度++；\n返回最终数组长度；\n</code></pre>\n<h3 id=\"AC代码-9\"><a href=\"#AC代码-9\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p>妈呀这题一提交发现每ms都有解法…密密麻麻(ΩДΩ)</p>\n<pre><code>class Solution &#123;\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;\n        int ans=1;\n        for(int i=1;i&lt;nums.size();i++)&#123;\n            if(nums[i]!=nums[i-1])&#123;\n                nums[ans]=nums[i];\n                ans++;\n            &#125;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<hr>\n<h2 id=\"35-搜索插入位置\"><a href=\"#35-搜索插入位置\" class=\"headerlink\" title=\"35.搜索插入位置\"></a>35.搜索插入位置</h2><blockquote>\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。<br><strong>请必须使用时间复杂度为<code>O(logn)</code>的算法。</strong></p>\n</blockquote>\n<h3 id=\"解题思路-10\"><a href=\"#解题思路-10\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>我一开始用的暴力穷举，如下。</p>\n<pre><code>class Solution &#123;\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;\n        while(nums.size()!=1)&#123;\n            if(target&lt;nums[0])&#123;\n                return 0;\n            &#125;\n            for(int i=0;i&lt;nums.size()-1;i++)&#123;\n                if(nums[i]==target)&#123;\n                    return i;\n                &#125;\n                else if(nums[i]&lt;target &amp;&amp; nums[i+1]&gt;=target)&#123;\n                    return i+1;\n                &#125;\n            &#125;\n            return nums.size();\n        &#125;\n        return (target&lt;=nums[0])? 0:1;\n    &#125;\n&#125;;\n</code></pre>\n<p>然后提交之后意识到不符合题意，于是再来换个思路：<strong>二分查找</strong><br>我前几天刚记的二分查找笔记 今天竟然没意识到这道题有多直白地明示我要用!!!∑(ﾟДﾟノ)ノ</p>\n<blockquote>\n<p><strong>二分查找</strong>：在有序集合中搜索特定值。</p>\n</blockquote>\n<p><strong>使用术语</strong>：</p>\n<ul>\n<li>目标 <code>target</code></li>\n<li>索引 <code>index</code></li>\n<li>左、右指示符 <code>left</code>、<code>right</code></li>\n<li>中间指示符 <code>mid</code></li>\n</ul>\n<p><strong>计算 <code>mid</code> 位置</strong>：<br>如果 <code>nums[mid] == target</code>，直接返回索引。<br>如果 <code>nums[mid] &lt; target</code>，说明 target 应该在右半部分，所以left向右移动（left &#x3D; mid + 1）。<br>如果 <code>nums[mid] &gt; target</code>，说明 target 应该在左半部分，所以right向左移动（ right &#x3D; mid - 1）。</p>\n<p>循环结束后，left 就是 target 应该插入的位置。</p>\n<h3 id=\"AC代码-10\"><a href=\"#AC代码-10\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p>二分查找最基础的方法。</p>\n<pre><code>class Solution &#123;\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;\n        int left,right;\n        left=0;\n        right=nums.size()-1;\n        while(left&lt;=right)&#123;\n            int mid=left+(right-left)/2;\n            if(nums[mid]==target)&#123;\n                return mid;\n            &#125;\n            else if(nums[mid]&lt;target)&#123;\n                left=mid+1;\n            &#125;\n            else&#123;\n                right=mid-1;\n            &#125;\n        &#125;\n        return left;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"35-搜索插入位置-1\"><a href=\"#35-搜索插入位置-1\" class=\"headerlink\" title=\"35.搜索插入位置\"></a>35.搜索插入位置</h2><blockquote>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n</blockquote>\n<h3 id=\"解题思路-11\"><a href=\"#解题思路-11\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>试图暴力然后失败。然后查看题解：竟然是<strong>动态规划</strong>~</p>\n<p>重点理解部分：</p>\n<ul>\n<li><strong>逆向思维</strong>：如果要到第<code>n</code>个台阶，就必须从第<code>n-1</code>阶走1步，或者从第<code>n-2</code>阶走2步。</li>\n<li>dp[n]&#x3D;dp[n-1]+dp[n-2]</li>\n</ul>\n<p><em><strong>为什么这样递推？</strong></em><br>动态规划的核心是<strong>拆分子问题,然后找到递推关系</strong>。本质根据题目限制条件，建立递推关系，然后用代码实现。<br>👉 因为你每次只能走 1 级或 2 级，所以你到 n 级的方式只能来自 n-1 和 n-2，而不能来自 n-3、n-4 等。</p>\n<pre><code>//先处理边界情况\n如果n&lt;=2：返回n；\n//动规\n定义a=1,b=2；（对应能上的楼梯阶数）和当前阶梯的方案数量temp;\n遍历n（从3开始）：\n    temp=a+b； //dp[i]=dp[i-2]+dp[i-1]\n    a=b;      //a=dp[i-1]\n    b=temp;   //b=dp[i];\n返回 b;\n</code></pre>\n",
            "tags": [
                "C++",
                "算法",
                "记录"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/02/20/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%8D%8A%E5%B9%B4%E7%9A%84%E7%97%9B/",
            "url": "https://232akira.github.io/2025/02/20/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%8D%8A%E5%B9%B4%E7%9A%84%E7%97%9B/",
            "title": "博客搭建小半年的痛",
            "date_published": "2025-02-20T02:26:39.000Z",
            "content_html": "<p><strong>主打一个备忘</strong><br>断断续续从24年中搞到现在25年初，最磨蹭的一集。</p>\n<blockquote>\n<p><strong>最新问题</strong></p>\n<blockquote>\n<p>提交评论 ×<br>替换部分主题图片 ×<br>文章总访问量显示 ×</p>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"首先是参考链接\"><a href=\"#首先是参考链接\" class=\"headerlink\" title=\"首先是参考链接\"></a>首先是参考链接</h2><p>非常感谢！</p>\n<h3 id=\"ShokaX\"><a href=\"#ShokaX\" class=\"headerlink\" title=\"ShokaX\"></a>ShokaX</h3><p>github：<a href=\"https://github.com/theme-shoka-x/hexo-theme-shokaX\">https://github.com/theme-shoka-x/hexo-theme-shokaX</a><br>官方文档：<a href=\"https://hexo.docs.shokax.top/\">https://hexo.docs.shokax.top/</a><br>主题指南：<a href=\"https://docs.kaitaku.xyz/\">https://docs.kaitaku.xyz/</a><br>社区资源：<a href=\"https://github.com/theme-shoka-x/awesome-shokaX\">https://github.com/theme-shoka-x/awesome-shokaX</a><br>shoka：<a href=\"https://github.com/amehime/hexo-theme-shoka\">https://github.com/amehime/hexo-theme-shoka</a></p>\n<h3 id=\"其他相关网站-教程\"><a href=\"#其他相关网站-教程\" class=\"headerlink\" title=\"其他相关网站&amp;教程\"></a>其他相关网站&amp;教程</h3><p>Linn’s Shoka：<a href=\"https://linn-ylz.com/Hexo/blog-content-test/\">https://linn-ylz.com/Hexo/blog-content-test/</a><br>waline快速上手：<a href=\"https://waline.js.org/guide/get-started/\">https://waline.js.org/guide/get-started/</a><br>Vercel服务端部署：<a href=\"https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example&teamSlug=232akiras-projects\">https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwalinejs%2Fwaline%2Ftree%2Fmain%2Fexample&amp;teamSlug=232akiras-projects</a><br>leancloud：<a href=\"https://console.leancloud.app/apps\">https://console.leancloud.app/apps</a><br>Gimhoy图床：<a href=\"https://pic.gimhoy.com/\">https://pic.gimhoy.com/</a><br>Google字体：<a href=\"https://fonts.google.com/\">https://fonts.google.com/</a><br>百度统计：<a href=\"https://tongji.baidu.com/main/setting/10000672027/home/site/index\">https://tongji.baidu.com/main/setting/10000672027/home/site/index</a><br>markdown排版：<a href=\"https://markdown.com.cn/editor/\">https://markdown.com.cn/editor/</a></p>\n<h2 id=\"搭建思路\"><a href=\"#搭建思路\" class=\"headerlink\" title=\"搭建思路\"></a>搭建思路</h2><p>这方面毫无实战知识，不停地踩坑踩坑…</p>\n<h3 id=\"Hexo初始化博客\"><a href=\"#Hexo初始化博客\" class=\"headerlink\" title=\"Hexo初始化博客\"></a><a href=\"https://hexo.io/zh-cn/\" title=\"点此跳转Hexo官网\">Hexo</a>初始化博客</h3><p>基于Node.js的博客框架。本博客采用Hexo+Github搭建。<br><strong>常用命令</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">功能</th>\n<th align=\"center\">命令</th>\n<th align=\"center\">简写</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">清理缓存</td>\n<td align=\"center\">hexo clean</td>\n<td align=\"center\"><code>hexo cl</code></td>\n</tr>\n<tr>\n<td align=\"center\">部署站点</td>\n<td align=\"center\">hexo deploy</td>\n<td align=\"center\"><code>hexo d</code></td>\n</tr>\n<tr>\n<td align=\"center\">生成博客</td>\n<td align=\"center\">hexo generate</td>\n<td align=\"center\"><code>hexo g</code></td>\n</tr>\n<tr>\n<td align=\"center\">启动本地服务</td>\n<td align=\"center\">hexo server</td>\n<td align=\"center\"><code>hexo s</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"Shoka主题配置\"><a href=\"#Shoka主题配置\" class=\"headerlink\" title=\"Shoka主题配置\"></a>Shoka主题配置</h3><p>一开始胡乱配置，后来更新的时候爆出来好多问题。于是这两天从头重做</p>\n<h4 id=\"步骤如下：\"><a href=\"#步骤如下：\" class=\"headerlink\" title=\"步骤如下：\"></a>步骤如下：</h4><pre><code>前置hexo init、Node.js等\npnpm安装shokax\n/_config.landscape.yml重命名为_config.shokax.yml\n</code></pre>\n<h4 id=\"config-yml中的配置项：\"><a href=\"#config-yml中的配置项：\" class=\"headerlink\" title=\"&#x2F;_config.yml中的配置项：\"></a>&#x2F;_config.yml中的配置项：</h4><pre><code>markdown配置\n停用默认代码高亮\n文件压缩\nfeed生成\n站内搜索\n</code></pre>\n<h4 id=\"config-shokax-yml中的配置项：\"><a href=\"#config-shokax-yml中的配置项：\" class=\"headerlink\" title=\"&#x2F;_config.shokax.yml中的配置项：\"></a>&#x2F;_config.shokax.yml中的配置项：</h4><pre><code>静态资源存放目录\nShokaX功能模块\n主页头图\nIconfont图标\n导航栏\n侧边栏\n大标题\n社交链接\n字数和阅读时间统计\n预加载和预解析地址\nSEO优化和访客优化\n夜间模式\n自动定位\n标题自定义\n图片自定义\n首页精选\n分类翻转块\n实验性特性\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"/images/github_blog.jpg\" alt=\"2025&#x2F;3&#x2F;17\" title=\"Insights\"></p>\n<p>突然发现放简历上的的网站二维码扫出来404😇可能当初生成二维码时没事，链接是某个具体的文章路径，后来Hexo更新或者改了文章的permalink，导致原来的链接失效了。</p>\n<p>回到我的主页😼👇️</p>\n<ul>\n<li>site: K’s BLOG<br>url: <a href=\"https://232akira.github.io/\">https://232akira.github.io/</a><br>color: “#adff2f”</li>\n</ul>\n<p>（？渲染器没安装好…</p>\n",
            "tags": [
                "记录"
            ]
        },
        {
            "id": "https://232akira.github.io/2024/11/23/%E5%AD%98%E5%AD%98markdown%E7%9B%B8%E5%85%B3/",
            "url": "https://232akira.github.io/2024/11/23/%E5%AD%98%E5%AD%98markdown%E7%9B%B8%E5%85%B3/",
            "title": "存存markdown相关",
            "date_published": "2024-11-23T10:40:43.000Z",
            "content_html": "<h2 id=\"这是232akira的第一篇博客的二级标题两个井号加空格\"><a href=\"#这是232akira的第一篇博客的二级标题两个井号加空格\" class=\"headerlink\" title=\"这是232akira的第一篇博客的二级标题两个井号加空格\"></a>这是232akira的第一篇博客的二级标题两个井号加空格</h2><h3 id=\"这是232akira的第一篇博客的三级标题三个井号加空格\"><a href=\"#这是232akira的第一篇博客的三级标题三个井号加空格\" class=\"headerlink\" title=\"这是232akira的第一篇博客的三级标题三个井号加空格\"></a>这是232akira的第一篇博客的三级标题三个井号加空格</h3><p>这是232akira的第一篇博客的第一段直接回车</p>\n<p>这是232akira的第一篇博客的第二段</p>\n<p>这是换行尝试两个空格+回车<br><br><br>换行！</p>\n<p>这是字体加粗尝试加粗 <strong>前后各加2个星星号</strong></p>\n<p>这是字体斜体尝试斜体 <em>前后各加1个星星号</em></p>\n<p>这是字体同时加粗斜体尝试 <em><strong>前后各加3个星星号</strong></em></p>\n<p>这是创建块引用</p>\n<blockquote>\n<p>kuaiyinyongkuaiyinyongkkk<br>这是多个段落的块引用<br>kuaiyinyongkkk</p>\n<p>kkk</p>\n</blockquote>\n<p>这是嵌套块引用</p>\n<blockquote>\n<p>kuaiyinyongkkk</p>\n<blockquote>\n<p>qiantaoaaa</p>\n<ul>\n<li>用短横杠（注意两边空格）出来是圆点</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>这是有序列表<br>1.我是1第一项必须数字一加英文句号后面数字无所谓<br>2.我是2<br>    1.我是1<br>    2.我是2<br>3.我是3</p>\n<p>这是无序列表点乘加短横杠都可以变成圆点<br>-111<br>-222<br>    -1111嵌套前面四个空格<br>    -代码在列表里缩进8个空格或者2个tab<br>            print(“hello world~”)<br>-333</p>\n<p>这是代码语法<br>把代码包裹在反引号<code>中 比如我这里是 </code>代码代码代码<code>创建代码块就还是缩进4个空格or1个tab</code>        我是代码块啊啊啊&#96;</p>\n<h2 id=\"这是分隔线单独一行三星或多星-破折号-下划线\"><a href=\"#这是分隔线单独一行三星或多星-破折号-下划线\" class=\"headerlink\" title=\"这是分隔线单独一行三星或多星&#x2F;破折号&#x2F;下划线***\"></a>这是分隔线单独一行三星或多星&#x2F;破折号&#x2F;下划线<br>***</h2><hr>\n<p>出来的效果一样的</p>\n<p>这是链接链接的文本放中括号地址放后面圆括号<a href=\"https://www.xuexi.cn/\" title=\"我是title\">快来学习</a><br>或者直接尖括号链接跳转<a href=\"https://www.xuexi.cn/\">https://www.xuexi.cn/</a></p>\n<p>强调链接就在尖括号前后增加星号，表示为代码就加反引号<br>I love <strong><a href=\"https://www.xuexi.cn/\" title=\"我是title\">学习</a></strong></p>\n<p>这是引用型链接，两个方括号前一个写文本后一个指向其他位置的链接<br>[跳转跳转啊啊啊] <a href=\"https://www.xuexi.cn/\">1</a></p>\n<p>这是添加图像使用感叹号+方括号+圆括号。方括号里写替代文本，圆括号里写图片链接，也可以后接图片标题文本。跳转链接写在最外面并再套一层方括号。<br><img loading=\"lazy\" data-src=\"/images/kabi.jpg\" alt=\"这是图片\" title=\"我是title\"></p>\n",
            "tags": [
                "记录",
                "Markdown"
            ]
        }
    ]
}