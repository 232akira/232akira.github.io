{
    "version": "https://jsonfeed.org/version/1",
    "title": "Per aspera ad astra",
    "description": "欢迎交流学习!",
    "home_page_url": "https://232akira.github.io",
    "items": [
        {
            "id": "https://232akira.github.io/2025/02/20/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E5%A4%87%E5%BF%98%E5%BD%95/",
            "url": "https://232akira.github.io/2025/02/20/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E5%A4%87%E5%BF%98%E5%BD%95/",
            "title": "力扣刷题备忘录",
            "date_published": "2025-02-20T11:42:10.000Z",
            "content_html": "<h1 id=\"简单题\"><a href=\"#简单题\" class=\"headerlink\" title=\"简单题\"></a>简单题</h1><h2 id=\"283-移动零\"><a href=\"#283-移动零\" class=\"headerlink\" title=\"283.移动零\"></a>283.移动零</h2><blockquote>\n<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<strong>请注意</strong>，必须在不复制数组的情况下原地对数组进行操作。</p>\n</blockquote>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>一开始看到这道题就觉得不就是交换嘛。但是发现题目中的：“保持非零元素的相对顺序”我就懵了。于是开始暴力穷举循环一层套一层…后来被拉回正道。<br>核心思想不变，仍是“交换”。<br>但是交换的条件是<strong>将非零元素全部移到数组头部</strong>，虽然直观看来与题目所引导的“0全部移到末尾”完全反着来，但是我发现这样做比把0移到末尾再对非零元素进行某种交换排序要来的简单得多。题目作者居心叵测啊（不是</p>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    void swap(vector&lt;int&gt;&amp; nums,int i,int j)&#123;\n        int t;\n        t=nums[i];\n        nums[i]=nums[j];\n        nums[j]=t;\n        \n    &#125;\n    void moveZeroes(vector&lt;int&gt;&amp; nums) &#123;\n        int i=0; \n        for(int j=0;j&lt;nums.size();j++)&#123;\n            if(nums[j]!=0)&#123;\n                swap(nums,i,j);\n                i++;\n            &#125;\n        &#125;\n\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"66-加一\"><a href=\"#66-加一\" class=\"headerlink\" title=\"66.加一\"></a>66.加一</h2><blockquote>\n<p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。<br>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。<br>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>\n</blockquote>\n<h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>判断数组末尾是否有9：\n    无9：末尾数字+1;\n    有9：\n        是否全为9：\n            是全9：\n                构造长度=size+1的数组，首位=1，其余全置0;\n            非全9：\n                找到倒着数第一个不是9的元素,\n                该元素加1,\n                末尾所有的9置0;\n</code></pre>\n<h3 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    vector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) &#123;\n        int len=digits.size();\n        if(digits[len-1]!=9)&#123;\n            digits[len-1]+=1;\n        &#125;\n        else&#123;\n            int cnt=0;//记录9出现的次数，第一个非9元素的下标即为len-cnt-1\n            for(int i=len-1;i&gt;=0;i--)&#123;\n                if(digits[i]==9)&#123;\n                    cnt++;\n                &#125;\n                else&#123;\n                    break;\n                &#125;\n            &#125;\n            if(cnt==len)&#123;\n                digits.insert(digits.begin(),1);\n                for(int i=1;i&lt;len+1;i++)&#123;\n                    digits[i]=0;\n                &#125;\n            &#125;\n            else&#123;\n                int index=len-cnt-1;\n                digits[index]+=1;\n                for(int i=index+1;i&lt;len;i++)&#123;\n                    digits[i]=0;\n                &#125;\n            &#125;\n        &#125;\n        return digits;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"896-单调数列\"><a href=\"#896-单调数列\" class=\"headerlink\" title=\"896.单调数列\"></a>896.单调数列</h2><blockquote>\n<p>如果数组是单调递增或单调递减的，那么它是<strong>单调</strong>的。<br>如果对于所有 i &lt;&#x3D; j，nums[i] &lt;&#x3D; nums[j]，那么数组 nums 是单调递增的。 如果对于所有 i &lt;&#x3D; j，nums[i] &gt;&#x3D; nums[j]，那么数组 nums 是单调递减的。<br>当给定的数组 nums 是单调数组时返回 true，否则返回 false。</p>\n</blockquote>\n<h3 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>bool 递增变量=真，递减变量=真；\n遍历数组：\n    如果该元素+1 大于 该元素：\n        标记递减变量=假；\n    如果该元素+1 小于 该元素：\n        标记递增变量=假；\n如果递增or递减=真，返回真；\n</code></pre>\n<h3 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    bool isMonotonic(vector&lt;int&gt;&amp; nums) &#123;\n        bool increase=true,decrease=true;\n        for(int i=0;i&lt;nums.size()-1;i++)&#123;\n            if(nums[i+1] &gt; nums[i])&#123;\n                decrease=false;\n            &#125;\n            if(nums[i+1] &lt; nums[i])&#123;\n                increase=false;\n            &#125;\n        &#125;\n        return decrease || increase;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"896-单调数列-1\"><a href=\"#896-单调数列-1\" class=\"headerlink\" title=\"896.单调数列\"></a>896.单调数列</h2><blockquote>\n<p><strong>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</strong><br>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</li>\n<li>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：<br>①I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>②X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>③C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>给定一个罗马数字，将其转换成整数。</strong></p>\n</blockquote>\n<h3 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这题一开始我无从下手，直接跑去翻题解了。</p>\n<p><strong>C++ <a href=\"https://www.w3cschool.cn/cpp/cpp-fu8l2ppt.html\">map</a>用法</strong><br>想起来python的字典。同样cpp stl中的map提供的是一种键值对（key-value）容器，其中的数据成对出现。</p>\n<ul>\n<li>初始化：<code>map类型 &lt;数据类型1，数据类型2&gt; 容器名</code></li>\n</ul>\n<p>对于map类型：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">键值对容器</th>\n<th align=\"center\">实现方式</th>\n<th align=\"center\">时间复杂度</th>\n<th align=\"center\">排序</th>\n<th align=\"center\">使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>unordered_map</code></td>\n<td align=\"center\">哈希表</td>\n<td align=\"center\">平均 O(1)</td>\n<td align=\"center\">无序，元素不按照键的顺序存储。</td>\n<td align=\"center\">适用于不关心元素顺序、要求快速查找的情况。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>map</code></td>\n<td align=\"center\">红黑树</td>\n<td align=\"center\">O(log n)</td>\n<td align=\"center\">有序，元素根据键的大小自动排序。</td>\n<td align=\"center\">适用于需要 有序 键值对存储的情况，比如按照键的大小遍历容器。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>unordered_multimap</code></td>\n<td align=\"center\">哈希表（允许重复的键）</td>\n<td align=\"center\">平均 O(1)</td>\n<td align=\"center\">无序，和 unordered_map 相同。</td>\n<td align=\"center\">适用于有重复键且不关心顺序的情况。</td>\n</tr>\n</tbody></table>\n<p><strong>对于本题</strong><br>引用评论区<a href=\"https://leetcode.cn/u/hust_wei/\">佬</a>的解释：当前位置的元素比下个位置的元素小，就减去当前值，否则加上当前值。</p>\n<pre><code>定义键值对容器 &lt;字符，整型&gt; \n    分别对应罗马数字的字符和数值(注意字符变量加单引号);\n\nint 结果变量；\nint 罗马数字长度；\n遍历罗马数字：\n    如果元素 当前位置&lt;下一个位置：（注意使用值时加方括号[]）\n        结果变量-=值变量；\n    否则：\n        结果变量+=值变量；\n返回结果；\n</code></pre>\n<h3 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    unordered_map&lt;char,int&gt;mymap=&#123;\n        &#123;&#39;I&#39;,1&#125;,\n        &#123;&#39;V&#39;,5&#125;,\n        &#123;&#39;X&#39;,10&#125;,\n        &#123;&#39;L&#39;,50&#125;,\n        &#123;&#39;C&#39;,100&#125;,\n        &#123;&#39;D&#39;,500&#125;,\n        &#123;&#39;M&#39;,1000&#125;,\n    &#125;;\n    int romanToInt(string s) &#123;\n        int ans=0;\n        int len=s.length();\n        for(int i=0;i&lt;len;i++)&#123;\n            if(mymap[s[i]]&lt;mymap[s[i+1]])&#123;\n                ans-=mymap[s[i]];\n            &#125;\n            else&#123;\n                ans+=mymap[s[i]];\n            &#125;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"58-最后一个单词的长度\"><a href=\"#58-最后一个单词的长度\" class=\"headerlink\" title=\"58.最后一个单词的长度\"></a>58.最后一个单词的长度</h2><blockquote>\n<p>给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。<br><strong>单词</strong>是指仅由字母组成、不包含任何空格字符的最大子字符串。</p>\n</blockquote>\n<h3 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>我的思路是<strong>从后向前</strong>遍历字符串时：如果它的后一个是空格，前一个不是空格，意味着句尾有空格，该下标是倒着数第一个不为空格的字母。如果它的前一个是空格，后一个不是空格，代表这是词的开头，记录下标直接退出循环。最后长度就是二者相减。<br>但是这样写大多数样例不通过（悲</p>\n<p>不对那就改呗：直接从字符串的尾部开始遍历，<strong>跳过所有尾部空格</strong>，直到遇到<strong>第一个非空格字符</strong>，并计算其长度。能够更好的处理边界情况。</p>\n<pre><code>int 长度=字符串长度;\nint i=长度-1;\nint 结果长度=0\n当i大于等于0并且s的第i个字符为空格时：\n    i--；（倒着循环遍历）\n*本题设定s不为空，若无此条件需在此判断：当i&lt;0时直接返回（s为空）\n当i大于等于0并且s的第i个字符不为空格时：\n    结果长度++；\n    i--；\n返回结果长度;\n</code></pre>\n<h3 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    int lengthOfLastWord(string s) &#123;\n        int len=s.length();\n        int ans=0;\n        int i=len-1;\n        while(i&gt;=0 &amp;&amp; s[i]==&#39; &#39;)&#123;\n            i--;\n        &#125;\n        while(i&gt;=0 &amp;&amp; s[i]!=&#39; &#39;)&#123;\n            ans++;\n            i--;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://232akira.github.io/2025/02/20/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%8D%8A%E5%B9%B4%E7%9A%84%E7%97%9B/",
            "url": "https://232akira.github.io/2025/02/20/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%8D%8A%E5%B9%B4%E7%9A%84%E7%97%9B/",
            "title": "博客搭建小半年的痛",
            "date_published": "2025-02-20T02:26:39.000Z",
            "content_html": "<p><strong>主打一个备忘</strong><br>断断续续从24年中搞到现在25年初，最磨蹭的一集。</p>\n<blockquote>\n<p><strong>最新问题</strong></p>\n<blockquote>\n<p>提交评论 ×<br>替换部分主题图片 ×<br>文章总访问量显示 ×</p>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"首先是参考链接\"><a href=\"#首先是参考链接\" class=\"headerlink\" title=\"首先是参考链接\"></a>首先是参考链接</h2><p>非常感谢！</p>\n<h3 id=\"ShokaX\"><a href=\"#ShokaX\" class=\"headerlink\" title=\"ShokaX\"></a>ShokaX</h3><p>github：<a href=\"https://github.com/theme-shoka-x/hexo-theme-shokaX\">https://github.com/theme-shoka-x/hexo-theme-shokaX</a><br>官方文档：<a href=\"https://hexo.docs.shokax.top/\">https://hexo.docs.shokax.top/</a><br>主题指南：<a href=\"https://docs.kaitaku.xyz/\">https://docs.kaitaku.xyz/</a><br>社区资源：<a href=\"https://github.com/theme-shoka-x/awesome-shokaX\">https://github.com/theme-shoka-x/awesome-shokaX</a><br>shoka：<a href=\"https://github.com/amehime/hexo-theme-shoka\">https://github.com/amehime/hexo-theme-shoka</a></p>\n<h3 id=\"其他相关网站\"><a href=\"#其他相关网站\" class=\"headerlink\" title=\"其他相关网站\"></a>其他相关网站</h3><p>waline快速上手：<a href=\"https://waline.js.org/guide/get-started/\">https://waline.js.org/guide/get-started/</a><br>Vercel服务端部署：<a href=\"https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example&teamSlug=232akiras-projects\">https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwalinejs%2Fwaline%2Ftree%2Fmain%2Fexample&amp;teamSlug=232akiras-projects</a><br>leancloud：<a href=\"https://console.leancloud.app/apps\">https://console.leancloud.app/apps</a><br>Gimhoy图床：<a href=\"https://pic.gimhoy.com/\">https://pic.gimhoy.com/</a><br>Google字体：<a href=\"https://fonts.google.com/\">https://fonts.google.com/</a><br>百度统计：<a href=\"https://tongji.baidu.com/main/setting/10000672027/home/site/index\">https://tongji.baidu.com/main/setting/10000672027/home/site/index</a><br>markdown排版：<a href=\"https://markdown.com.cn/editor/\">https://markdown.com.cn/editor/</a></p>\n<h2 id=\"搭建思路\"><a href=\"#搭建思路\" class=\"headerlink\" title=\"搭建思路\"></a>搭建思路</h2><p>这方面毫无实战知识，不停地踩坑踩坑…</p>\n<h3 id=\"Hexo初始化博客\"><a href=\"#Hexo初始化博客\" class=\"headerlink\" title=\"Hexo初始化博客\"></a><a href=\"https://hexo.io/zh-cn/\" title=\"点此跳转Hexo官网\">Hexo</a>初始化博客</h3><p>基于Node.js的博客框架。本博客采用Hexo+Github搭建。<br><strong>常用命令</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">功能</th>\n<th align=\"center\">命令</th>\n<th align=\"center\">简写</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">清理缓存</td>\n<td align=\"center\">hexo clean</td>\n<td align=\"center\"><code>hexo cl</code></td>\n</tr>\n<tr>\n<td align=\"center\">部署站点</td>\n<td align=\"center\">hexo deploy</td>\n<td align=\"center\"><code>hexo d</code></td>\n</tr>\n<tr>\n<td align=\"center\">生成博客</td>\n<td align=\"center\">hexo generate</td>\n<td align=\"center\"><code>hexo g</code></td>\n</tr>\n<tr>\n<td align=\"center\">启动本地服务</td>\n<td align=\"center\">hexo server</td>\n<td align=\"center\"><code>hexo s</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"Shoka主题配置\"><a href=\"#Shoka主题配置\" class=\"headerlink\" title=\"Shoka主题配置\"></a>Shoka主题配置</h3><p>一开始胡乱配置，后来更新的时候爆出来好多问题。于是这两天从头重做</p>\n<h4 id=\"步骤如下：\"><a href=\"#步骤如下：\" class=\"headerlink\" title=\"步骤如下：\"></a>步骤如下：</h4><pre><code>前置hexo init、Node.js等\npnpm安装shokax\n/_config.landscape.yml重命名为_config.shokax.yml\n</code></pre>\n<h4 id=\"config-yml中的配置项：\"><a href=\"#config-yml中的配置项：\" class=\"headerlink\" title=\"&#x2F;_config.yml中的配置项：\"></a>&#x2F;_config.yml中的配置项：</h4><pre><code>markdown配置\n停用默认代码高亮\n文件压缩\nfeed生成\n站内搜索\n</code></pre>\n<h4 id=\"config-shokax-yml中的配置项：\"><a href=\"#config-shokax-yml中的配置项：\" class=\"headerlink\" title=\"&#x2F;_config.shokax.yml中的配置项：\"></a>&#x2F;_config.shokax.yml中的配置项：</h4><pre><code>静态资源存放目录\nShokaX功能模块\n主页头图\nIconfont图标\n导航栏\n侧边栏\n大标题\n社交链接\n字数和阅读时间统计\n预加载和预解析地址\nSEO优化和访客优化\n夜间模式\n自动定位\n标题自定义\n图片自定义\n首页精选\n分类翻转块\n实验性特性\n</code></pre>\n<h4 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h4><p><strong>1、图片素材替换</strong><br>文件目录<code>/source/_data/assets</code><br><img loading=\"lazy\" data-src=\"/images/blog01_1.png\" title=\"依旧是官方教程~本文仅做总结，非原创\"></p>\n",
            "tags": []
        },
        {
            "id": "https://232akira.github.io/2024/11/23/%E5%AD%98%E5%AD%98markdown%E7%9B%B8%E5%85%B3/",
            "url": "https://232akira.github.io/2024/11/23/%E5%AD%98%E5%AD%98markdown%E7%9B%B8%E5%85%B3/",
            "title": "存存markdown相关",
            "date_published": "2024-11-23T10:40:43.000Z",
            "content_html": "<h2 id=\"这是232akira的第一篇博客的二级标题两个井号加空格\"><a href=\"#这是232akira的第一篇博客的二级标题两个井号加空格\" class=\"headerlink\" title=\"这是232akira的第一篇博客的二级标题两个井号加空格\"></a>这是232akira的第一篇博客的二级标题两个井号加空格</h2><h3 id=\"这是232akira的第一篇博客的三级标题三个井号加空格\"><a href=\"#这是232akira的第一篇博客的三级标题三个井号加空格\" class=\"headerlink\" title=\"这是232akira的第一篇博客的三级标题三个井号加空格\"></a>这是232akira的第一篇博客的三级标题三个井号加空格</h3><p>这是232akira的第一篇博客的第一段直接回车</p>\n<p>这是232akira的第一篇博客的第二段</p>\n<p>这是换行尝试两个空格+回车<br><br><br>换行！</p>\n<p>这是字体加粗尝试加粗 <strong>前后各加2个星星号</strong></p>\n<p>这是字体斜体尝试斜体 <em>前后各加1个星星号</em></p>\n<p>这是字体同时加粗斜体尝试 <em><strong>前后各加3个星星号</strong></em></p>\n<p>这是创建块引用</p>\n<blockquote>\n<p>kuaiyinyongkuaiyinyongkkk<br>这是多个段落的块引用<br>kuaiyinyongkkk</p>\n<p>kkk</p>\n</blockquote>\n<p>这是嵌套块引用</p>\n<blockquote>\n<p>kuaiyinyongkkk</p>\n<blockquote>\n<p>qiantaoaaa</p>\n<ul>\n<li>用短横杠（注意两边空格）出来是圆点</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>这是有序列表<br>1.我是1第一项必须数字一加英文句号后面数字无所谓<br>2.我是2<br>    1.我是1<br>    2.我是2<br>3.我是3</p>\n<p>这是无序列表点乘加短横杠都可以变成圆点<br>-111<br>-222<br>    -1111嵌套前面四个空格<br>    -代码在列表里缩进8个空格或者2个tab<br>            print(“hello world~”)<br>-333</p>\n<p>这是代码语法<br>把代码包裹在反引号<code>中 比如我这里是 </code>代码代码代码<code>创建代码块就还是缩进4个空格or1个tab</code>        我是代码块啊啊啊&#96;</p>\n<h2 id=\"这是分隔线单独一行三星或多星-破折号-下划线\"><a href=\"#这是分隔线单独一行三星或多星-破折号-下划线\" class=\"headerlink\" title=\"这是分隔线单独一行三星或多星&#x2F;破折号&#x2F;下划线***\"></a>这是分隔线单独一行三星或多星&#x2F;破折号&#x2F;下划线<br>***</h2><hr>\n<p>出来的效果一样的</p>\n<p>这是链接链接的文本放中括号地址放后面圆括号<a href=\"https://www.xuexi.cn/\" title=\"我是title\">快来学习</a><br>或者直接尖括号链接跳转<a href=\"https://www.xuexi.cn/\">https://www.xuexi.cn/</a></p>\n<p>强调链接就在尖括号前后增加星号，表示为代码就加反引号<br>I love <strong><a href=\"https://www.xuexi.cn/\" title=\"我是title\">学习</a></strong></p>\n<p>这是引用型链接，两个方括号前一个写文本后一个指向其他位置的链接<br>[跳转跳转啊啊啊] <a href=\"https://www.xuexi.cn/\">1</a></p>\n<p>这是添加图像使用感叹号+方括号+圆括号。方括号里写替代文本，圆括号里写图片链接，也可以后接图片标题文本。跳转链接写在最外面并再套一层方括号。<br><img loading=\"lazy\" data-src=\"/images/kabi.jpg\" alt=\"这是图片\" title=\"我是title\"></p>\n",
            "tags": []
        }
    ]
}