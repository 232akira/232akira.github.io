<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://232akira.github.io</id>
    <title>Per aspera ad astra</title>
    <link href="https://232akira.github.io" />
    <updated>2025-08-24T08:44:30.000Z</updated>
    <category term="记录" />
    <category term="TIPS" />
    <category term="专题" />
    <category term="力扣" />
    <category term="算法" />
    <category term="备忘录" />
    <category term="AI" />
    <category term="指南" />
    <category term="笔记" />
    <category term="案例" />
    <entry>
        <id>https://232akira.github.io/2025/08/24/%E7%82%B9%E6%88%91%E6%9F%A5%E7%9C%8B%E7%AB%99%E7%82%B9%E6%8C%87%E5%BC%95/</id>
        <title>🔝点我查看站点指引</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/%E7%82%B9%E6%88%91%E6%9F%A5%E7%9C%8B%E7%AB%99%E7%82%B9%E6%8C%87%E5%BC%95/"/>
        <content type="html">&lt;h1 id=&#34;关于如何食用本博客&#34;&gt;&lt;a href=&#34;#关于如何食用本博客&#34; class=&#34;headerlink&#34; title=&#34;关于如何食用本博客&#34;&gt;&lt;/a&gt;关于如何食用本博客&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;任务栏&lt;/strong&gt;：pc全屏可直接点击顶端选项🍭pc分屏&amp;#x2F;移动端点击左上角三横杠&lt;/p&gt;
&lt;h2 id=&#34;了解更多我的故事&#34;&gt;&lt;a href=&#34;#了解更多我的故事&#34; class=&#34;headerlink&#34; title=&#34;了解更多我的故事&#34;&gt;&lt;/a&gt;了解更多我的故事&lt;/h2&gt;&lt;p&gt;&lt;code&gt;任务栏左上角&lt;/code&gt;-&amp;gt;&lt;code&gt;关于&lt;/code&gt;&lt;br&gt;一些碎碎念，感谢赏光&lt;/p&gt;
&lt;h2 id=&#34;昼夜模式&#34;&gt;&lt;a href=&#34;#昼夜模式&#34; class=&#34;headerlink&#34; title=&#34;昼夜模式&#34;&gt;&lt;/a&gt;昼夜模式&lt;/h2&gt;&lt;p&gt;&lt;code&gt;任务栏右上角&lt;/code&gt;-&amp;gt;&lt;code&gt;太阳&lt;/code&gt;or&lt;code&gt;月亮图标&lt;/code&gt;&lt;br&gt;不管白天黑夜，选择您舒适的方式浏览~&lt;/p&gt;
&lt;h2 id=&#34;更清晰的看看有哪些文章&#34;&gt;&lt;a href=&#34;#更清晰的看看有哪些文章&#34; class=&#34;headerlink&#34; title=&#34;更清晰的看看有哪些文章&#34;&gt;&lt;/a&gt;更清晰的看看有哪些文章&lt;/h2&gt;&lt;p&gt;&lt;code&gt;任务栏左上角&lt;/code&gt;-&amp;gt;&lt;code&gt;文章&lt;/code&gt;-&amp;gt;&lt;code&gt;归档&lt;/code&gt;&lt;br&gt;看看每月写了什么&lt;/p&gt;
&lt;p&gt;&lt;code&gt;任务栏左上角&lt;/code&gt;-&amp;gt;&lt;code&gt;文章&lt;/code&gt;-&amp;gt;&lt;code&gt;标签&lt;/code&gt;&lt;br&gt;关键词定位文章更高效&lt;/p&gt;
&lt;p&gt;也可以直接点击目录上方的数字跳转。&lt;/p&gt;
&lt;h2 id=&#34;🧩其他&#34;&gt;&lt;a href=&#34;#🧩其他&#34; class=&#34;headerlink&#34; title=&#34;🧩其他&#34;&gt;&lt;/a&gt;🧩其他&lt;/h2&gt;&lt;h3 id=&#34;想来点音乐？&#34;&gt;&lt;a href=&#34;#想来点音乐？&#34; class=&#34;headerlink&#34; title=&#34;想来点音乐？&#34;&gt;&lt;/a&gt;想来点音乐？&lt;/h3&gt;&lt;p&gt;&lt;code&gt;波浪动效&lt;/code&gt;-&amp;gt;&lt;code&gt;右边播放键&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;待完善的功能&#34;&gt;&lt;a href=&#34;#待完善的功能&#34; class=&#34;headerlink&#34; title=&#34;待完善的功能&#34;&gt;&lt;/a&gt;待完善的功能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;评论系统&lt;/li&gt;
&lt;li&gt;文章搜索&lt;/li&gt;
&lt;li&gt;其他异常显示&lt;br&gt;…&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="记录" />
        <updated>2025-08-24T08:44:30.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/TIPS/TIPS%F0%9F%92%A1%20%E2%8B%AE%20STDIO%E7%9A%84%E2%80%9C%E6%9C%AC%E5%9C%B0%E2%80%9D/</id>
        <title>TIPS💡 ⋮ STDIO的“本地”</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/TIPS/TIPS%F0%9F%92%A1%20%E2%8B%AE%20STDIO%E7%9A%84%E2%80%9C%E6%9C%AC%E5%9C%B0%E2%80%9D/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;关于MCP（模型上下文协议，Model Context Protocol）服务器传输方式中的STDIO👉一开始对其“只能用于本地进程间通信”的定义抱有疑问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为实际应用场景中，我们常见的12306、飞常准等等很多Host MCP Server都支持以STDIO方式接入，但是它们的服务器代码也不在本地啊？&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;豆包在这里解释的特别清楚👇&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;上面所提到的MCP Server连接确实需要联网，但STDIO也确实不具备网络传输能力。因为它的配置是如下的“组合模式”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;【MCP客户端】--stdio--【本地代理进程】--HTTP/HTTPS--【MCP远程服务器】
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是说，STDIO的传输作用于&lt;code&gt;客户端&lt;/code&gt;与&lt;code&gt;本地代理进程&lt;/code&gt;的本地管道，相当于通过&lt;code&gt;本地代理进程&lt;/code&gt;与&lt;code&gt;远程服务器&lt;/code&gt;间接对接了远程MCP服务。&lt;/p&gt;
&lt;p&gt;💡通俗的打个比方就很容易理解了：你和快递。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;你&lt;/strong&gt;在网上买了件快递，快递走了x通长途跋涉从&lt;strong&gt;远方仓库&lt;/strong&gt;送到了——&lt;strong&gt;快递柜&lt;/strong&gt;，而不是你的手里……&lt;br&gt;于是你下班后赶忙跑去快递柜打开柜门，终于拿到了你的快递。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;【你】--柜门交互--【快递柜】--物流网络--【远方仓库】
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;【你】-&amp;gt;【MCP客户端】&lt;/li&gt;
&lt;li&gt;【快递柜】-&amp;gt;【本地代理进程】&lt;/li&gt;
&lt;li&gt;【本地代理进程】-&amp;gt;【MCP远程服务器】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🧐这下理解多了。&lt;/p&gt;
&lt;p&gt;那么其实“本地”的概念指的是&lt;strong&gt;通信范围&lt;/strong&gt;&lt;del&gt;，而非服务位置&lt;/del&gt;。就像是通过了本地代理进程中转，STDIO可以间接对接远程服务，但其实STDIO本身的通信范围始终是本地。&lt;/p&gt;
</content>
        <category term="TIPS" />
        <updated>2025-08-24T08:30:10.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/TIPS/TIPS%F0%9F%92%A1%20%E2%8B%AE%20python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
        <title>TIPS💡 ⋮ python虚拟环境</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/TIPS/TIPS%F0%9F%92%A1%20%E2%8B%AE%20python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
        <content type="html">&lt;h3 id=&#34;创建虚拟环境&#34;&gt;&lt;a href=&#34;#创建虚拟环境&#34; class=&#34;headerlink&#34; title=&#34;创建虚拟环境&#34;&gt;&lt;/a&gt;创建虚拟环境&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;python -m venv 起的名
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;进入虚拟环境&#34;&gt;&lt;a href=&#34;#进入虚拟环境&#34; class=&#34;headerlink&#34; title=&#34;进入虚拟环境&#34;&gt;&lt;/a&gt;进入虚拟环境&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;.\起的名\Scripts\Activate.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;退出虚拟环境&#34;&gt;&lt;a href=&#34;#退出虚拟环境&#34; class=&#34;headerlink&#34; title=&#34;退出虚拟环境&#34;&gt;&lt;/a&gt;退出虚拟环境&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="TIPS" />
        <updated>2025-08-24T08:30:09.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/TIPS/TIPS%F0%9F%92%A1%20%E2%8B%AE%20MCP%E7%9A%84%E2%80%9CC%E2%80%9D/</id>
        <title>TIPS💡 ⋮ MCP的“C”</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/TIPS/TIPS%F0%9F%92%A1%20%E2%8B%AE%20MCP%E7%9A%84%E2%80%9CC%E2%80%9D/"/>
        <content type="html">&lt;p&gt;应用MCP&lt;code&gt;(Model Context Protocol)&lt;/code&gt;以来，一直对其中的”Context：上下文”抱有疑问。&lt;br&gt;🧐MCP作为大模型调用外部工具的标准化协议，和大模型本身的上下文能有什么关系？&lt;/p&gt;
&lt;h3 id=&#34;“上下文”是什么&#34;&gt;&lt;a href=&#34;#“上下文”是什么&#34; class=&#34;headerlink&#34; title=&#34;“上下文”是什么&#34;&gt;&lt;/a&gt;“上下文”是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我们知道，大模型高度依赖历史对话、环境信息、用户偏好……那么这些因素其实都是“上下文”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;传统的大模型与外部工具&amp;#x2F;数据源的集成存在显著痛点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个模型与每个工具&amp;#x2F;数据源需要单独做适配&lt;/li&gt;
&lt;li&gt;工具返回的数据无法被模型自然整合&lt;/li&gt;
&lt;li&gt;安全问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;MCP的“使命”&#34;&gt;&lt;a href=&#34;#MCP的“使命”&#34; class=&#34;headerlink&#34; title=&#34;MCP的“使命”&#34;&gt;&lt;/a&gt;MCP的“使命”&lt;/h3&gt;&lt;p&gt;而MCP的使命正是让不同来源、格式的上下文能被标准化地提取、传输和注入大模型的推理过程中，避免了其上下文断裂或重复开发的适配成本消耗。&lt;br&gt;MCP通信机制可以理解简单为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client与Server间使用JSON-RPC 2.0进行消息传输&lt;/li&gt;
&lt;li&gt;MCP服务器返回的上下文额外附带元信息&lt;/li&gt;
&lt;li&gt;协议握手&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;👇&#34;&gt;&lt;a href=&#34;#👇&#34; class=&#34;headerlink&#34; title=&#34;👇&#34;&gt;&lt;/a&gt;👇&lt;/h3&gt;&lt;p&gt;简而言之，MCP 不是简单的工具调用接口，而是&lt;strong&gt;模型与现实世界之间的上下文桥梁&lt;/strong&gt;—— 它让工具调用成为上下文获取的手段，而非目的本身。通过标准化上下文交互，它消除了重复开发的负担，提升了模型的决策能力，并为大模型从 “对话机器人” 进化为&lt;strong&gt;能处理真实任务的智能代理&lt;/strong&gt;奠定了基础。&lt;/p&gt;
&lt;p&gt;MCP 之所以叫 “模型上下文协议”，是因为它将&lt;strong&gt;大模型所需的一切背景信息、知识和工具能力统称为上下文&lt;/strong&gt;，并通过标准化的接口协议解决如何高效、安全、智能地将这些上下文传递给模型，使其在现实场景中真正 “知情达意”，而不仅仅是触发工具执行指令。这种设计让模型真正具备了结合外部世界动态信息进行推理和行动的能力，是其成为 AI 生态基础设施的关键所在。&lt;/p&gt;
</content>
        <category term="TIPS" />
        <updated>2025-08-24T08:30:08.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/TIPS/TIPS%F0%9F%92%A1%20%E2%8B%AE%20%E5%85%B3%E4%BA%8Erequirements.txt/</id>
        <title>TIPS💡 ⋮ 关于requirements.txt</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/TIPS/TIPS%F0%9F%92%A1%20%E2%8B%AE%20%E5%85%B3%E4%BA%8Erequirements.txt/"/>
        <content type="html">&lt;p&gt;工作时发自己写的python项目但没注意依赖库这个问题😶后来发现requirements.txt是个好玩意。于是记录在这里备忘一下方便copy：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下命令已成功运行于&lt;strong&gt;Win11&lt;/strong&gt; VSCode Powershell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;生成requirements-txt&#34;&gt;&lt;a href=&#34;#生成requirements-txt&#34; class=&#34;headerlink&#34; title=&#34;生成requirements.txt&#34;&gt;&lt;/a&gt;生成requirements.txt&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pip install pipreqs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipreqs ./ --encoding=utf8  --force&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用requirements-txt&#34;&gt;&lt;a href=&#34;#使用requirements-txt&#34; class=&#34;headerlink&#34; title=&#34;使用requirements.txt&#34;&gt;&lt;/a&gt;使用requirements.txt&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
</content>
        <category term="TIPS" />
        <updated>2025-08-24T08:30:07.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20PKMer%20Market%E5%AE%89%E8%A3%85/</id>
        <title>指南🧭 ⋮ PKMer Market安装</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20PKMer%20Market%E5%AE%89%E8%A3%85/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近在用Obsidian搭建自己的知识库。工作学习以来长时间接受各方面大量信息，光靠生物脑容量已经不够用了😫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么拓展Obsidian的更多功能，如编辑增强、交互优化、绘图工具和文献管理等等，大多都可以通过配置相应的插件来实现。&lt;/p&gt;
&lt;p&gt;国内用PKMer Market安装就很舒适（非广！），两步走即可👇&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;访问&lt;a href=&#34;https://pkmer.cn/products/market/&#34;&gt;PKMer_PKMer 插件主题市场&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在其官网下载zip包后参考&lt;a href=&#34;https://pkmer.cn/Pkmer-Docs/10-obsidian/obsidian%E7%A4%BE%E5%8C%BA%E6%8F%92%E4%BB%B6/pkmer-market/pkmer%E6%8F%92%E4%BB%B6%E7%94%B5%E8%84%91%E7%AB%AF%E5%AE%89%E8%A3%85%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/&#34;&gt;教程&lt;/a&gt;进行手动安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考👉&lt;a href=&#34;https://blog.csdn.net/sinat_32525917/article/details/149714238&#34;&gt;此链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我安装的第三方插件如下：(在&lt;code&gt;设置&lt;/code&gt;-&amp;gt;&lt;code&gt;选项&lt;/code&gt;-&amp;gt;&lt;code&gt;第三方插件&lt;/code&gt;查看)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calendar(Beta)&lt;/li&gt;
&lt;li&gt;Dataview&lt;/li&gt;
&lt;li&gt;Diagrams&lt;/li&gt;
&lt;li&gt;Editing Toolbar&lt;/li&gt;
&lt;li&gt;Emoji Toolbar&lt;/li&gt;
&lt;li&gt;ExcaliBrain&lt;/li&gt;
&lt;li&gt;Excalidraw&lt;/li&gt;
&lt;li&gt;PKMer&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="指南" />
        <updated>2025-08-24T08:30:06.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Obsidian%20Git%E5%90%8C%E6%AD%A5/</id>
        <title>指南🧭 ⋮ Obsidian Git同步</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Obsidian%20Git%E5%90%8C%E6%AD%A5/"/>
        <content type="html">&lt;p&gt;这里假设你用&lt;code&gt;A设备&lt;/code&gt;写Obsidian笔记，并想要在&lt;code&gt;B设备&lt;/code&gt;上拉取笔记内容。&lt;a href=&#34;https://zhuanlan.zhihu.com/p/657663584&#34;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;在A设备上&#34;&gt;&lt;a href=&#34;#在A设备上&#34; class=&#34;headerlink&#34; title=&#34;在A设备上&#34;&gt;&lt;/a&gt;在A设备上&lt;/h2&gt;&lt;h3 id=&#34;1️⃣初始化本地Git仓库&#34;&gt;&lt;a href=&#34;#1️⃣初始化本地Git仓库&#34; class=&#34;headerlink&#34; title=&#34;1️⃣初始化本地Git仓库&#34;&gt;&lt;/a&gt;1️⃣初始化本地Git仓库&lt;/h3&gt;&lt;h4 id=&#34;安装Git&#34;&gt;&lt;a href=&#34;#安装Git&#34; class=&#34;headerlink&#34; title=&#34;安装Git&#34;&gt;&lt;/a&gt;安装&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;官网下载&lt;/li&gt;
&lt;li&gt;默认配置安装&lt;/li&gt;
&lt;li&gt;打开命令行git bash here&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;在Obsidian仓库中初始化Git&#34;&gt;&lt;a href=&#34;#在Obsidian仓库中初始化Git&#34; class=&#34;headerlink&#34; title=&#34;在Obsidian仓库中初始化Git&#34;&gt;&lt;/a&gt;在Obsidian仓库中初始化Git&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1. 进入你的本地Obsidian库文件夹&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里建议资源管理器跳转到对应目录，在地址栏直接输入cmd+回车打开终端即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;cd /path/to/your/ObsidianVault
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. 初始化Git仓库&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2️⃣连接远程Github仓库&#34;&gt;&lt;a href=&#34;#2️⃣连接远程Github仓库&#34; class=&#34;headerlink&#34; title=&#34;2️⃣连接远程Github仓库&#34;&gt;&lt;/a&gt;2️⃣连接远程Github仓库&lt;/h3&gt;&lt;h4 id=&#34;在你的Github上创建新仓库&#34;&gt;&lt;a href=&#34;#在你的Github上创建新仓库&#34; class=&#34;headerlink&#34; title=&#34;在你的Github上创建新仓库&#34;&gt;&lt;/a&gt;在你的Github上创建新仓库&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1. 登录&lt;/strong&gt;你的Github账号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. New Repository&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置仓库名，例如&lt;code&gt;MyObsidianVault&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Private&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不要勾选&lt;code&gt;Initialize with README&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将本地仓库推送到Github&#34;&gt;&lt;a href=&#34;#将本地仓库推送到Github&#34; class=&#34;headerlink&#34; title=&#34;将本地仓库推送到Github&#34;&gt;&lt;/a&gt;将本地仓库推送到Github&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在上一个步骤的Obsidian笔记目录下（.git隐藏文件所在根目录）cmd进入终端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;关联你的远程仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/你的用户名/你的仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;添加所有文件并提交&#34;&gt;&lt;a href=&#34;#添加所有文件并提交&#34; class=&#34;headerlink&#34; title=&#34;添加所有文件并提交&#34;&gt;&lt;/a&gt;添加所有文件并提交&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;日常同步仅用以下三步即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;你的更新日志&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;在B设备上&#34;&gt;&lt;a href=&#34;#在B设备上&#34; class=&#34;headerlink&#34; title=&#34;在B设备上&#34;&gt;&lt;/a&gt;在B设备上&lt;/h2&gt;&lt;h3 id=&#34;1️⃣克隆仓库&#34;&gt;&lt;a href=&#34;#1️⃣克隆仓库&#34; class=&#34;headerlink&#34; title=&#34;1️⃣克隆仓库&#34;&gt;&lt;/a&gt;1️⃣克隆仓库&lt;/h3&gt;&lt;p&gt;进入你想要放置笔记文件的目录下，依旧地址栏cmd打开终端&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/你的用户名/你的仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2️⃣Obsidian打开克隆的文件夹&#34;&gt;&lt;a href=&#34;#2️⃣Obsidian打开克隆的文件夹&#34; class=&#34;headerlink&#34; title=&#34;2️⃣Obsidian打开克隆的文件夹&#34;&gt;&lt;/a&gt;2️⃣Obsidian打开克隆的文件夹&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;左边栏点击&lt;code&gt;打开命令面板&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;打开其他仓库&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;链接到刚刚Clone的目录即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3️⃣同步更新&#34;&gt;&lt;a href=&#34;#3️⃣同步更新&#34; class=&#34;headerlink&#34; title=&#34;3️⃣同步更新&#34;&gt;&lt;/a&gt;3️⃣同步更新&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git pull #拉取最新更改
git push # 推送本地更改
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;经过以上简易快速的手动同步方式，你已经完成了Obsidian在github仓库上的同步。&lt;br&gt;🆗可以在任何时候在Github官网登录账号，点击&lt;code&gt;Your repositories&lt;/code&gt;进入你私有的仓库查看同步笔记内容。&lt;/p&gt;
</content>
        <category term="指南" />
        <updated>2025-08-24T08:30:05.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20API%20Key%E5%AF%BC%E5%85%A5/</id>
        <title>指南🧭 ⋮ API Key导入</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20API%20Key%E5%AF%BC%E5%85%A5/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;在调用模型服务时需要配置对应平台的API Key，但直接将API Key硬编码在代码中是个非常危险且不推荐的行为！！！&lt;/p&gt;
&lt;p&gt;因此关于Python项目中API Key的几种导入方法，简单归个类👇&lt;br&gt;&lt;em&gt;&lt;code&gt;（Windows11）&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;系统环境变量-System-Environment-Variables&#34;&gt;&lt;a href=&#34;#系统环境变量-System-Environment-Variables&#34; class=&#34;headerlink&#34; title=&#34;系统环境变量 (System Environment Variables)&#34;&gt;&lt;/a&gt;系统环境变量 (System Environment Variables)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;终端命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# cmd（需要管理员权限）
setx XXX_API_KEY &amp;quot;your_api_key_here&amp;quot; /M

# powershell（需要管理员权限）
[Environment]::SetEnvironmentVariable(&amp;quot;XXX_API_KEY&amp;quot;, &amp;quot;your_api_key_here&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Win+S搜索-&amp;gt;&lt;strong&gt;编辑系统环境变量&lt;/strong&gt;-&amp;gt;手动添加变量&amp;amp;值&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;变量：XXX_API_KEY&lt;/li&gt;
&lt;li&gt;值：your_api_key_here&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理员权限&lt;/li&gt;
&lt;li&gt;全局生效（适用于所有用户）&lt;/li&gt;
&lt;li&gt;重启终端后生效&lt;/li&gt;
&lt;li&gt;适合生产环境或服务器部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户环境变量-User-Environment-Variables&#34;&gt;&lt;a href=&#34;#用户环境变量-User-Environment-Variables&#34; class=&#34;headerlink&#34; title=&#34;用户环境变量 (User Environment Variables)&#34;&gt;&lt;/a&gt;用户环境变量 (User Environment Variables)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;终端命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# cmd（无需管理员权限）
setx XXX_API_KEY &amp;quot;your_api_key_here&amp;quot;

# powershell（无需管理员权限）
[Environment]::SetEnvironmentVariable(&amp;quot;XXX_API_KEY&amp;quot;, &amp;quot;your_api_key_here&amp;quot;, &amp;quot;User&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Win+S搜索-&amp;gt;&lt;strong&gt;编辑账户的环境变量&lt;/strong&gt;-&amp;gt;手动添加变量&amp;amp;值&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;变量：XXX_API_KEY&lt;/li&gt;
&lt;li&gt;值：your_api_key_here&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需管理员权限&lt;/li&gt;
&lt;li&gt;只对当前用户生效&lt;/li&gt;
&lt;li&gt;重启终端后生效&lt;/li&gt;
&lt;li&gt;适合个人开发环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;会话环境变量-Session-Environment-Variables&#34;&gt;&lt;a href=&#34;#会话环境变量-Session-Environment-Variables&#34; class=&#34;headerlink&#34; title=&#34;会话环境变量 (Session Environment Variables)&#34;&gt;&lt;/a&gt;会话环境变量 (Session Environment Variables)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;终端命令&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cmd
set XXX_API_KEY=your_api_key_here

# powershell
$env:XXX_API_KEY=&amp;quot;your_api_key_here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只在当前终端会话中有效&lt;/li&gt;
&lt;li&gt;关闭终端后失效&lt;/li&gt;
&lt;li&gt;无需重启终端，立即生效&lt;/li&gt;
&lt;li&gt;适合临时测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;env-文件&#34;&gt;&lt;a href=&#34;#env-文件&#34; class=&#34;headerlink&#34; title=&#34;.env 文件&#34;&gt;&lt;/a&gt;.env 文件&lt;/h3&gt;&lt;p&gt;项目根目录下创建名为&lt;code&gt;.env&lt;/code&gt;的文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;XXX_API_KEY=your_api_key_here
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需管理员权限&lt;/li&gt;
&lt;li&gt;项目级别隔离，不同项目可独立管理密钥&lt;/li&gt;
&lt;li&gt;支持多环境配置（如&lt;code&gt;.env.local&lt;/code&gt;, &lt;code&gt;.env.production&lt;/code&gt;等）&lt;/li&gt;
&lt;li&gt;通常被&lt;code&gt;.gitignore&lt;/code&gt;排除，安全性好&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;环境变量优先级（Python-dotenv）&#34;&gt;&lt;a href=&#34;#环境变量优先级（Python-dotenv）&#34; class=&#34;headerlink&#34; title=&#34;环境变量优先级（Python-dotenv）&#34;&gt;&lt;/a&gt;环境变量优先级（Python-dotenv）&lt;/h3&gt;&lt;p&gt;当使用python-dotenv加载环境变量时，变量的生效优先级如下：（从高到低）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统环境变量 (最高优先级)&lt;/li&gt;
&lt;li&gt;用户环境变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt;文件中的变量&lt;/li&gt;
&lt;li&gt;默认值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;即：进程总是取用当前环境中已存在的最高优先级的那个值。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;💡需要注意：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;python-dotenv&lt;/code&gt;的作用是将&lt;code&gt;.env&lt;/code&gt;文件中的变量&lt;strong&gt;注入&lt;/strong&gt;到当前 Python 进程的环境中，这个注入的环境&lt;strong&gt;并不会覆盖&lt;/strong&gt;系统或用户环境变量。&lt;br&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;br&gt;某个变量（如 &lt;code&gt;XXX_API_KEY&lt;/code&gt;）已经在系统的环境变量中定义了，那么&lt;code&gt;python-dotenv&lt;/code&gt;从文件读取到的同名值会被忽略。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="指南" />
        <updated>2025-08-24T08:30:04.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0%F0%9F%97%92%EF%B8%8F%20%E2%8B%AE%20MCP%EF%BC%88Model%20Context%20Protocol%EF%BC%89/</id>
        <title>笔记🗒️ ⋮ MCP（Model Context Protocol）</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0%F0%9F%97%92%EF%B8%8F%20%E2%8B%AE%20MCP%EF%BC%88Model%20Context%20Protocol%EF%BC%89/"/>
        <content type="html">&lt;h2 id=&#34;应用背景&#34;&gt;&lt;a href=&#34;#应用背景&#34; class=&#34;headerlink&#34; title=&#34;应用背景&#34;&gt;&lt;/a&gt;应用背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;你是否向大模型提问过：“现在几点了？”“我这里的天气怎么样？”的问题？那么它能够正确回答吗？&lt;/p&gt;
&lt;p&gt;目前来看——一般会回答错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当下，LLM的能力早已不局限于“文本生成”，而是能够通过外部工具的调用变得“手眼通天”：脱离原有的封闭环境，获得了&lt;strong&gt;与外部环境交互&lt;/strong&gt;的能力。&lt;/p&gt;
&lt;p&gt;相当于给大模型加上了手脚🧐&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与外部环境交互&lt;/strong&gt;通过&lt;code&gt;MCP&lt;/code&gt;进行工具调用的规范化，通过&lt;code&gt;A2A&lt;/code&gt;实现Agent与Agent之间交互的规范化。&lt;/p&gt;
&lt;h2 id=&#34;Function-Calling-MCP&#34;&gt;&lt;a href=&#34;#Function-Calling-MCP&#34; class=&#34;headerlink&#34; title=&#34;Function Calling-&amp;gt;MCP&#34;&gt;&lt;/a&gt;Function Calling-&amp;gt;MCP&lt;/h2&gt;&lt;p&gt;工具调用基于&lt;code&gt;function calling&lt;/code&gt;实现并被广泛用于商业API交互，目前国产的主流LLM大多已支持。&lt;br&gt;而Ahthropic推出的&lt;strong&gt;MCP&lt;/strong&gt;（Model Context Protocol）正是针对“工具调用接口的规范化”应运而生的协议。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;调用的过程其实是让大模型理解我们需求的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里按个人理解写一下MCP应用流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用户通过配置MCP服务-&amp;gt;提供工具调用的相关函数及其对应的传参要求，

模型在
  - 理解用户需求
  - 学会函数对应参数的攥写格式
的基础上，
判断函数是否调用、如何调用、拿到返回的结果后如何分析。
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Function Calling和MCP是当前技术落地的核心方式。前者侧重模型原生能力，后者强调协议标准化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么AI Agent（人工智能代理&amp;#x2F;智能体）则为更高阶的形态，其融合了自主决策+工具调用，能够更加适用于复杂场景。&lt;/p&gt;
&lt;h2 id=&#34;MCP-A2A&#34;&gt;&lt;a href=&#34;#MCP-A2A&#34; class=&#34;headerlink&#34; title=&#34;MCP-&amp;gt;A2A&#34;&gt;&lt;/a&gt;MCP-&amp;gt;A2A&lt;/h2&gt;&lt;p&gt;若再视野拓展至MAS（Multi-Agent Systems）的多智能体系统协作领域，我们就不能不提起&lt;strong&gt;A2A&lt;/strong&gt;（Agent-to-Agent Protocol,代理间通信协议）。&lt;/p&gt;
&lt;p&gt;到这里可以将上文提到的三个概念搭建为三层级的技术栈模型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       【A2A】         // Agent与Agent~协作网络
          ↑
       【MCP】         // Agent与工具~资源与会话管理
          ↑
 【Function Calling】  //模型原生能力
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Google将A2A比作互联网早期的HTTP协议&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a href=&#34;#参考链接&#34; class=&#34;headerlink&#34; title=&#34;参考链接&#34;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/1916821381879931822&#34;&gt;(7 封私信) 深度研究报告：大模型工具调用（Tool-use）的技术演进与协议生态分析 - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/hwhsong/article/details/147244842&#34;&gt;【AI学习】大模型调用外部工具的主流方式对比_大模型工具调用-CSDN博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="笔记" />
        <updated>2025-08-24T08:30:03.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0%F0%9F%97%92%EF%B8%8F%20%E2%8B%AE%20LangChain/</id>
        <title>笔记🗒️ ⋮ LangChain</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0%F0%9F%97%92%EF%B8%8F%20%E2%8B%AE%20LangChain/"/>
        <content type="html">&lt;h2 id=&#34;定义&#34;&gt;&lt;a href=&#34;#定义&#34; class=&#34;headerlink&#34; title=&#34;定义&#34;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;LangChain是一个&lt;/strong&gt;用于开发由语言模型驱动的应用程序的&lt;strong&gt;框架&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;如何工作&#34;&gt;&lt;a href=&#34;#如何工作&#34; class=&#34;headerlink&#34; title=&#34;如何工作&#34;&gt;&lt;/a&gt;如何工作&lt;/h2&gt;&lt;h3 id=&#34;核心组件&#34;&gt;&lt;a href=&#34;#核心组件&#34; class=&#34;headerlink&#34; title=&#34;核心组件&#34;&gt;&lt;/a&gt;核心组件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Compents&lt;/li&gt;
&lt;li&gt;Chains&lt;/li&gt;
&lt;li&gt;Agents&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://python.langchain.com/docs/get_started/introduction&#34;&gt;https://python.langchain.com/docs/get_started/introduction&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="笔记" />
        <updated>2025-08-24T08:30:02.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/08/24/%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0%F0%9F%97%92%EF%B8%8F%20%E2%8B%AE%20AI%20Agent/</id>
        <title>笔记🗒️ ⋮ AI Agent</title>
        <link rel="alternate" href="https://232akira.github.io/2025/08/24/%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0%F0%9F%97%92%EF%B8%8F%20%E2%8B%AE%20AI%20Agent/"/>
        <content type="html">&lt;h2 id=&#34;Agent&#34;&gt;&lt;a href=&#34;#Agent&#34; class=&#34;headerlink&#34; title=&#34;Agent&#34;&gt;&lt;/a&gt;Agent&lt;/h2&gt;&lt;p&gt;智能体（Agent）更具备“人类”的思维方式，可以识别任务的需求分析、执行规划和问题决策。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于LLM驱动的Agent基本框架：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;![[SVG-1-Agent.svg]]&lt;/p&gt;
&lt;h2 id=&#34;Agentic-LLMs&#34;&gt;&lt;a href=&#34;#Agentic-LLMs&#34; class=&#34;headerlink&#34; title=&#34;Agentic LLMs&#34;&gt;&lt;/a&gt;Agentic LLMs&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在使用魔搭社区的&lt;a href=&#34;https://modelscope.cn/studios/modelscope/mcp-playground&#34;&gt;MCP Playground · 创空间&lt;/a&gt;时，看到实验场用的是Qwen3-Coder-480B-A35B-Instruct &lt;code&gt;Agentic 大模型&lt;/code&gt;，所以就好奇Agentic大模型是什么个概念🧐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代理型大语言模型（Agent LLMs）是指能够作为智能体（Agent）行动的大语言模型，具备推理、行动和交互的能力。&lt;/p&gt;
&lt;h2 id=&#34;ReAct&#34;&gt;&lt;a href=&#34;#ReAct&#34; class=&#34;headerlink&#34; title=&#34;ReAct&#34;&gt;&lt;/a&gt;ReAct&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://react-lm.github.io/&#34;&gt;https://react-lm.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a href=&#34;#参考链接&#34; class=&#34;headerlink&#34; title=&#34;参考链接&#34;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/678046050&#34;&gt;7000长文：一文读懂Agent，大模型的下一站 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/2401_84204207/article/details/147516308&#34;&gt;380篇文献！首份Agentic大模型最新技术综述_agentic+llm-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/2532014&#34;&gt;【科普篇】LLM、GPT、AIGC、AI Agent、Agentic AI 到底是个啥？-腾讯云开发者社区-腾讯云&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="笔记" />
        <updated>2025-08-24T08:30:01.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/06/16/%E5%A4%87%E5%BF%98/%E5%A4%87%E5%BF%98%E5%BD%95-%E6%A1%88%E4%BE%8B/</id>
        <title>备忘录 ⋮ 案例</title>
        <link rel="alternate" href="https://232akira.github.io/2025/06/16/%E5%A4%87%E5%BF%98/%E5%A4%87%E5%BF%98%E5%BD%95-%E6%A1%88%E4%BE%8B/"/>
        <content type="html">&lt;p&gt;工作以来接触到了很多新知识，博客也拖了俩月没更了…😂今天开始慢慢补充案例！&lt;/p&gt;
&lt;h2 id=&#34;工作案例备忘&#34;&gt;&lt;a href=&#34;#工作案例备忘&#34; class=&#34;headerlink&#34; title=&#34;工作案例备忘&#34;&gt;&lt;/a&gt;工作案例备忘&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;记录的文章会以&lt;code&gt;【实战x-x】&lt;/code&gt;的方式作为开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1️⃣AIGC开发案例&#34;&gt;&lt;a href=&#34;#1️⃣AIGC开发案例&#34; class=&#34;headerlink&#34; title=&#34;1️⃣AIGC开发案例&#34;&gt;&lt;/a&gt;1️⃣AIGC开发案例&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;直接应用 + API编排&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;文生文&lt;/li&gt;
&lt;li&gt;文生图&lt;/li&gt;
&lt;li&gt;文生视频&lt;/li&gt;
&lt;li&gt;图生图&lt;/li&gt;
&lt;li&gt;图生3D&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2️⃣AI辅助编程&#34;&gt;&lt;a href=&#34;#2️⃣AI辅助编程&#34; class=&#34;headerlink&#34; title=&#34;2️⃣AI辅助编程&#34;&gt;&lt;/a&gt;2️⃣AI辅助编程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;VSCode + 插件为主，编译器用的少&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Cursor&lt;/li&gt;
&lt;li&gt;Trae&lt;/li&gt;
&lt;li&gt;Copilot&lt;/li&gt;
&lt;li&gt;Cline&lt;/li&gt;
&lt;li&gt;Lingma&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3️⃣AI客户端&#34;&gt;&lt;a href=&#34;#3️⃣AI客户端&#34; class=&#34;headerlink&#34; title=&#34;3️⃣AI客户端&#34;&gt;&lt;/a&gt;3️⃣AI客户端&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;LLM服务商配置、MCP服务部署&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Chatbox&lt;/li&gt;
&lt;li&gt;Cherry Studio&lt;/li&gt;
&lt;li&gt;DeepChat&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;个人案例备忘&#34;&gt;&lt;a href=&#34;#个人案例备忘&#34; class=&#34;headerlink&#34; title=&#34;个人案例备忘&#34;&gt;&lt;/a&gt;个人案例备忘&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;记录的文章会以&lt;code&gt;【笔记x-x】&lt;/code&gt;的方式作为开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;待整理~😴&lt;/p&gt;
</content>
        <category term="备忘录" />
        <category term="AI" />
        <updated>2025-06-16T02:10:30.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1-2%20%E6%8E%A5%E5%85%A5DeepSeek-R1%E4%BC%98%E5%8C%96%E6%8F%90%E7%A4%BA%E8%AF%8D/</id>
        <title>案例1️⃣-2 ⋮ 接入DeepSeek-R1优化提示词</title>
        <link rel="alternate" href="https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1-2%20%E6%8E%A5%E5%85%A5DeepSeek-R1%E4%BC%98%E5%8C%96%E6%8F%90%E7%A4%BA%E8%AF%8D/"/>
        <content type="html">&lt;p&gt;🔆2025-04-16&lt;/p&gt;
&lt;h2 id=&#34;优化Stable-Difussion生成效果-接入DeepSeek-R1处理提示词&#34;&gt;&lt;a href=&#34;#优化Stable-Difussion生成效果-接入DeepSeek-R1处理提示词&#34; class=&#34;headerlink&#34; title=&#34;优化Stable Difussion生成效果(接入DeepSeek-R1处理提示词)&#34;&gt;&lt;/a&gt;优化Stable Difussion生成效果(接入DeepSeek-R1处理提示词)&lt;/h2&gt;&lt;p&gt;哇这里只加了一个功能流程中就出现很多bug😅待我慢慢梳理一下&lt;/p&gt;
&lt;h2 id=&#34;问题引入&#34;&gt;&lt;a href=&#34;#问题引入&#34; class=&#34;headerlink&#34; title=&#34;问题引入&#34;&gt;&lt;/a&gt;问题引入&lt;/h2&gt;&lt;p&gt;上面说到对提示词进行优化，那么可以直接再引入一个文本生成模型来进行这个操作，那么整体的流程就变为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A[原始提示词] --&amp;gt; B(DeepSeek-R1优化)--&amp;gt; C[优化后提示词]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后才是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C --&amp;gt; D(Stable Diffusion生成)
D --&amp;gt; E[最终图像]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取DeepSeek-R1-API&#34;&gt;&lt;a href=&#34;#获取DeepSeek-R1-API&#34; class=&#34;headerlink&#34; title=&#34;获取DeepSeek-R1 API&#34;&gt;&lt;/a&gt;获取DeepSeek-R1 API&lt;/h2&gt;&lt;p&gt;和先前拿到Stable Diffusion是同一个方法：访问&lt;code&gt;沐曦资源包&lt;/code&gt;-&amp;gt;&lt;code&gt;DeepSeek-R1&lt;/code&gt;-&amp;gt;&lt;code&gt;API&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base_url&lt;/code&gt; &lt;a href=&#34;https://ai.gitee.com/v1&#34;&gt;https://ai.gitee.com/v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api_key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; DeepSeek-R1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码思路&#34;&gt;&lt;a href=&#34;#代码思路&#34; class=&#34;headerlink&#34; title=&#34;代码思路&#34;&gt;&lt;/a&gt;代码思路&lt;/h2&gt;&lt;p&gt;简而言之，就是在Stable Diffusion拿到提示词之前，把原始提示词先丢给DeepSeek处理一下，也可以说是&lt;strong&gt;双模型协同机制&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;DeepSeek-R1&#34;&gt;&lt;a href=&#34;#DeepSeek-R1&#34; class=&#34;headerlink&#34; title=&#34;DeepSeek-R1&#34;&gt;&lt;/a&gt;DeepSeek-R1&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;作为「提示词工程师」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;message模块向其发送指令，比如：你是一个专业的SD提示词优化助手等等&lt;/li&gt;
&lt;li&gt;接受用户输入的提示词&lt;/li&gt;
&lt;li&gt;优化&lt;br&gt;优化的策略可以有很多，针对Stable Diffusion我们可以这样做：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;转换成英文&lt;/li&gt;
&lt;li&gt;语法结构优化（将描述性语言转换为SD擅长的标签式表达）&lt;/li&gt;
&lt;li&gt;自动补充合适的艺术风格细节（如添加”ultra detailed, 8k”等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;⚠️注意！这里有个致命的提示词要点，影响整个案例是否成功。将放到后面作为重点补充。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;输出经优化后的提示词&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;def get_optimized_prompt(original_prompt: str) -&amp;gt; str：
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Stable-Diffusion&#34;&gt;&lt;a href=&#34;#Stable-Diffusion&#34; class=&#34;headerlink&#34; title=&#34;Stable Diffusion&#34;&gt;&lt;/a&gt;Stable Diffusion&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;作为「图像生成器」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;接受经优化后的提示词&lt;/li&gt;
&lt;li&gt;输出文生图结果&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;def generate_image(prompt: str, output_path: str = &amp;quot;output-DS-R1.png&amp;quot;) -&amp;gt; bool:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;报错梳理&#34;&gt;&lt;a href=&#34;#报错梳理&#34; class=&#34;headerlink&#34; title=&#34;报错梳理&#34;&gt;&lt;/a&gt;报错梳理&lt;/h2&gt;&lt;h3 id=&#34;模型资源地址-模型名称置入错误&#34;&gt;&lt;a href=&#34;#模型资源地址-模型名称置入错误&#34; class=&#34;headerlink&#34; title=&#34;模型资源地址&amp;#x2F;模型名称置入错误&#34;&gt;&lt;/a&gt;模型资源地址&amp;#x2F;模型名称置入错误&lt;/h3&gt;&lt;p&gt;这个其实是非常没有技术含量的报错🫥因为这个案例的代码比较冗长（200行左右），并且模型资源置入的地址的代码位置比较分散，所以在快速大量修改整体代码时，很容易没有调用到模型资源，但往往报错的时候不会意识到是这么简单的问题。&lt;br&gt;&lt;strong&gt;举个🌰：&lt;/strong&gt;&lt;br&gt;遇到了401报错，那么可能是API Key：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为空&lt;/li&gt;
&lt;li&gt;已过期&lt;/li&gt;
&lt;li&gt;不属于当前使用的API服务（比如错用OpenAI的Key调用 Gitee AI，我就是没注意到这里）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔄所以记得基础问题至少也要检查一遍。&lt;/p&gt;
&lt;h3 id=&#34;运行无报错但是无输出&#34;&gt;&lt;a href=&#34;#运行无报错但是无输出&#34; class=&#34;headerlink&#34; title=&#34;运行无报错但是无输出&#34;&gt;&lt;/a&gt;运行无报错但是无输出&lt;/h3&gt;&lt;p&gt;这里属于和模型无关的基础代码编写问题了。需要添加一定的逻辑，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加代码调试输出逻辑&lt;/li&gt;
&lt;li&gt;强制报错测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最好是加个运行日志，方便看看细节啥情况。这里问了DS说的很专业，码一下&lt;br&gt;🔄错误熔断设计：&lt;code&gt;独立捕获每个API的异常&lt;/code&gt; &amp;amp; &lt;code&gt;生成过程状态实时反馈&lt;/code&gt;，并添加完整的日志追踪。&lt;/p&gt;
&lt;h3 id=&#34;运行成功有输出但是完全不对&#34;&gt;&lt;a href=&#34;#运行成功有输出但是完全不对&#34; class=&#34;headerlink&#34; title=&#34;运行成功有输出但是完全不对&#34;&gt;&lt;/a&gt;运行成功有输出但是完全不对&lt;/h3&gt;&lt;p&gt;甚至比优化前还要离谱🤣输入的原始提示词是“一只穿着宇航服的猫在月球上漫步”，到这里生成的图不像原来一样至少是个猫，而是变成了一张人物古典水墨风了，完全不相关。&lt;/p&gt;
&lt;p&gt;到这里意识到一个方法,也就是需要按照案例的流程进行逐个排错。我们需要明白究竟是哪个步骤出了问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简称：DeepSeek-&amp;gt;DS、Stable Diffusion-&amp;gt;SD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DS没有接受到提示词&lt;/li&gt;
&lt;li&gt;DS接受到提示词 &amp;amp; 优化失败（包括生成的新提示词错误的情况）&lt;/li&gt;
&lt;li&gt;DS接受到提示词 &amp;amp; 优化成功 &amp;amp; SD接受到新提示词&lt;/li&gt;
&lt;li&gt;DS接受到提示词 &amp;amp; 优化成功 &amp;amp; SD接受到新提示词 &amp;amp; SD输出图像失败&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以推断问题大概率出现在&lt;code&gt;2&lt;/code&gt;or&lt;code&gt;3&lt;/code&gt;，也就是提示词的优化和传递环节出现了问题，所以导致SD拿到错误的提示词之后很顺溜的生成了错误的图片。&lt;br&gt;🔄需要修改代码逻辑。&lt;/p&gt;
&lt;h3 id=&#34;警惕AI骗人现象&#34;&gt;&lt;a href=&#34;#警惕AI骗人现象&#34; class=&#34;headerlink&#34; title=&#34;警惕AI骗人现象&#34;&gt;&lt;/a&gt;警惕AI骗人现象&lt;/h3&gt;&lt;p&gt;我这里被DeepSeek坑的好惨😭长记性了。我报错的代码它给修改后运行正确，一时激动难以自已。然后发现他在提示词生成错误后直接这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    except:
        return &amp;quot;cat in astronaut suit on the moon, detailed fur, cosmic background, 8k&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;😅😅😅哪有这样的，我需要调用ds来生成这样的语句，它到自己干脆的设置：生成不了直接用写好的优化后代码。太离谱…&lt;br&gt;这里同样需要修改代码逻辑，保证出现失败后能够及时响应。&lt;/p&gt;
&lt;h3 id=&#34;⚠️最后一个也是最重要的一个报错&#34;&gt;&lt;a href=&#34;#⚠️最后一个也是最重要的一个报错&#34; class=&#34;headerlink&#34; title=&#34;⚠️最后一个也是最重要的一个报错&#34;&gt;&lt;/a&gt;⚠️最后一个也是最重要的一个报错&lt;/h3&gt;&lt;p&gt;哇这里真的，&lt;strong&gt;理解起来很容易，发现起来很难！！！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先我们知道：DeepSeek-R1是个&lt;strong&gt;深度思考&lt;/strong&gt;模型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是说，它大概率会在你要求&lt;code&gt;不要生成其他无关内容&lt;/code&gt;时，思考了一大堆：好的，用户说明我需要巴拉巴拉…然后字数就超了，这半截思考内容就会传递给Stable Diffusion，结果可想而知🫥比如这样：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2025-04-16 17:27:41,655 - ERROR - 响应内容: &amp;#123;&amp;quot;id&amp;quot;:&amp;quot;9e7f4969063e49b7a542150ed194db43&amp;quot;,&amp;quot;object&amp;quot;:&amp;quot;chat.completion&amp;quot;,&amp;quot;created&amp;quot;:1744795661,&amp;quot;model&amp;quot;:&amp;quot;deepseek-r1&amp;quot;,&amp;quot;choices&amp;quot;:[&amp;#123;&amp;quot;index&amp;quot;:0,&amp;quot;message&amp;quot;:&amp;#123;&amp;quot;role&amp;quot;:&amp;quot;assistant&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;reasoning_content&amp;quot;:&amp;quot;好的，用户让我转换这个中 文描述为英文提示词。首先，我需要仔细分析原句：“一只穿着宇航服的猫在月球上漫步”。主体是猫，穿着宇航服，环境是月球，动作是漫步。接下来 要确定细节，比如猫的品种可能不重要，但宇航服的设计可能需要描述，比如现代NASA风格。环境方面，月球表面可能有陨石坑和地球在背景中。风格 方面，用户可能想要写实风格，所以用realistic。画质需要高清，8k，超详细，所以加上这些词。然后按照规则，用逗号分隔短语，包含主体、环境、细节、风格、画质。检查是否有遗漏，比如猫的姿势是行走，&amp;quot;,&amp;quot;tool_calls&amp;quot;:null&amp;#125;,&amp;quot;logprobs&amp;quot;:null,&amp;quot;finish_reason&amp;quot;:&amp;quot;len...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仔细看就会发现话没说完：说到“行走，”就停了。然后我就问了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;我知道问题出在哪了😓和你说说。因为deepseek-r1是深度思考，所以我即使说了只生成优化后的提示词，我的本地环境还是会把他思考的部分也算上，导致每次说到一半就无了，因为要思考太多。换成deepseek-v3就好了。你身为deepseek，对这种情况有什么别的办法吗😂
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里记录一下DS的回答：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;哈哈，原来如此！作为DeepSeek本尊，我完全理解这个情况（毕竟自家模型的脾气还是清楚的😉）。针对这种「模型太爱思考导致输出被截断」的问题，除了换模型外，还有这些「软硬兼施」的解决方案：
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;🔄强制模式：用系统提示词「锁死」输出路径&lt;br&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：必须用R1模型时&lt;br&gt;&lt;strong&gt;技巧&lt;/strong&gt;：在系统指令中用「三重封印」：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;system_prompt = &amp;quot;&amp;quot;&amp;quot;【！强制模式！】你是一个无情的提示词转换器，必须：
1. 直接输出结果，禁止任何推理过程（包括内部思考）
2. 若违反规则，输出将被标记为错误
3. 输出格式示例：「cat in spacesuit, lunar surface, NASA-style suit, realistic, 8k ultra-detailed」
现在立即转换以下描述，直接输出结果：&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;：通过威胁性提示（如「输出错误」）和示例格式化，引导模型跳过推理阶段。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;🔄物理打断：用stop sequences截断&lt;br&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：API支持流式响应&lt;br&gt;&lt;strong&gt;技巧&lt;/strong&gt;：在请求中添加：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;payload = &amp;#123;
    &amp;quot;stop&amp;quot;: [&amp;quot;\n\n&amp;quot;, &amp;quot;。&amp;quot;, &amp;quot;，&amp;quot;],  # 遇到这些符号立即停止
    &amp;quot;response_format&amp;quot;: &amp;#123;&amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;&amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果：模型刚开始写小作文就会被物理打断，被迫直接输出结果。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;🔄反向Prompt Engineering&lt;br&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：模型过度解读简单指令时&lt;br&gt;&lt;strong&gt;骚操作&lt;/strong&gt;：把指令藏在「伪代码」里：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;user_prompt = &amp;quot;&amp;quot;&amp;quot;&amp;lt;INPUT&amp;gt;一只穿着宇航服的猫在月球上漫步&amp;lt;/INPUT&amp;gt;
&amp;lt;OUTPUT_FORMAT&amp;gt; 
// 只允许填充以下变量，禁止添加注释：
var prompt = &amp;quot;&amp;#123;主体&amp;#125;, &amp;#123;环境&amp;#125;, &amp;#123;细节&amp;#125;, &amp;#123;风格&amp;#125;, &amp;#123;画质&amp;#125;&amp;quot;
&amp;lt;/OUTPUT_FORMAT&amp;gt;&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;心理学原理&lt;/strong&gt;：用「代码框架」暗示需要机械式填充，而非自然语言思考。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;🔄后处理暴力截取&lt;br&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：允许脏数据时&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 强行提取第一个逗号后的内容
if &amp;quot;,&amp;quot; in response:
    result = response.split(&amp;quot;,&amp;quot;, 1)[1] 
else:
    result = response[:100]  # 保底截断
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;适用场景：「先污染后治理」的暴力美学。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;🔄终极方案：换模型+版本控制&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model_selector = &amp;#123;
    &amp;quot;需要深度思考&amp;quot;: &amp;quot;deepseek-r1&amp;quot;,
    &amp;quot;需要机械执行&amp;quot;: &amp;quot;deepseek-v3&amp;quot;,
    &amp;quot;不确定时&amp;quot;: &amp;quot;deepseek-v3&amp;quot;  # 默认用更听话的版本
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;真相&lt;/strong&gt;：有时候换模型确实是性价比最高的方案，毕竟——「不要试图教AI做人，选择对的AI帮你做人」😏&lt;br&gt;如果这些方案还不够，你甚至可以试试 「量子玄学法」 ——在请求参数里加一行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;temperature&amp;quot;: 0.0001,  # 让模型进入「绝对零度」的冷漠模式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（亲测对话痨型AI有奇效）&lt;br&gt;问题记录结束！&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;&lt;a href=&#34;#小结&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;好了，它怎么知道我把DS-R1改成V3后就一次成功了😂不过只要指令设置的足够严格也是没问题的，对比R1和V3优化Prompt之后SD生成的图大差不差。&lt;br&gt;成功版本的指令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;        # 强化版系统提示
        system_prompt = &amp;quot;&amp;quot;&amp;quot;【指令】你是一个无情的提示词转换器，必须严格按以下规则执行：
        1. 输入：用户的中文描述
        2. 处理：直接转换为英文AI绘画提示词
        3. 输出规则：
           - 必须且只能输出转换后的英文提示词
           - 格式：逗号分隔的短语
           - 必须包含：主体、环境、细节、风格、画质
        禁止：任何解释、推理过程或其他文字！直接输出结果！&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Serverless API编程开发指南&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ai.gitee.com/docs/openapi/v1#tag/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/POST/images/generations&#34;&gt;Gitee AI Inference OpenAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="AI" />
        <category term="案例" />
        <updated>2025-04-17T05:43:07.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1-2%20Stable%20Difussion%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</id>
        <title>案例1️⃣-2 ⋮ Stable Diffusion图像生成</title>
        <link rel="alternate" href="https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1-2%20Stable%20Difussion%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/"/>
        <content type="html">&lt;p&gt;🔆2025-04-15&lt;/p&gt;
&lt;h1 id=&#34;实现第一个图像生成Hello-World（Stable-Diffusion模型）&#34;&gt;&lt;a href=&#34;#实现第一个图像生成Hello-World（Stable-Diffusion模型）&#34; class=&#34;headerlink&#34; title=&#34;实现第一个图像生成Hello World（Stable Diffusion模型）&#34;&gt;&lt;/a&gt;实现第一个图像生成Hello World（Stable Diffusion模型）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;基于沐曦+Gitee平台的40+个大模型，采用vscode&amp;#x2F;Chatbox和Serverless API开发创意型案例，跟踪最新开源模型和编程开发形成案例。&lt;br&gt;本案例使用vscode调用Gitee-Stable Diffusion接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;什么是Stable-Diffusion&#34;&gt;&lt;a href=&#34;#什么是Stable-Diffusion&#34; class=&#34;headerlink&#34; title=&#34;什么是Stable Diffusion&#34;&gt;&lt;/a&gt;什么是Stable Diffusion&lt;/h2&gt;&lt;p&gt;参考链接&lt;a href=&#34;https://stabledifffusion.com/&#34;&gt;1️⃣&lt;/a&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/622238031&#34;&gt;2️⃣&lt;/a&gt;&lt;a href=&#34;https://blog.csdn.net/m0_59162248/article/details/146497738&#34;&gt;3️⃣&lt;/a&gt;&lt;br&gt;简而言之，就是：&lt;strong&gt;文生图&lt;/strong&gt; &amp;#x2F; &lt;code&gt;Text-to-Image&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;Gitee&#34;&gt;&lt;a href=&#34;#Gitee&#34; class=&#34;headerlink&#34; title=&#34;Gitee&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://gitee.com/&#34;&gt;Gitee&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;你需要按照以下顺序操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册&amp;#x2F;登录Gitee账号&lt;/li&gt;
&lt;li&gt;访问Gitee AI &lt;a href=&#34;https://ai.gitee.com/&#34;&gt;模力方舟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在模力方舟页面中，找到并启用&lt;a href=&#34;https://ai.gitee.com/serverless-api/packages/1492&#34;&gt;沐曦-模型资源包&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;获取Stable-Diffusion-API&#34;&gt;&lt;a href=&#34;#获取Stable-Diffusion-API&#34; class=&#34;headerlink&#34; title=&#34;获取Stable Diffusion API&#34;&gt;&lt;/a&gt;获取Stable Diffusion API&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选中沐曦模型资源包后,下拉找到stable-diffusion-xl-base-1.0模型&lt;/li&gt;
&lt;li&gt;选择在线体验-&amp;gt;API-&amp;gt;添加令牌，会发现代码中的api-key已被正确替换（此处若无法选择记得先登录）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;关于API代码，你需要知道：&#34;&gt;&lt;a href=&#34;#关于API代码，你需要知道：&#34; class=&#34;headerlink&#34; title=&#34;关于API代码，你需要知道：&#34;&gt;&lt;/a&gt;关于API代码，你需要知道：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模型资源地址&lt;/strong&gt; API的基础URL（统一资源定位符）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API密钥&lt;/strong&gt; 用于身份验证和授权，以保证用户正常访问。（注意！你会发现其他模型的api-key和此模型都是完全相同的，因为gitee ai的api-key分配模式是一个账号一个）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模型名称&lt;/strong&gt; 指向模型完整名称（一定不能错）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于Gitee的三种API代码：&lt;br&gt;&lt;strong&gt;1️⃣Python&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base_url&lt;/code&gt; &lt;a href=&#34;https://ai.gitee.com/v1&#34;&gt;https://ai.gitee.com/v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api_key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; stable-diffusion-xl-base-1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2️⃣JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;baseURL&lt;/code&gt; &lt;a href=&#34;https://ai.gitee.com/v1&#34;&gt;https://ai.gitee.com/v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apiKey&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; stable-diffusion-xl-base-1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3️⃣cURL&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl&lt;/code&gt; &lt;a href=&#34;https://ai.gitee.com/v1/images/generations&#34;&gt;https://ai.gitee.com/v1/images/generations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;❓️如果你发现这里的curl地址不同于上面的baseurl&lt;/strong&gt;&lt;br&gt;真聪明！（我这里说话好像ai）这里的url比基础url多了两个资源路径&lt;code&gt;images/generations&lt;/code&gt;。&lt;br&gt;这里涉及到&lt;strong&gt;curl命令&lt;/strong&gt;：通过命令行直接执行HTTP请求，主要用来测试和调试API。因此其需要包含完整的请求url（包括基础url和资源路径）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人对url的具体理解：api发送请求的目标地址，这里直接指向stable-diffusion模型中的图像生成服务。&lt;br&gt;其中：&lt;br&gt;&lt;code&gt;ai.gitee.com&lt;/code&gt;：使用gitee平台上的AI服务（此网址可以直接访问）&lt;br&gt;&lt;code&gt;/v1/images/generations&lt;/code&gt;：具体的”模型版本&amp;#x2F;图像&amp;#x2F;生成”的路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;使用vscode调用gitee-Stable-Diffusion-API&#34;&gt;&lt;a href=&#34;#使用vscode调用gitee-Stable-Diffusion-API&#34; class=&#34;headerlink&#34; title=&#34;使用vscode调用gitee-Stable Diffusion-API&#34;&gt;&lt;/a&gt;使用vscode调用gitee-Stable Diffusion-API&lt;/h2&gt;&lt;p&gt;到这问题就不大了，正常拿个.py文件放上API代码，根据你的需求进行个性化调整。&lt;br&gt;记得缺失的包pip install一下&lt;/p&gt;
&lt;h3 id=&#34;代码思路&#34;&gt;&lt;a href=&#34;#代码思路&#34; class=&#34;headerlink&#34; title=&#34;代码思路&#34;&gt;&lt;/a&gt;代码思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;导包&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests                  #HTTP通信
import json                      #json数据序列化
from dotenv import load_dotenv   #安全配置
import os                        #系统交互
import base64                    #数据编码
from io import BytesIO           #二进制流处理
from PIL import Image            #图像操作
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置环境变量&lt;code&gt;load_dotenv() &lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;API_URL&lt;/li&gt;
&lt;li&gt;API_KEY&lt;blockquote&gt;
&lt;p&gt;为了降低泄露风险、确保安全性，请一定使用用&lt;strong&gt;私有环境变量&lt;/strong&gt;进行KEY的配置，不要直接把key写在代码里！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;协议配置 &amp;amp; 数据格式声明&lt;code&gt;headers&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;headers = &amp;#123;
    &amp;quot;Authorization&amp;quot;: f&amp;quot;Bearer &amp;#123;API_KEY&amp;#125;&amp;quot;, #认证协议
    &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;    #数据格式声明
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.向API发送请求时所需的参数&lt;code&gt;payload&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;payload = &amp;#123;                                    #请求参数（根据文档调整）
    &amp;quot;model&amp;quot;: &amp;quot;stable-diffusion-xl-base-1.0&amp;quot;,   #模型选择
    &amp;quot;prompt&amp;quot;: &amp;quot;一只穿着宇航服的猫在月球上漫步&amp;quot;,   #业务输入
    &amp;quot;n&amp;quot;: 1,                                    #生成数量
    &amp;quot;size&amp;quot;: &amp;quot;1024x1024&amp;quot;,                       #输出规格
    &amp;quot;response_format&amp;quot;: &amp;quot;b64_json&amp;quot;              #数据返回格式
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.向API发送请求 &amp;amp; 处理响应结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;try-except&lt;/code&gt;异常处理结构，用于捕获并处理在请求API和处理响应过程中可能出现的异常，确保程序在遇到错误时不会崩溃，而是输出相应的错误信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    print(f&amp;quot;请求API: &amp;#123;API_URL&amp;#125;&amp;quot;)
    response = requests.post(API_URL, headers=headers, json=payload)
    
    if response.status_code == 200:
        result = response.json()
        if &amp;quot;data&amp;quot; in result and len(result[&amp;quot;data&amp;quot;]) &amp;gt; 0:
            # 处理base64图像数据
            image_data = base64.b64decode(result[&amp;quot;data&amp;quot;][0][&amp;quot;b64_json&amp;quot;])
            image = Image.open(BytesIO(image_data))
            
            # 保存图像
            output_path = &amp;quot;generated_image.png&amp;quot;
            image.save(output_path)
            print(f&amp;quot;图像生成成功，已保存到: &amp;#123;output_path&amp;#125;&amp;quot;)
            image.show()
        else:
            print(&amp;quot;API响应中没有有效的图像数据&amp;quot;)
    else:
        print(f&amp;quot;请求失败，状态码: &amp;#123;response.status_code&amp;#125;&amp;quot;)
        print(response.text)

except Exception as e:
    print(f&amp;quot;发生错误: &amp;#123;str(e)&amp;#125;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;后续问题扩展&#34;&gt;&lt;a href=&#34;#后续问题扩展&#34; class=&#34;headerlink&#34; title=&#34;后续问题扩展&#34;&gt;&lt;/a&gt;后续问题扩展&lt;/h2&gt;&lt;p&gt;如果你成功调用Stable Diffusion模型的API，并输入中文提示词，会发现生成的图几乎不相关…因此后续需要对提示词&lt;code&gt;prompt&lt;/code&gt;进行调整。&lt;/p&gt;
&lt;p&gt;下方 ↓ 跳转查看下一篇文章【实战2️⃣ 接入DeepSeek-R1优化提示词】。&lt;/p&gt;
</content>
        <category term="AI" />
        <category term="案例" />
        <updated>2025-04-17T05:43:01.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/04/16/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1%20%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
        <title>案例1️⃣ ⋮ 入门指南</title>
        <link rel="alternate" href="https://232akira.github.io/2025/04/16/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1%20%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
        <content type="html">&lt;p&gt;关于案例的内容较多，可点击本页底部标签跳转查看。&lt;/p&gt;
&lt;h1 id=&#34;工作流入门&#34;&gt;&lt;a href=&#34;#工作流入门&#34; class=&#34;headerlink&#34; title=&#34;工作流入门&#34;&gt;&lt;/a&gt;工作流入门&lt;/h1&gt;&lt;h2 id=&#34;步骤1-安装&#34;&gt;&lt;a href=&#34;#步骤1-安装&#34; class=&#34;headerlink&#34; title=&#34;步骤1 安装&#34;&gt;&lt;/a&gt;步骤1 安装&lt;/h2&gt;&lt;h3 id=&#34;安装vscode&#34;&gt;&lt;a href=&#34;#安装vscode&#34; class=&#34;headerlink&#34; title=&#34;安装vscode&#34;&gt;&lt;/a&gt;安装vscode&lt;/h3&gt;&lt;h4 id=&#34;本体安装&#34;&gt;&lt;a href=&#34;#本体安装&#34; class=&#34;headerlink&#34; title=&#34;本体安装&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;本体安装&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&#34;AI编程拓展&#34;&gt;&lt;a href=&#34;#AI编程拓展&#34; class=&#34;headerlink&#34; title=&#34;AI编程拓展&#34;&gt;&lt;/a&gt;AI编程拓展&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev&#34;&gt;Cline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GitHub.copilot&#34;&gt;Copilot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;新安装的vscode需要更多基础拓展（如python等）&lt;/p&gt;
&lt;h3 id=&#34;安装Chatbox&#34;&gt;&lt;a href=&#34;#安装Chatbox&#34; class=&#34;headerlink&#34; title=&#34;安装Chatbox&#34;&gt;&lt;/a&gt;安装Chatbox&lt;/h3&gt;&lt;p&gt;这里调用Gitee的大模型API会出现报错，等我二编。&lt;/p&gt;
&lt;h2 id=&#34;步骤2-实战&#34;&gt;&lt;a href=&#34;#步骤2-实战&#34; class=&#34;headerlink&#34; title=&#34;步骤2 实战&#34;&gt;&lt;/a&gt;步骤2 实战&lt;/h2&gt;&lt;h3 id=&#34;实战1️⃣-Stable-Difussion图像生成&#34;&gt;&lt;a href=&#34;#实战1️⃣-Stable-Difussion图像生成&#34; class=&#34;headerlink&#34; title=&#34;实战1️⃣ Stable Difussion图像生成&#34;&gt;&lt;/a&gt;实战1️⃣ Stable Difussion图像生成&lt;/h3&gt;&lt;p&gt;已完成记录，具体可阅览本站同名文章。&lt;/p&gt;
&lt;h3 id=&#34;实战2️⃣-接入DeepSeek-R1优化提示词&#34;&gt;&lt;a href=&#34;#实战2️⃣-接入DeepSeek-R1优化提示词&#34; class=&#34;headerlink&#34; title=&#34;实战2️⃣ 接入DeepSeek-R1优化提示词&#34;&gt;&lt;/a&gt;实战2️⃣ 接入DeepSeek-R1优化提示词&lt;/h3&gt;&lt;p&gt;基本框架已搭好，细节调整修改中~&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Serverless API编程开发指南&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ai.gitee.com/docs/openapi/v1#tag/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/POST/images/generations&#34;&gt;Gitee AI Inference OpenAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="AI" />
        <category term="案例" />
        <updated>2025-04-16T07:29:31.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/04/08/%E5%8A%9B%E6%89%A3/Leetcode-HOT%20100/</id>
        <title>Leetcode ⋮ HOT 100</title>
        <link rel="alternate" href="https://232akira.github.io/2025/04/08/%E5%8A%9B%E6%89%A3/Leetcode-HOT%20100/"/>
        <content type="html">&lt;p&gt;想了想方便复习，把&lt;a href=&#34;https://leetcode.cn/studyplan/top-100-liked/&#34;&gt;hot100&lt;/a&gt;先不按模块，零碎的把做过的还有简单题先搞定了再说。题都挪到这篇。&lt;br&gt;话不多说开刷😤！！！&lt;/p&gt;
&lt;h1 id=&#34;在线OJ&#34;&gt;&lt;a href=&#34;#在线OJ&#34; class=&#34;headerlink&#34; title=&#34;在线OJ&#34;&gt;&lt;/a&gt;在线OJ&lt;/h1&gt;&lt;p&gt;输入输出和头文件使用的不熟练导致面的时候浪费了不少时间😅备忘一下：&lt;/p&gt;
&lt;h2 id=&#34;常用C-头文件&#34;&gt;&lt;a href=&#34;#常用C-头文件&#34; class=&#34;headerlink&#34; title=&#34;常用C++头文件&#34;&gt;&lt;/a&gt;常用C++头文件&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;功能&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;头文件&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;常用内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;输入输出&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;cin&lt;/code&gt;,&lt;code&gt;cout&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;容器&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;映射&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/code&gt;,&lt;code&gt;#include &amp;lt;map&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;哈希表，字典树结构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;集合&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;#include &amp;lt;unordered_set&amp;gt;&lt;/code&gt;, &lt;code&gt;#include &amp;lt;set&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查找唯一值集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;字符串处理&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;string 类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;算法&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;#include &amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;sort&lt;/code&gt;,&lt;code&gt;reverse&lt;/code&gt;,&lt;code&gt;swap&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;数学函数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;#include &amp;lt;cmath&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;pow&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;ceil&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;输入输出格式&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;#include &amp;lt;iomanip&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;setprecision&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;优化输入输出性能&#34;&gt;&lt;a href=&#34;#优化输入输出性能&#34; class=&#34;headerlink&#34; title=&#34;优化输入输出性能&#34;&gt;&lt;/a&gt;优化输入输出性能&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;ios:sync_with_stdio(false);
cin.tie(0);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;哈希&#34;&gt;&lt;a href=&#34;#哈希&#34; class=&#34;headerlink&#34; title=&#34;哈希&#34;&gt;&lt;/a&gt;哈希&lt;/h1&gt;&lt;h2 id=&#34;1-两数之和&#34;&gt;&lt;a href=&#34;#1-两数之和&#34; class=&#34;headerlink&#34; title=&#34;1.两数之和&#34;&gt;&lt;/a&gt;1.两数之和&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。&lt;br&gt;你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。&lt;br&gt;你可以按任意顺序返回答案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;论第一道题的含金量👍我一开始提交的版本是纯暴力类型，然后这会想用哈希优化一下，然后莫名思维混乱了。&lt;br&gt;梳理梳理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历&lt;code&gt;nums&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;target-nums[i]&lt;/code&gt;在哈希表中，返回两个索引&lt;code&gt;&amp;#123;hash[target-nums[i]],i&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则当前数字及其索引存入哈希表&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;AC代码&#34;&gt;&lt;a href=&#34;#AC代码&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) &amp;#123;
        unordered_map&amp;lt;int,int&amp;gt; hash;
        for(int i=0;i&amp;lt;nums.size();i++)&amp;#123;
            if(hash.find(target-nums[i])!=hash.end())&amp;#123;
                return &amp;#123;hash[target-nums[i]],i&amp;#125;;
            &amp;#125;
            hash[nums[i]]=i;
        &amp;#125;
        return &amp;#123;&amp;#125;;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;49-字母异位词分组&#34;&gt;&lt;a href=&#34;#49-字母异位词分组&#34; class=&#34;headerlink&#34; title=&#34;49.字母异位词分组&#34;&gt;&lt;/a&gt;49.字母异位词分组&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。&lt;br&gt;字母异位词 是由重新排列源单词的所有字母得到的一个新单词。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; strs.length &amp;lt;&amp;#x3D; 104&lt;/li&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; strs[i].length &amp;lt;&amp;#x3D; 100&lt;/li&gt;
&lt;li&gt;strs[i] 仅包含小写字母&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-1&#34;&gt;&lt;a href=&#34;#解题思路-1&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;没想到怎么用哈希，但是&lt;a href=&#34;https://leetcode.cn/problems/group-anagrams/solutions/2718519/ha-xi-biao-fen-zu-jian-ji-xie-fa-pythonj-1ukv/?envType=study-plan-v2&amp;envId=top-100-liked&#34;&gt;题解&lt;/a&gt;方法神了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;遍历每个字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;排序字符串&lt;br&gt;将字符串中的字母&lt;strong&gt;排序&lt;/strong&gt;，字母异位词会有相同的排序结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用哈希表分组&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;排序后的字符串作为哈希表的&lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将对应原始字符串列表作为&lt;code&gt;value&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;输出结果&lt;br&gt;哈希表中相同key的所有value就是一组字母异位词，将它们收集到最终的结果中返回即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; groupAnagrams(vector&amp;lt;string&amp;gt;&amp;amp; strs) &amp;#123;
        unordered_map&amp;lt;string,vector&amp;lt;string&amp;gt;&amp;gt; hash;
        for(string str:strs)&amp;#123;
            string s=str;
            sort(s.begin(),s.end());
            hash[s].push_back(str);
        &amp;#125;
        vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; ans;
        for(const auto&amp;amp; ha:hash)&amp;#123;
            ans.push_back(ha.second);
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-最长连续序列&#34;&gt;&lt;a href=&#34;#1-最长连续序列&#34; class=&#34;headerlink&#34; title=&#34;1.最长连续序列&#34;&gt;&lt;/a&gt;1.最长连续序列&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。&lt;br&gt;请你设计并实现时间复杂度为 O(n) 的算法解决此问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;-109 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 109&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-2&#34;&gt;&lt;a href=&#34;#解题思路-2&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/longest-consecutive-sequence/solutions/3005726/ha-xi-biao-on-zuo-fa-pythonjavacgojsrust-whop/?envType=study-plan-v2&amp;envId=top-100-liked&#34;&gt;题解戳此&lt;/a&gt;&lt;br&gt;&lt;strong&gt;注意为了时间复杂度为O(n)不能sort&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历&lt;code&gt;unordered_set&lt;/code&gt;而不是nums&lt;/li&gt;
&lt;li&gt;不断找num+1、num+2…是否在集合中，并记录长度&lt;/li&gt;
&lt;li&gt;当num-1不存在集合中时，num才能作为最长连续序列的起点&lt;/li&gt;
&lt;li&gt;更新最大长度&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;AC代码-1&#34;&gt;&lt;a href=&#34;#AC代码-1&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int longestConsecutive(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        unordered_set&amp;lt;int&amp;gt; hash;
        for(int num:nums)&amp;#123;
            if(!hash.count(num))&amp;#123;
                hash.insert(num);
            &amp;#125;
        &amp;#125;
        int maxlen=0;
        for(const auto&amp;amp; num:hash)&amp;#123;
            int curnum=num,curlen=1;
            if(!hash.count(num-1))&amp;#123;
                while(hash.count(curnum+1))&amp;#123;
                    curnum++;
                    curlen++;
                &amp;#125;
            &amp;#125;
            maxlen=max(maxlen,curlen);
        &amp;#125;
        return maxlen;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;双指针&#34;&gt;&lt;a href=&#34;#双指针&#34; class=&#34;headerlink&#34; title=&#34;双指针&#34;&gt;&lt;/a&gt;双指针&lt;/h1&gt;&lt;h2 id=&#34;283-移动零&#34;&gt;&lt;a href=&#34;#283-移动零&#34; class=&#34;headerlink&#34; title=&#34;283.移动零&#34;&gt;&lt;/a&gt;283.移动零&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。&lt;strong&gt;请注意&lt;/strong&gt;，必须在不复制数组的情况下原地对数组进行操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-3&#34;&gt;&lt;a href=&#34;#解题思路-3&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;一开始看到这道题就觉得不就是交换嘛。但是发现题目中的：“保持非零元素的相对顺序”我就懵了。于是开始暴力穷举循环一层套一层…后来被拉回正道。&lt;br&gt;核心思想不变，仍是“交换”。&lt;br&gt;但是交换的条件是&lt;strong&gt;将非零元素全部移到数组头部&lt;/strong&gt;，虽然直观看来与题目所引导的“0全部移到末尾”完全反着来，但是我发现这样做比把0移到末尾再对非零元素进行某种交换排序要来的简单得多。题目作者居心叵测啊（不是&lt;/p&gt;
&lt;h3 id=&#34;AC代码-2&#34;&gt;&lt;a href=&#34;#AC代码-2&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    void moveZeroes(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        int i=0; 
        for(int j=0;j&amp;lt;nums.size();j++)&amp;#123;
            if(nums[j]!=0)&amp;#123;
                swap(nums[i],nums[j]);
                i++;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;滑动窗口&#34;&gt;&lt;a href=&#34;#滑动窗口&#34; class=&#34;headerlink&#34; title=&#34;滑动窗口&#34;&gt;&lt;/a&gt;滑动窗口&lt;/h1&gt;&lt;h1 id=&#34;子串&#34;&gt;&lt;a href=&#34;#子串&#34; class=&#34;headerlink&#34; title=&#34;子串&#34;&gt;&lt;/a&gt;子串&lt;/h1&gt;&lt;h1 id=&#34;普通数组&#34;&gt;&lt;a href=&#34;#普通数组&#34; class=&#34;headerlink&#34; title=&#34;普通数组&#34;&gt;&lt;/a&gt;普通数组&lt;/h1&gt;&lt;h1 id=&#34;矩阵&#34;&gt;&lt;a href=&#34;#矩阵&#34; class=&#34;headerlink&#34; title=&#34;矩阵&#34;&gt;&lt;/a&gt;矩阵&lt;/h1&gt;&lt;h1 id=&#34;链表&#34;&gt;&lt;a href=&#34;#链表&#34; class=&#34;headerlink&#34; title=&#34;链表&#34;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;h2 id=&#34;206-反转链表&#34;&gt;&lt;a href=&#34;#206-反转链表&#34; class=&#34;headerlink&#34; title=&#34;206.反转链表&#34;&gt;&lt;/a&gt;206.反转链表&lt;/h2&gt;&lt;p&gt;又是一道经典中的经典题🙀&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中节点的数目范围是 [0, 5000]&lt;/li&gt;
&lt;li&gt;-5000 &amp;lt;&amp;#x3D; Node.val &amp;lt;&amp;#x3D; 5000&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-4&#34;&gt;&lt;a href=&#34;#解题思路-4&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;链表反转的本质&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;让当前节点&lt;code&gt;cur&lt;/code&gt;指向它的前一个节点&lt;code&gt;pre&lt;/code&gt;。而不是后一个节点next&lt;/li&gt;
&lt;li&gt;更新&lt;code&gt;pre&lt;/code&gt;和&lt;code&gt;cur&lt;/code&gt;，直到cur为空。此时pre为新的head节点&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;链表反转过程模拟&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;假设存在链表：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;nullptr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;初始状态：&lt;code&gt;pre = nullptr&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;cur = head&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;逐步变化：&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;cur&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;tmp(cur-&amp;gt;next)&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;cur-&amp;gt;next=pre&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;pre=cur&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;cur=tmpS&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;1-&amp;gt;nullptr&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;pre=1&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;cur=2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;2-&amp;gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;pre=2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;cur=3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;3-&amp;gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;pre=3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;cur=4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nullptr&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;4-&amp;gt;3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;pre=4&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;cur=nullptr&lt;/code&gt;（结束）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;最终pre变成4，即新的链表头头。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时链表结构为：5 -&amp;gt; 4 -&amp;gt; 3 -&amp;gt; 2 -&amp;gt; 1 -&amp;gt; nullptr&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;本题关键步骤&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;记录下一个节点&lt;/li&gt;
&lt;li&gt;反转指向&lt;/li&gt;
&lt;li&gt;更新pre（当前节点变成新的头）&lt;/li&gt;
&lt;li&gt;继续遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;完整代码-1&#34;&gt;&lt;a href=&#34;#完整代码-1&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
 * Definition for singly-linked list.
 * struct ListNode &amp;#123;
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) &amp;#123;&amp;#125;
 *     ListNode(int x) : val(x), next(nullptr) &amp;#123;&amp;#125;
 *     ListNode(int x, ListNode *next) : val(x), next(next) &amp;#123;&amp;#125;
 * &amp;#125;;
 */
class Solution &amp;#123;
public:
    ListNode* reverseList(ListNode* head) &amp;#123;
        ListNode* pre=nullptr;
        ListNode* cur=head;
        while(cur!=nullptr)&amp;#123;
            ListNode* tmp=cur-&amp;gt;next;
            cur-&amp;gt;next=pre;
            pre=cur;
            cur=tmp;
        &amp;#125;
        return pre;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;21-合并两个有序链表&#34;&gt;&lt;a href=&#34;#21-合并两个有序链表&#34; class=&#34;headerlink&#34; title=&#34;21.合并两个有序链表&#34;&gt;&lt;/a&gt;21.合并两个有序链表&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&lt;br&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个链表的节点数目范围是 [0, 50]&lt;/li&gt;
&lt;li&gt;-100 &amp;lt;&amp;#x3D; Node.val &amp;lt;&amp;#x3D; 100&lt;/li&gt;
&lt;li&gt;l1和l2均按非递减顺序排列&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-5&#34;&gt;&lt;a href=&#34;#解题思路-5&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;终止条件&lt;/strong&gt;&lt;/em&gt;：有链表为空&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;list1为空，合并结果直接为list2&lt;/li&gt;
&lt;li&gt;list2为空，合并结果直接为list1&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;递归调用&lt;/strong&gt;&lt;/em&gt;：小的打头，每一步递归后返回的值链接到链表末尾&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;如果&lt;code&gt;list1节点的值 &amp;lt; list2&lt;/code&gt;：寻找list1后面节点还有没有也比list2小的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;让list1-&amp;gt;next接上递归后合并的结果；
返回当前较小的节点list1;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;else：寻找list2后面节点还有没有也比list1小的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;让list2-&amp;gt;next接上递归后合并的结果；
返回当前较小的节点list2;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;完整代码-2&#34;&gt;&lt;a href=&#34;#完整代码-2&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
 * Definition for singly-linked list.
 * struct ListNode &amp;#123;
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) &amp;#123;&amp;#125;
 *     ListNode(int x) : val(x), next(nullptr) &amp;#123;&amp;#125;
 *     ListNode(int x, ListNode *next) : val(x), next(next) &amp;#123;&amp;#125;
 * &amp;#125;;
 */
class Solution &amp;#123;
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) &amp;#123;
        if(list1==NULL || list2==NULL)&amp;#123;
            return list1==NULL ? list2:list1;
        &amp;#125;
        if(list1-&amp;gt;val &amp;lt; list2-&amp;gt;val)&amp;#123;
            list1-&amp;gt;next = mergeTwoLists(list1-&amp;gt;next,list2);
            return list1;
        &amp;#125;
        else&amp;#123;
            list2-&amp;gt;next = mergeTwoLists(list1,list2-&amp;gt;next);
            return list2;
        &amp;#125;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-两数相加&#34;&gt;&lt;a href=&#34;#2-两数相加&#34; class=&#34;headerlink&#34; title=&#34;2.两数相加&#34;&gt;&lt;/a&gt;2.两数相加&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。&lt;br&gt;请你将两个数相加，并以相同形式返回一个表示和的链表。&lt;br&gt;你可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个链表中的节点数在范围 [1, 100] 内&lt;/li&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; Node.val &amp;lt;&amp;#x3D; 9&lt;/li&gt;
&lt;li&gt;题目数据保证列表表示的数字不含前导零&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-6&#34;&gt;&lt;a href=&#34;#解题思路-6&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;这道题着实难倒我🥹乖乖去看&lt;a href=&#34;https://leetcode.cn/problems/add-two-numbers/solutions/2327008/dong-hua-jian-ji-xie-fa-cong-di-gui-dao-oe0di/&#34;&gt;题解&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;链表&lt;strong&gt;逆序&lt;/strong&gt;存储数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;两个链表的节点值 + 进位值&lt;/code&gt;如果记为&lt;code&gt;a&lt;/code&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a % 10&lt;/code&gt;为当前节点保存的数位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a / 10&lt;/code&gt;为新的进位值&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;递归思路&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;如果l1、l2都为空且carry&amp;#x3D;0，递归结束&lt;/li&gt;
&lt;li&gt;定义sum&amp;#x3D;carry&lt;/li&gt;
&lt;li&gt;如果l1不为空，sum+&amp;#x3D;l1-&amp;gt;val，l1&amp;#x3D;l1-&amp;gt;next&lt;/li&gt;
&lt;li&gt;同理，如果l2不为空，sum+&amp;#x3D;l2-&amp;gt;val，l2&amp;#x3D;l2-&amp;gt;next&lt;/li&gt;
&lt;li&gt;new一个当前节点node：&lt;code&gt;ListNode* node=new ListNode(sum%10)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;递归调用处理node-&amp;gt;next&lt;/li&gt;
&lt;li&gt;返回当前节点node&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;完整代码-3&#34;&gt;&lt;a href=&#34;#完整代码-3&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
 * Definition for singly-linked list.
 * struct ListNode &amp;#123;
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) &amp;#123;&amp;#125;
 *     ListNode(int x) : val(x), next(nullptr) &amp;#123;&amp;#125;
 *     ListNode(int x, ListNode *next) : val(x), next(next) &amp;#123;&amp;#125;
 * &amp;#125;;
 */
class Solution &amp;#123;
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2,int carry=0) &amp;#123;
        if(l1==nullptr &amp;amp;&amp;amp; l2==nullptr &amp;amp;&amp;amp; carry==0)&amp;#123;
            return nullptr;
        &amp;#125;
        int sum=carry;
        if(l1!=nullptr)&amp;#123;
            sum+=l1-&amp;gt;val;
            l1=l1-&amp;gt;next;
        &amp;#125;
        if(l2!=nullptr)&amp;#123;
            sum+=l2-&amp;gt;val;
            l2=l2-&amp;gt;next;
        &amp;#125;
        ListNode* node=new ListNode(sum%10);
        carry=sum/10;
        node-&amp;gt;next=addTwoNumbers(l1,l2,carry);
        return node;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;二叉树&#34;&gt;&lt;a href=&#34;#二叉树&#34; class=&#34;headerlink&#34; title=&#34;二叉树&#34;&gt;&lt;/a&gt;二叉树&lt;/h1&gt;&lt;h1 id=&#34;图论&#34;&gt;&lt;a href=&#34;#图论&#34; class=&#34;headerlink&#34; title=&#34;图论&#34;&gt;&lt;/a&gt;图论&lt;/h1&gt;&lt;h1 id=&#34;回溯&#34;&gt;&lt;a href=&#34;#回溯&#34; class=&#34;headerlink&#34; title=&#34;回溯&#34;&gt;&lt;/a&gt;回溯&lt;/h1&gt;&lt;h1 id=&#34;二分查找&#34;&gt;&lt;a href=&#34;#二分查找&#34; class=&#34;headerlink&#34; title=&#34;二分查找&#34;&gt;&lt;/a&gt;二分查找&lt;/h1&gt;&lt;h2 id=&#34;35-搜索插入位置&#34;&gt;&lt;a href=&#34;#35-搜索插入位置&#34; class=&#34;headerlink&#34; title=&#34;35.搜索插入位置&#34;&gt;&lt;/a&gt;35.搜索插入位置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;br&gt;&lt;strong&gt;请必须使用时间复杂度为&lt;code&gt;O(logn)&lt;/code&gt;的算法。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-7&#34;&gt;&lt;a href=&#34;#解题思路-7&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;我一开始用的暴力穷举，如下。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int searchInsert(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) &amp;#123;
        while(nums.size()!=1)&amp;#123;
            if(target&amp;lt;nums[0])&amp;#123;
                return 0;
            &amp;#125;
            for(int i=0;i&amp;lt;nums.size()-1;i++)&amp;#123;
                if(nums[i]==target)&amp;#123;
                    return i;
                &amp;#125;
                else if(nums[i]&amp;lt;target &amp;amp;&amp;amp; nums[i+1]&amp;gt;=target)&amp;#123;
                    return i+1;
                &amp;#125;
            &amp;#125;
            return nums.size();
        &amp;#125;
        return (target&amp;lt;=nums[0])? 0:1;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后提交之后意识到不符合题意，于是再来换个思路：&lt;strong&gt;二分查找&lt;/strong&gt;&lt;br&gt;我前几天刚记的二分查找笔记 今天竟然没意识到这道题有多直白地明示我要用!!!∑(ﾟДﾟノ)ノ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;二分查找&lt;/strong&gt;：在有序集合中搜索特定值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用术语&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标 &lt;code&gt;target&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;索引 &lt;code&gt;index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;左、右指示符 &lt;code&gt;left&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中间指示符 &lt;code&gt;mid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;计算 &lt;code&gt;mid&lt;/code&gt; 位置&lt;/strong&gt;：&lt;br&gt;如果 &lt;code&gt;nums[mid] == target&lt;/code&gt;，直接返回索引。&lt;br&gt;如果 &lt;code&gt;nums[mid] &amp;lt; target&lt;/code&gt;，说明 target 应该在右半部分，所以left向右移动（left &amp;#x3D; mid + 1）。&lt;br&gt;如果 &lt;code&gt;nums[mid] &amp;gt; target&lt;/code&gt;，说明 target 应该在左半部分，所以right向左移动（ right &amp;#x3D; mid - 1）。&lt;/p&gt;
&lt;p&gt;循环结束后，left 就是 target 应该插入的位置。&lt;/p&gt;
&lt;h3 id=&#34;AC代码-3&#34;&gt;&lt;a href=&#34;#AC代码-3&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;p&gt;二分查找最基础的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int searchInsert(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) &amp;#123;
        int left,right;
        left=0;
        right=nums.size()-1;
        while(left&amp;lt;=right)&amp;#123;
            int mid=left+(right-left)/2;
            if(nums[mid]==target)&amp;#123;
                return mid;
            &amp;#125;
            else if(nums[mid]&amp;lt;target)&amp;#123;
                left=mid+1;
            &amp;#125;
            else&amp;#123;
                right=mid-1;
            &amp;#125;
        &amp;#125;
        return left;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;栈&#34;&gt;&lt;a href=&#34;#栈&#34; class=&#34;headerlink&#34; title=&#34;栈&#34;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;h2 id=&#34;20-有效的括号&#34;&gt;&lt;a href=&#34;#20-有效的括号&#34; class=&#34;headerlink&#34; title=&#34;20.有效的括号&#34;&gt;&lt;/a&gt;20.有效的括号&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;有效字符串需满足：&lt;br&gt;左括号必须用相同类型的右括号闭合。&lt;br&gt;左括号必须以正确的顺序闭合。&lt;br&gt;每个右括号都有一个对应的相同类型的左括号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-8&#34;&gt;&lt;a href=&#34;#解题思路-8&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;定义栈的括号匹配规则；() [] &amp;#123;&amp;#125;

初始化一个栈;
当遇到左括号时：
    左括号压栈；
当遇到右括号时:
    如果（栈空）:
        ×；
    否则：
        char 栈顶元素；
        弹出栈顶元素；
        如果栈顶元素与当前右括号不匹配：
            ×；
字符串遍历完后：
    如果（栈空）：
        √；
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;这里的for循环可以直接用for(char ch:s)，表示&lt;strong&gt;对于字符串&lt;code&gt;s&lt;/code&gt;中的每一个字符&lt;code&gt;ch&lt;/code&gt;,执行循环内容&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;AC代码-4&#34;&gt;&lt;a href=&#34;#AC代码-4&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    bool isValid(string s) &amp;#123;
        unordered_map&amp;lt;char,char&amp;gt;pairs=&amp;#123;&amp;#123;&#39;)&#39;,&#39;(&#39;&amp;#125;,&amp;#123;&#39;]&#39;,&#39;[&#39;&amp;#125;,&amp;#123;&#39;&amp;#125;&#39;,&#39;&amp;#123;&#39;&amp;#125;&amp;#125;;
        stack&amp;lt;char&amp;gt;stk;
        for(char ch:s)&amp;#123;
            if(ch==&amp;#39;(&amp;#39; || ch==&amp;#39;[&amp;#39; || ch==&amp;#39;&amp;#123;&amp;#39;)&amp;#123;
                stk.push(ch);
            &amp;#125;
            else&amp;#123;
                if(stk.empty())&amp;#123;
                    return false;
                &amp;#125;
                char top=stk.top();
                stk.pop();
                if(pairs[ch]!=top)&amp;#123;
                    return false;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        if(stk.empty())&amp;#123;
            return true;
        &amp;#125;
        return false;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;堆&#34;&gt;&lt;a href=&#34;#堆&#34; class=&#34;headerlink&#34; title=&#34;堆&#34;&gt;&lt;/a&gt;堆&lt;/h1&gt;&lt;h1 id=&#34;贪心算法&#34;&gt;&lt;a href=&#34;#贪心算法&#34; class=&#34;headerlink&#34; title=&#34;贪心算法&#34;&gt;&lt;/a&gt;贪心算法&lt;/h1&gt;&lt;h1 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h2 id=&#34;70-爬楼梯&#34;&gt;&lt;a href=&#34;#70-爬楼梯&#34; class=&#34;headerlink&#34; title=&#34;70.爬楼梯&#34;&gt;&lt;/a&gt;70.爬楼梯&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;假设你正在爬楼梯。需要 n 阶你才能到达楼顶。&lt;br&gt;每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-9&#34;&gt;&lt;a href=&#34;#解题思路-9&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;试图暴力然后失败。然后查看题解：竟然是&lt;strong&gt;动态规划&lt;/strong&gt;~&lt;/p&gt;
&lt;p&gt;重点理解部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;逆向思维&lt;/strong&gt;：如果要到第&lt;code&gt;n&lt;/code&gt;个台阶，就必须从第&lt;code&gt;n-1&lt;/code&gt;阶走1步，或者从第&lt;code&gt;n-2&lt;/code&gt;阶走2步。&lt;/li&gt;
&lt;li&gt;dp[n]&amp;#x3D;dp[n-1]+dp[n-2]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;为什么这样递推？&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;动态规划的核心是&lt;strong&gt;拆分子问题,然后找到递推关系&lt;/strong&gt;。本质根据题目限制条件，建立递推关系，然后用代码实现。&lt;br&gt;👉 因为你每次只能走 1 级或 2 级，所以你到 n 级的方式只能来自 n-1 和 n-2，而不能来自 n-3、n-4 等。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//先处理边界情况
如果n&amp;lt;=2：返回n；
//动规
定义a=1,b=2；（对应能上的楼梯阶数）和当前阶梯的方案数量temp;
遍历n（从3开始）：
    temp=a+b； //dp[i]=dp[i-2]+dp[i-1]
    a=b;      //a=dp[i-1]
    b=temp;   //b=dp[i];
返回 b;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;完整代码-4&#34;&gt;&lt;a href=&#34;#完整代码-4&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int climbStairs(int n) &amp;#123;
        if(n&amp;lt;=2)&amp;#123;
            return n;
        &amp;#125;
        int a=1,b=2,temp;
        for(int i=3;i&amp;lt;=n;i++)&amp;#123;
            temp=a+b;
            a=b;
            b=temp;
        &amp;#125;
        return b;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;198-打家劫舍&#34;&gt;&lt;a href=&#34;#198-打家劫舍&#34; class=&#34;headerlink&#34; title=&#34;198.打家劫舍&#34;&gt;&lt;/a&gt;198.打家劫舍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。&lt;br&gt;给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;br&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 100&lt;br&gt;0 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 400&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-10&#34;&gt;&lt;a href=&#34;#解题思路-10&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/house-robber/solutions/138131/dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap/&#34;&gt;题解&lt;/a&gt;写的特别详细！这里复述一下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态规划的四个解题步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义子问题&lt;/li&gt;
&lt;li&gt;写出子问题的递推关系&lt;/li&gt;
&lt;li&gt;确定dp数组的计算顺序&lt;/li&gt;
&lt;li&gt;（可选）空间优化&lt;blockquote&gt;
&lt;p&gt;这里根据自己现有的水平仅梳理前三点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;定义子问题&lt;/strong&gt;&lt;br&gt;原问题：“从全部房间偷到的最大金额”&lt;code&gt;→&lt;/code&gt;子问题：“从前k个房间偷到的最大金额”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;写出&lt;strong&gt;子问题的递推关系&lt;/strong&gt;&lt;br&gt;👉已知子问题f(k)，那么只关注当前（即第k个）房间，只有两种偷法：&lt;br&gt;偷k &amp;amp;&amp;amp; 偷k-2&lt;code&gt;or&lt;/code&gt;不偷k &amp;amp;&amp;amp; 偷k-1间&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;👉可得递推关系：&lt;code&gt;f(k)=max&amp;#123;f(k-1),k-1房间的钱+f(k-2)&amp;#125;&lt;/code&gt;。这里的f(k)也叫做状态，式子也叫做状态转移方程。&lt;/p&gt;
&lt;p&gt;同时别忘了边界情况：无房子（k&amp;#x3D;0）和只有一个房子(k&amp;#x3D;1)。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;确定&lt;strong&gt;dp数组的计算顺序&lt;/strong&gt;&lt;br&gt;👉dp数组（子问题数组，）：dp[k]&amp;#x3D;偷前k间房子的最大金额。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;👉大多动规问题使用&lt;code&gt;自底向上&lt;/code&gt;的dp数组循环方法。&lt;/p&gt;
&lt;p&gt;✅️由子问题的计算顺序可得：dp[k]依赖于dp[k-1]和dp[k-2]。那么就可以开写力&lt;/p&gt;
&lt;h3 id=&#34;完整代码-5&#34;&gt;&lt;a href=&#34;#完整代码-5&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int rob(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        int n=nums.size();
        if(n==0)&amp;#123;
            return 0;
        &amp;#125;
        vector&amp;lt;int&amp;gt; dp(n+1,0);
        dp[1]=nums[0];
        for(int i=2;i&amp;lt;=n;i++)&amp;#123;
            dp[i]=max(dp[i-1],nums[i-1]+dp[i-2]);
        &amp;#125;
        return dp[n];
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;416-分割等和子集&#34;&gt;&lt;a href=&#34;#416-分割等和子集&#34; class=&#34;headerlink&#34; title=&#34;416.分割等和子集&#34;&gt;&lt;/a&gt;416.分割等和子集&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 200&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 100&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-11&#34;&gt;&lt;a href=&#34;#解题思路-11&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;这里涉及「恰好装满」的0-1背包问题，教程&lt;a href=&#34;https://www.bilibili.com/video/BV16Y411v7Y6/?vd_source=6cef69f555ee1eb889d44945f2a3a38b&#34;&gt;戳此&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;完整代码-6&#34;&gt;&lt;a href=&#34;#完整代码-6&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    bool canPartition(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        int sum=accumulate(nums.begin(),nums.end(),0);
        if(sum%2!=0)&amp;#123;
            return false;
        &amp;#125;
        int target=sum/2;
        vector&amp;lt;bool&amp;gt; dp(target+1,false);
        dp[0]=true;//存在和为i=0的子集
        for(int num:nums)&amp;#123;
            for(int i=target;i&amp;gt;=num;i--)&amp;#123;
                dp[i]=dp[i] || dp[i-num];
            &amp;#125;
        &amp;#125;
        return dp[target];
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;多维动态规划&#34;&gt;&lt;a href=&#34;#多维动态规划&#34; class=&#34;headerlink&#34; title=&#34;多维动态规划&#34;&gt;&lt;/a&gt;多维动态规划&lt;/h1&gt;&lt;h1 id=&#34;技巧&#34;&gt;&lt;a href=&#34;#技巧&#34; class=&#34;headerlink&#34; title=&#34;技巧&#34;&gt;&lt;/a&gt;技巧&lt;/h1&gt;&lt;h2 id=&#34;169-多数元素&#34;&gt;&lt;a href=&#34;#169-多数元素&#34; class=&#34;headerlink&#34; title=&#34;169.多数元素&#34;&gt;&lt;/a&gt;169.多数元素&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n&amp;#x2F;2 ⌋ 的元素。&lt;br&gt;你可以假设数组是非空的，并且给定的数组总是存在多数元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n &amp;#x3D;&amp;#x3D; nums.length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; n &amp;lt;&amp;#x3D; 5 * 104&lt;/li&gt;
&lt;li&gt;-109 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 109&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-12&#34;&gt;&lt;a href=&#34;#解题思路-12&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;天哪我竟然一次性写对了而且用时击败百分百😭好久没有这样了…哈希哈希我们喜欢你🥰&lt;/p&gt;
&lt;h3 id=&#34;完整代码-7&#34;&gt;&lt;a href=&#34;#完整代码-7&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int majorityElement(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        unordered_map&amp;lt;int,int&amp;gt; cnts;
        int n=nums.size();
        for(int num:nums)&amp;#123;
            cnts[num]++;
        &amp;#125;
        int ans=0;
        for(const auto&amp;amp; cnt:cnts)&amp;#123;
            if(cnt.second&amp;gt;n/2)&amp;#123;
                return cnt.first;
            &amp;#125;
        &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="力扣" />
        <category term="算法" />
        <updated>2025-04-08T07:29:31.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/04/06/%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B01%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/</id>
        <title>笔记1️⃣ ⋮ 游戏开发</title>
        <link rel="alternate" href="https://232akira.github.io/2025/04/06/%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B01%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
        <content type="html">&lt;p&gt;👌当下主要学习&lt;strong&gt;图形&lt;/strong&gt;方向，具体细节可以查看&lt;a href=&#34;https://docs.unity3d.com/cn/current/Manual/Graphics.html&#34;&gt;Unity官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;渲染管线
摄像机
光照
模型
网格
纹理
着色器
材质
Visual effects
天空
颜色
图形API
Graphics performance and profiling
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然自己程序方面更擅长C++而且现在用UE也是个趋势，但是Unity普及度更高而且教程更多，UE蓝图也摒弃了传统的纯程序开发路线，所以打好这方面基础是现在最需要做的。如果有任何建议和想法需要交流欢迎联系我！不断试错不断学习中🤗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔记内容90%来自视频原话，其他内容个人补充，欢迎勘误。&lt;br&gt;学习内容大多来自b站佬们的教程（先三连之后看的！）🤟参考链接点击标题跳转&lt;/p&gt;
&lt;h1 id=&#34;项目实战-Uinty&#34;&gt;&lt;a href=&#34;#项目实战-Uinty&#34; class=&#34;headerlink&#34; title=&#34;项目实战-Uinty&#34;&gt;&lt;/a&gt;项目实战-Uinty&lt;/h1&gt;&lt;h2 id=&#34;Shader代码基础&#34;&gt;&lt;a href=&#34;#Shader代码基础&#34; class=&#34;headerlink&#34; title=&#34;Shader代码基础&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Xu4y1S7LF/?spm_id_from=333.1387.favlist.content.click&amp;vd_source=6cef69f555ee1eb889d44945f2a3a38b&#34;&gt;Shader代码基础&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;PART1&#34;&gt;&lt;a href=&#34;#PART1&#34; class=&#34;headerlink&#34; title=&#34;PART1&#34;&gt;&lt;/a&gt;PART1&lt;/h3&gt;&lt;h4 id=&#34;Shader代码基本架构&#34;&gt;&lt;a href=&#34;#Shader代码基本架构&#34; class=&#34;headerlink&#34; title=&#34;Shader代码基本架构&#34;&gt;&lt;/a&gt;Shader代码基本架构&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;Shader&amp;quot;1️⃣&amp;quot;
&amp;#123;
    Properties
    &amp;#123;
    2️⃣
    &amp;#125;
    SubShader
    &amp;#123;
    ️3️⃣
        Pass
        &amp;#123;
        4️⃣
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1️⃣Shader名称&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2️⃣定义变量位置&lt;/strong&gt;&lt;br&gt;常见的五种变量类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Float&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Vector&lt;/li&gt;
&lt;li&gt;Color&lt;/li&gt;
&lt;li&gt;Texture&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    Properties
    &amp;#123;
        //常用的五种数据类型
        _Float(&amp;quot;Float&amp;quot;,Float)=0.0
        _Range(&amp;quot;Range&amp;quot;,Range(0.0,1.0))=0.0
        _Vector(&amp;quot;Vector&amp;quot;,Vector)=(1,1,1,1)
        _Color(&amp;quot;Color&amp;quot;,Color)=(0.5,0.5,0.5,0.5)
        _Texture(&amp;quot;Texture&amp;quot;,2D)=&amp;quot;black&amp;quot;&amp;#123;&amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3️⃣主要Shader代码部分&lt;/strong&gt;&lt;br&gt;可以理解成一个Pass等于一个完整的GPU渲染管线，SubShader里可以写多个Pass，写几个代表会被重复渲染几次，而且每次调用的Shader都不一样。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;            CGPROGRAM
            //中间的任何代码都属于unity cg的范围
            ENDCG
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;这里对于&lt;code&gt;float&lt;/code&gt;类型&lt;a href=&#34;https://docs.unity3d.com/cn/current/Manual/SL-VertexProgramInputs.html&#34;&gt;补充&lt;/a&gt;一点：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;‌&lt;code&gt;float‌&lt;/code&gt;：用于表示单个浮点数，常用于颜色通道、位置坐标等。&lt;/li&gt;
&lt;li&gt;‌&lt;code&gt;float2‌&lt;/code&gt;（Vector2）：用于表示二维向量，如二维坐标、UV坐标等。&lt;/li&gt;
&lt;li&gt;‌&lt;code&gt;float3‌&lt;/code&gt;（Vector3）：用于表示三维向量，如位置、法线等。&lt;/li&gt;
&lt;li&gt;‌&lt;code&gt;float4‌&lt;/code&gt;（Vector4）：用于表示四维向量，如颜色、四元数等。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;在unity中，一个模型最多有四套UV&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;float&amp;#x2F;half&amp;#x2F;fixed的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;位宽&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;适用范围&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;常见用途&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;精度&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;现代GPU支持情况&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;float&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32-bit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;大&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;位置、物理计算、PBR&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;高&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;强烈推荐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;half&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;16-bit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;中&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;颜色计算、法线、屏幕后处理&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;中等&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐（移动端优化）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;fixed&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10-bit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;小&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;颜色计算（老设备）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;低&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;几乎淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;GPU渲染管线&#34;&gt;&lt;a href=&#34;#GPU渲染管线&#34; class=&#34;headerlink&#34; title=&#34;GPU渲染管线&#34;&gt;&lt;/a&gt;GPU渲染管线&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;基本结构&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;【模型数据】 -&amp;gt; 1️⃣【顶点Shader】 -&amp;gt; 2️⃣【图元装配及光栅化】 -&amp;gt; 3️⃣【片元Shader】 -&amp;gt; 4️⃣【输出合并】
            |-----------------------------GPU渲染管线---------------------------------------|
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1️⃣顶点Shader&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将模型数据的模型空间坐标转换到对应的裁剪空间，即输出在裁剪空间下的顶点坐标&lt;/li&gt;
&lt;li&gt;【模型空间】 -&amp;gt; 世界空间 -&amp;gt; 相机空间 -&amp;gt; 【裁剪空间】，中间经过三个矩阵（Model,View,Projection）操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2️⃣图元装配及光栅化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件阶段&lt;/li&gt;
&lt;li&gt;生成片元并进行光栅化插值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3️⃣片元Shader&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个片元调用片元shader给自身着色&lt;/li&gt;
&lt;li&gt;计算对应的颜色后输出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4️⃣输出合并&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出到对应的帧缓冲区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;一个完整的Shader通常由顶点Shader和片段Shader共同组成。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;完整Shader代码&#34;&gt;&lt;a href=&#34;#完整Shader代码&#34; class=&#34;headerlink&#34; title=&#34;完整Shader代码&#34;&gt;&lt;/a&gt;完整Shader代码&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Upgrade NOTE: replaced &amp;#39;mul(UNITY_MATRIX_MVP,*)&amp;#39; with &amp;#39;UnityObjectToClipPos(*)&amp;#39;
// Upgrade NOTE: replaced &amp;#39;_Object2World&amp;#39; with &amp;#39;unity_ObjectToWorld&amp;#39;
Shader &amp;quot;CS0102/shader&amp;quot;
&amp;#123;
    Properties
    &amp;#123;
        // 常用的五种数据类型
        _Float(&amp;quot;Float&amp;quot;, Float) = 0.0
        _Range(&amp;quot;Range&amp;quot;, Range(0.0, 1.0)) = 0.0
        _Vector(&amp;quot;Vector&amp;quot;, Vector) = (1,1,1,1)
        _Color(&amp;quot;Color&amp;quot;, Color) = (0.5,0.5,0.5,0.5)
        //_Texture(&amp;quot;Texture&amp;quot;, 2D) = &amp;quot;black&amp;quot; &amp;#123;&amp;#125; 
        _MainTex(&amp;quot;MainTex&amp;quot;,2D)=&amp;quot;black&amp;quot;&amp;#123;&amp;#125;
    &amp;#125;
    SubShader
    &amp;#123;
        Pass
        &amp;#123;
            // Shader 主要代码部分
            CGPROGRAM
            #pragma vertex vert // 指定一个顶点 Shader：vert
            #pragma fragment frag // 指定一个片元 Shader：frag
            #include &amp;quot;UnityCG.cginc&amp;quot; // 头文件

            // 从 CPU 端获取模型数据
            struct appdata &amp;#123;
                float4 vertex : POSITION;  // 模型顶点坐标
                // 第一套uv，共4个可用（TEXCOORD0~TEXCOORD3）
                float2 uv : TEXCOORD0; 
                float3 normal : NORMAL;    // 法线
                float4 color : COLOR;      // 顶点色
            &amp;#125;;
            // 输出结构体定义
            struct v2f &amp;#123;
                float4 pos : SV_POSITION;
                //通用储存器（插值器），共16个可用（TEXCOORD0~TEXCOORD15）
                float2 uv:TEXCOORD0;
            &amp;#125;;
            float4 _Color;
            sampler2D _MainTex;
            float4 _MainTex_ST;//动态链接四个参数
            // 顶点 Shader
            v2f vert(appdata v) &amp;#123;
                v2f o;
                //float4 pos_world = mul(unity_ObjectToWorld, v.vertex); // 模型空间转世界空间
                //float4 pos_clip = mul(UNITY_MATRIX_VP, pos_world); // 世界空间直接变换到裁剪空间
                //o.pos = pos_clip;
                //或者直接合成一个mvp操作
                o.pos=UnityObjectToClipPos(v.vertex);
                //输出uv值
                //o.uv=v.uv;
                o.uv=v.uv*_MainTex_ST.xy+_MainTex_ST.zw;
                return o;
            &amp;#125;
            // 片元 Shader
            float4 frag(v2f i) : SV_Target &amp;#123;
                //贴图采样
                float4 col=tex2D(_MainTex,i.uv);
                return col;
            &amp;#125;
            ENDCG
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;PART2&#34;&gt;&lt;a href=&#34;#PART2&#34; class=&#34;headerlink&#34; title=&#34;PART2&#34;&gt;&lt;/a&gt;PART2&lt;/h3&gt;&lt;h4 id=&#34;背面剔除（Backface-Culling）&#34;&gt;&lt;a href=&#34;#背面剔除（Backface-Culling）&#34; class=&#34;headerlink&#34; title=&#34;背面剔除（Backface Culling）&#34;&gt;&lt;/a&gt;背面剔除（Backface Culling）&lt;/h4&gt;&lt;p&gt;背面剔除在硬件阶段、NDC空间之后进行，Unity默认使用背面剔除（只渲染正面）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Shader代码控制:直接显示出渲染结果&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    SubShader
    &amp;#123;
        Pass
        &amp;#123;
            Cull Off  //1️⃣不剔除
            Cull Back //2️⃣默认剔除背面
            Cull Front//3️⃣剔除正面
            //注意在CGPROGRAM之前
            CGPROGRAM
            ...
            ENDCG
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;材质球控制：物体材质球处出现可选项：Off&amp;#x2F;Front&amp;#x2F;Back&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    Properties
    &amp;#123;
        [Enum(UnityEngine.Rendering.CullMode)]_CullMode(&amp;quot;CullMode&amp;quot;,float)=2
    &amp;#125;
    SubShader
    &amp;#123;
        Pass
        &amp;#123;
            Cull [_CullMode]
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;PART3-纹理映射&#34;&gt;&lt;a href=&#34;#PART3-纹理映射&#34; class=&#34;headerlink&#34; title=&#34;PART3 纹理映射&#34;&gt;&lt;/a&gt;PART3 纹理映射&lt;/h3&gt;&lt;h4 id=&#34;正面纹理采样设定&#34;&gt;&lt;a href=&#34;#正面纹理采样设定&#34; class=&#34;headerlink&#34; title=&#34;正面纹理采样设定&#34;&gt;&lt;/a&gt;正面纹理采样设定&lt;/h4&gt;&lt;p&gt;这里用XY坐标值采样贴图，即uv按模型本身的XY展开。&lt;br&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;            struct v2f &amp;#123;
                ...
                float2 pos_uv:TEXCOORD1;
            &amp;#125;;
            v2f vert(appdata v) &amp;#123;
                ...
                o.pos_uv=v.vertex.xy*_MainTex_ST.xy+_MainTex_ST.zw;
                return o;
            &amp;#125;
            float4 frag(v2f i) : SV_Target &amp;#123;
                float4 col=tex2D(_MainTex,i.pos_uv);
                return col;
            &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;👉️补充：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正面 XY平面&lt;/li&gt;
&lt;li&gt;侧面 ZY平面&lt;/li&gt;
&lt;li&gt;俯视 XZ平面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：纹理映射的来源不一定是单纯的o.uv的uv坐标，也可以是上面写的o.pos_uv（世界坐标pos_world也可）这种自己设定的值。&lt;/p&gt;
&lt;p&gt;另，如果想三平面都能够完美覆盖涉及到：&lt;strong&gt;三平面映射&lt;/strong&gt;。up在此链接中有提到，所以查了其他教程补充在这里。&lt;/p&gt;
&lt;h4 id=&#34;三平面映射&#34;&gt;&lt;a href=&#34;#三平面映射&#34; class=&#34;headerlink&#34; title=&#34;三平面映射&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.bilibili.com/opus/814269127492370548&#34;&gt;三平面映射&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;**目的：**防止”纹理拉伸”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;防止纹理拉伸传统思路可以手动展开uv坐标以贴合模型起伏，但是难以适应实时渲染的要求，因此引入这一方法：三平面映射。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;**应用：**普通网格地形、瀑布、程序化建模的地形、水池的焦散效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;根据顶点的世界空间坐标计算对应的UV坐标&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;//取每个片元在三个方向的uv坐标
half2 yUV=IN.worldPos.xz/_TextureScale;
half2 xUV=IN.worldPos.yz/_TextureScale;
half2 zUV=IN.worldPos.xy/_TextureScale;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;从x&amp;#x2F;y&amp;#x2F;z三个方向对漫反射贴图进行采样&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;half3 yDiff=tex2D(_DiffuseMap,yUV);
half3 xDiff=tex2D(_DiffuseMap,xUV);
half3 zDiff=tex2D(_DiffuseMap,zUV);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;调整三平面边界过渡的锐利度&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;//用法线方向作为从三个方向采样的权重值
//额外解决纹理接缝问题（法线是连续过渡的）
half3 blendWeights=pow(abs(In.worldNormal),_TriplanarBlendSharpness);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;将混合权重值单位化&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;//第三步pow锐化三平面边界后，得到的法线值可能偏小
//重新单位化
blendWeights=blendWeights/(blendWeights.x+blendWeights.y+blendWeights.z);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;按三个面的混合权重，将采样颜色混合在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;//根据混合系数混合
p.Albedo=xDiff*blendWeights.x+yDiff*blendWeights.y+zDiff*blendWeights.z;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多相关内容&lt;a href=&#34;https://www.bilibili.com/video/BV1AM4y1Y78D/?spm_id_from=333.337.search-card.all.click&amp;vd_source=6cef69f555ee1eb889d44945f2a3a38b&#34;&gt;戳此&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;渲染扭曲问题&#34;&gt;&lt;a href=&#34;#渲染扭曲问题&#34; class=&#34;headerlink&#34; title=&#34;渲染扭曲问题&#34;&gt;&lt;/a&gt;渲染扭曲问题&lt;/h4&gt;&lt;p&gt;打印uv坐标：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;            float4 frag(v2f i) : SV_Target &amp;#123;
                float4 col=tex2D(_MainTex,i.uv);
                return float4(i.uv,0.0,0.0);
            &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若uv存在不连续的情况，则会导致贴图采样时引起纹理图像的失真问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;👉️为什么会有uv不连续的现象？&lt;/strong&gt;&lt;br&gt;光栅化过程产生。光栅化时根据三角面的进行，每个三角按照每个三角面进行一个插值。而对于模型而言，其三角网排列就会造成一定程度上的问题。&lt;br&gt;解决方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uv展开并缩放到0~1之间&lt;/li&gt;
&lt;li&gt;模型加面&lt;/li&gt;
&lt;li&gt;手动在片元shader中重新计算uv&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;PART4-透明度测试-Alpha-test&#34;&gt;&lt;a href=&#34;#PART4-透明度测试-Alpha-test&#34; class=&#34;headerlink&#34; title=&#34;PART4 透明度测试 Alpha-test&#34;&gt;&lt;/a&gt;PART4 透明度测试 Alpha-test&lt;/h3&gt;&lt;p&gt;参考链接&lt;a href=&#34;https://docs.unity3d.com/cn/2020.2/Manual/SL-AlphaTest.html&#34;&gt;1️⃣&lt;/a&gt;&lt;a href=&#34;https://blog.csdn.net/qq_34697930/article/details/136530909&#34;&gt;2️⃣&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;输出合并&#34;&gt;&lt;a href=&#34;#输出合并&#34; class=&#34;headerlink&#34; title=&#34;输出合并&#34;&gt;&lt;/a&gt;输出合并&lt;/h4&gt;&lt;p&gt;对于&lt;strong&gt;输出合并&lt;/strong&gt;阶段，可以细分为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;【片元数据】Color,Depth
    ↓
【Alpha测试】
    ↓
【模板测试】Stencil Test
    ↓
【深度测试】Depth test
    ↓
【混合】Blending
    ↓
【帧缓冲区】Color,Depth,Stencil
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;Alpha-test&#34;&gt;&lt;a href=&#34;#Alpha-test&#34; class=&#34;headerlink&#34; title=&#34;Alpha-test&#34;&gt;&lt;/a&gt;Alpha-test&lt;/h4&gt;&lt;p&gt;**Alpha 测试是拒绝将像素写入屏幕的最后机会。**在计算出最终输出颜色之后，颜色可选择性地将其 Alpha 值与固定值进行比较。如果测试失败，则不会将像素写入显示屏。&lt;/p&gt;
&lt;p&gt;当下在Shader中，很少会直接用alpha test这个指令。一般用的是更好用、更可控的指令：&lt;code&gt;clip&lt;/code&gt;“裁剪”。&lt;/p&gt;
&lt;p&gt;如果clip()括号中的值&amp;lt;0，整个模型将不显示。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模型的一部分被裁剪掉&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;            float4 frag(v2f i) : SV_Target &amp;#123;
                float4 gradient=tex2D(_MainTex,i.uv);
                clip(gradient-0.1);
                return gradient.xxx;
            &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;设置一个值实现动态控制&lt;br&gt;好神奇😂我这里模型用的球，Cutout调到0.5变成吃豆人了&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    Properties
    &amp;#123;
         _MainTex(&amp;quot;MainTex&amp;quot;,2D)=&amp;quot;black&amp;quot;&amp;#123;&amp;#125;
         _Cutout(&amp;quot;Cutout&amp;quot;,Range(-0.1,1.1))=0.0
        [Enum(UnityEngine.Rendering.CullMode)]_CullMode(&amp;quot;CullMode&amp;quot;,float)=2
    &amp;#125;
    SubShader
    &amp;#123;
        Pass
        &amp;#123;
            half4 frag(v2f i) : SV_Target &amp;#123;
                half gradient=tex2D(_MainTex,i.uv).r;
                clip(gradient-_Cutout);
                return gradient.xxxx;
                //gradient.xxxx等价于float4(gradient,gradient,gradient,gradient);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;对UV进行动画处理&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;                half gradient=tex2D(_MainTex,i.uv+_Time.y).r;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;对UV进行动画速度的处理&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    Properties
    &amp;#123;
        _Speed(&amp;quot;Speed&amp;quot;,Vector)=(1,1,0,0)
    &amp;#125;
    SubShader
    &amp;#123;
        Pass
        &amp;#123;
            float4 _Speed;
            half4 frag(v2f i) : SV_Target &amp;#123;
                half gradient=tex2D(_MainTex,i.uv+_Time.y*_Speed.xy).r;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;noise贴图控制&lt;br&gt;适当的模型+贴图可以实现波形扩散效果&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    Properties
    &amp;#123;
         _NoiseTex(&amp;quot;Noise Tex&amp;quot;,2D)=&amp;quot;white&amp;quot;&amp;#123;&amp;#125;
         //_MainColor(&amp;quot;MainColor&amp;quot;,Color)=(1,1,1,1)
    &amp;#125;
    SubShader
    &amp;#123;
        Pass
        &amp;#123;
            float4 _NoiseTex_ST;
            //float4 _MainColor;
            half4 frag(v2f i) : SV_Target &amp;#123;
                half gradient=tex2D(_MainTex,i.uv+_Time.y*_Speed.xy).r;
                half noise=tex2D(_NoiseTex,i.uv+_Time.y*_Speed.zw).r;
                clip(gradient-noise-_Cutout);
                return noise.xxxx;
                //return _MainColor;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;综上&lt;/strong&gt; alpha-test可以用来做溶解相关的效果。&lt;/p&gt;
&lt;h3 id=&#34;PART5-半透明混合-Blending&#34;&gt;&lt;a href=&#34;#PART5-半透明混合-Blending&#34; class=&#34;headerlink&#34; title=&#34;PART5 半透明混合 Blending&#34;&gt;&lt;/a&gt;PART5 半透明混合 Blending&lt;/h3&gt;&lt;p&gt;参考链接&lt;a href=&#34;https://learnopengl-cn.readthedocs.io/zh/latest/04%20Advanced%20OpenGL/03%20Blending/&#34;&gt;1️⃣&lt;/a&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_34505326/article/details/112181270&#34;&gt;2️⃣&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现半透明混合&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    Properties
    &amp;#123;
         _MainColor(&amp;quot;MainColor&amp;quot;,Color)=(1,1,1,1)
    &amp;#125;saturate
    SubShader
    &amp;#123;
        Blend SrcAlpha OneMinusSrcAlpha//注意此句在CGPROGRAM之前
        float4 _MainColor;
        Pass
        &amp;#123;
            half4 frag(v2f i) : SV_Target &amp;#123;
                half4 col=tex2D(_MainTex,i.uv)*_MainColor;
                return col;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;关闭ZWrite深度写入&lt;br&gt;半透明混合的使用要注意排序问题：&lt;code&gt;ZWrite Off&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    SubShader
    &amp;#123;
        Pass&amp;#123;
            ZWrite Off
            Blend SrcAlpha OneMinusSrcAlpha
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;渲染队列问题&lt;br&gt;先前我们的材质球的Render Queue为2000，处于不透明的渲染队列中。使用半透明效果必须记得使用&lt;code&gt;Tags&amp;#123;&amp;quot;Queue&amp;quot;=&amp;quot;Transparent&amp;quot;&amp;#125;&lt;/code&gt;+关掉&lt;code&gt;ZWrite&lt;/code&gt;（部分情况下ZWrite需要开启）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    SubShader
    &amp;#123;
        Tags&amp;#123;&amp;quot;Queue&amp;quot;=&amp;quot;Transparent&amp;quot;&amp;#125;
        Pass&amp;#123;
            ZWrite Off
            Blend SrcAlpha OneMinusSrcAlpha
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;贴图半透效果&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当前贴图无alpha通道，所以只能用其灰度值来做一个半透效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;            half4 frag(v2f i) : SV_Target &amp;#123;
                half3 col=_MainColor.xyz;
                half alpha=tex2D(_MainTex,i.uv).r*_MainColor.a;
                return float4(col,alpha);
            &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;做出来的球像透明泡泡🤗好好看~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加显示强度&lt;blockquote&gt;
&lt;p&gt;此处要确保alpha值在0~1的范围内，否则开HDR的时候就很容易出问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    Properties
    &amp;#123;
         _Emiss(&amp;quot;Emiss&amp;quot;,Float)=1.0
    &amp;#125;
    SubShader
    &amp;#123;
        float _Emiss;
        Pass
        &amp;#123;
            half4 frag(v2f i) : SV_Target &amp;#123;
                half3 col=_MainColor.xyz*_Emiss;

                half alpha=saturate(tex2D(_MainTex,i.uv).r*_MainColor.a*_Emiss);
                return float4(col,alpha);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;其他混合模式&lt;br&gt;常用的柔和叠加模式：&lt;code&gt;Blend SrcAlpha One&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;PART6-边缘光&#34;&gt;&lt;a href=&#34;#PART6-边缘光&#34; class=&#34;headerlink&#34; title=&#34;PART6 边缘光&#34;&gt;&lt;/a&gt;PART6 边缘光&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;得到normal_world&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    SubShader
    &amp;#123;
        Pass
        &amp;#123;
            struct appdata &amp;#123;
                float3 normal : NORMAL;
            &amp;#125;;
            struct v2f &amp;#123;
                float3 normal_world:TEXCOORD1;
            &amp;#125;;
            v2f vert(appdata v) &amp;#123;
                v2f o;
                o.pos=UnityObjectToClipPos(v.vertex);
                o.normal_world=normalize(mul(float4(v.normal,0.0),unity_WorldToObject).xyz);
                //
                o.uv=v.uv*_MainTex_ST.xy+_MainTex_ST.zw;
                return o;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;得到view_world&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;            struct v2f &amp;#123;
                float3 view_world:TEXCOORD2;
            &amp;#125;;
            v2f vert(appdata v) &amp;#123;
                float3 pos_world=mul(unity_ObjectToWorld,v.vertex).xyz;
                o.view_world=normalize(_WorldSpaceCameraPos.xyz-pos_world);
            &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在片元Shader中把数据承接过来&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dot(a,b)&lt;/code&gt;：a向量与b向量进行点乘。&lt;br&gt;两个向量越重合就越接近1；180°为-1。[-1,1]👉️dot结果在[-1,1]&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;            half4 frag(v2f i) : SV_Target &amp;#123;
                float3 normal_world=normalize(i.normal_world);
                //光栅化的过程会导致向量的长度变化
                float3 view_world=normalize(i.view_world);
                float NdoV=saturate(dot(normal_world,view_world));
                float rim=1.0-NdoV;
                return NdoV.xxxx;
            &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;得到边缘光效果&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;（来自弹幕佬的解释）边缘处的法线和视角方向接近垂直，dot&amp;#x3D;0,1-dot进行取反，边缘就显示出颜色，其他部分就较为透明。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;            half4 frag(v2f i) : SV_Target &amp;#123;
                ...
                float rim=1.0-NdoV;
                return rim.xxxx;
            &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;边缘光改色&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;也可以用alpha通道调：&lt;code&gt;float alpha=saturate((1.0-NdoV)*_Emiss);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;            half4 frag(v2f i) : SV_Target &amp;#123;
                float3 col=_MainColor.xyz*_Emiss;//乘倍增系数，Inspector可调
                ...
                return float4(col,alpha);
            &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;边缘光对比度调节&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    Properties
    &amp;#123;
        _RimPower(&amp;quot;_RimPower&amp;quot;,Float)=1.0
    &amp;#125;
    SubShader
    &amp;#123;
        Pass
        &amp;#123;
            float _RimPower;
            half4 frag(v2f i) : SV_Target &amp;#123;
               float NdoV=pow(saturate(dot(normal_world,view_world)),RimPower);
               float fresnel=pow((1.0-NdoV),_RimPower);
               float alpha=saturate(fresnel*_Emiss);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;模型透过问题：预先写深度&lt;br&gt;经过上面的步骤，模型能够看到内部的透过结构。如何避免这种现象？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;☝「打开ZWrite」&lt;code&gt;ZWrite On&lt;/code&gt;。此时效果其实不算特别完美&lt;/p&gt;
&lt;p&gt;✌「再加一个&amp;#96;Pass」预写一遍深度，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;    SubShader
    &amp;#123;
        Tags&amp;#123;&amp;quot;Queue&amp;quot;=&amp;quot;Transparent&amp;quot;&amp;#125;
        Pass
        &amp;#123;
            Cull Of
            ZWrite On
            ColorMask 0
            CGPROGRAM
            float4 _Color;
            #pragma vertex vert
            #pragma fragment frag
            float4 vert(float4 veryexPos:POSITION):SV_POSITION
            &amp;#123;
                return UnityObjectToClipPos(vertexPos);
            &amp;#125;
            float4 frag(void):COLOR
            &amp;#123;
                return _Color;
            &amp;#125;
            ENDCG
        &amp;#125;
        Pass
        &amp;#123;
            ...
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;把最靠前的三角形的片元的深度预先&lt;code&gt;ZWrite On&lt;/code&gt;写好&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Color Mask&lt;/code&gt;的操作：只写深度，不写任何的颜色信息&lt;/li&gt;
&lt;li&gt;到了第二遍pass绘制的时候，这些片元就通过深度测试，默认把背后的像素剔除&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👉️ASE中有对应的功能，此处仅为简单演示。&lt;/p&gt;
&lt;p&gt;🤯🤯🤯断断续续一个多星期终于把这一小时的视频啃完辣！！！休息休息继续战斗！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&#34;其他参考链接&#34;&gt;&lt;a href=&#34;#其他参考链接&#34; class=&#34;headerlink&#34; title=&#34;其他参考链接&#34;&gt;&lt;/a&gt;其他参考链接&lt;/h1&gt;&lt;p&gt;反射探针：&lt;br&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/438022045&#34;&gt;https://zhuanlan.zhihu.com/p/438022045&lt;/a&gt;&lt;br&gt;三大Shader编程语言：&lt;br&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_56516170/article/details/135266277&#34;&gt;https://blog.csdn.net/weixin_56516170/article/details/135266277&lt;/a&gt;&lt;br&gt;《Shader入门精要》源代码:&lt;br&gt;&lt;a href=&#34;https://github.com/candycat1992/Unity_Shaders_Book&#34;&gt;https://github.com/candycat1992/Unity_Shaders_Book&lt;/a&gt;&lt;br&gt;法线贴图：&lt;br&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_49427945/article/details/136458398&#34;&gt;https://blog.csdn.net/weixin_49427945/article/details/136458398&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://docs.unity3d.com/cn/2021.1/Manual/StandardShaderMaterialParameterNormalMap.html&#34;&gt;https://docs.unity3d.com/cn/2021.1/Manual/StandardShaderMaterialParameterNormalMap.html&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="笔记" />
        <updated>2025-04-06T14:22:22.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/04/01/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%983-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
        <title>专题3️⃣ ⋮ 动态规划</title>
        <link rel="alternate" href="https://232akira.github.io/2025/04/01/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%983-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
        <content type="html">&lt;p&gt;动规来力！！！&lt;/p&gt;
&lt;h1 id=&#34;2140-解决智力问题&#34;&gt;&lt;a href=&#34;#2140-解决智力问题&#34; class=&#34;headerlink&#34; title=&#34;2140.解决智力问题&#34;&gt;&lt;/a&gt;2140.解决智力问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个下标从 0 开始的二维整数数组 questions ，其中 questions[i] &amp;#x3D; [pointsi, brainpoweri] 。&lt;br&gt;这个数组表示一场考试里的一系列题目，你需要 按顺序 （也就是从问题 0 开始依次解决），针对每个问题选择 解决 或者 跳过 操作。解决问题 i 将让你 获得  pointsi 的分数，但是你将 无法 解决接下来的 brainpoweri 个问题（即只能跳过接下来的 brainpoweri 个问题）。如果你跳过问题 i ，你可以对下一个问题决定使用哪种操作。&lt;br&gt;比方说，给你 questions &amp;#x3D; [[3, 2], [4, 3], [4, 4], [2, 5]] ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果问题 0 被解决了， 那么你可以获得 3 分，但你不能解决问题 1 和 2 。&lt;/li&gt;
&lt;li&gt;如果你跳过问题 0 ，且解决问题 1 ，你将获得 4 分但是不能解决问题 2 和 3 。&lt;br&gt;请你返回这场考试里你能获得的 最高分数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; questions.length &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;questions[i].length &amp;#x3D;&amp;#x3D; 2&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; pointsi, brainpoweri &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;解决我的智力问题（不是🤯&lt;/p&gt;
&lt;p&gt;看了&lt;a href=&#34;https://leetcode.cn/problems/solving-questions-with-brainpower/solutions/1213919/dao-xu-dp-by-endlesscheng-2qkc/?envType=daily-question&amp;envId=2025-04-01&#34;&gt;题解&lt;/a&gt;发现是打家劫舍的变体题，所以带着一块儿做了。&lt;/p&gt;
&lt;p&gt;👉相当于如果选了k，接下来有x个不能选：打家劫舍是x&amp;#x3D;1，本题x&amp;#x3D;questions[i][1]。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;子问题&lt;br&gt;原问题：“完成考试（即所有题都已解决or跳过）能获得的最大分数”&lt;code&gt;→&lt;/code&gt;子问题：“完成前k道题能获得的最大分数”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;递推关系&lt;br&gt;👉已知子问题f(k)，那么只关注当前（即第k道）题，只有两种做题方法：&lt;br&gt;做k &amp;amp;&amp;amp; 做k+x&lt;code&gt;or&lt;/code&gt;不做k &amp;amp;&amp;amp; 做k+1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;👉递推关系：&lt;code&gt;f(k)=max&amp;#123;f(k-1),k-1道题的分数+f(k-1+x)&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;边界：无题目（k&amp;#x3D;0）和只有一道题(k&amp;#x3D;1)&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;dp数组的计算顺序&lt;br&gt;✅️dp[k]依赖于dp[k-1]和dp[k-1+x]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不对。这题搞得我现在有点懵，这会正好感冒昏昏沉沉的😵‍💫等我二编…&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;53-最大子数组和&#34;&gt;&lt;a href=&#34;#53-最大子数组和&#34; class=&#34;headerlink&#34; title=&#34;53.最大子数组和&#34;&gt;&lt;/a&gt;53.最大子数组和&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;br&gt;子数组是数组中的一个连续部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;-104 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 104&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-1&#34;&gt;&lt;a href=&#34;#解题思路-1&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;经典解法：Kadane算法&lt;/strong&gt;。核心思路是动态规划，通过遍历数组维护当前最大子数组和。整体思路如下：&lt;br&gt;1️⃣&lt;strong&gt;维护两个变量：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sum&lt;/code&gt;当前最大子数组和&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxsum&lt;/code&gt;全局最大子数组和&lt;br&gt;2️⃣&lt;strong&gt;遍历数组，每次决定是否扩展当前子数组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;sum+nums[i] &amp;lt; nums[i]&lt;/code&gt; 从nums[i]重新开始（之前的子数组必定与最大和无关&lt;/li&gt;
&lt;li&gt;否则继续累加nums[i]&lt;br&gt;3️⃣&lt;strong&gt;每次更新&lt;code&gt;maxsum&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-1&#34;&gt;&lt;a href=&#34;#完整代码-1&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int maxSubArray(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        int sum=nums[0];
        int maxsum=nums[0];
        for(int i=1;i&amp;lt;nums.size();i++)&amp;#123;
            sum=max(nums[i],sum+nums[i]);
            maxsum=max(sum,maxsum);
        &amp;#125;
        return maxsum;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="专题" />
        <category term="力扣" />
        <category term="算法" />
        <updated>2025-04-01T01:18:00.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/03/12/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%981-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
        <title>专题1️⃣ ⋮ 滑动窗口</title>
        <link rel="alternate" href="https://232akira.github.io/2025/03/12/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%981-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
        <content type="html">&lt;p&gt;今天照例每日一题，然后麻溜的看题解，发现又是一道滑动窗口题。所以开个专题归类一下。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a href=&#34;#参考链接&#34; class=&#34;headerlink&#34; title=&#34;参考链接&#34;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;h2 id=&#34;基础算法精讲03-滑动窗口&#34;&gt;&lt;a href=&#34;#基础算法精讲03-滑动窗口&#34; class=&#34;headerlink&#34; title=&#34;基础算法精讲03-滑动窗口&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1hd4y1r7Gq/?spm_id_from=333.337.search-card.all.click&amp;vd_source=6cef69f555ee1eb889d44945f2a3a38b&#34;&gt;基础算法精讲03-滑动窗口&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;👉️双指针的应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单调性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;713-乘积小于K的子数组&#34;&gt;&lt;a href=&#34;#713-乘积小于K的子数组&#34; class=&#34;headerlink&#34; title=&#34;713.乘积小于K的子数组&#34;&gt;&lt;/a&gt;713.乘积小于K的子数组&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个整数数组 nums 和一个整数 k ，请你返回子数组内所有元素的乘积严格小于 k 的连续子数组的数目。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 3 * 104&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 1000&lt;/li&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; k &amp;lt;&amp;#x3D; 106&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3-无重复字符的最长子串&#34;&gt;&lt;a href=&#34;#3-无重复字符的最长子串&#34; class=&#34;headerlink&#34; title=&#34;3.无重复字符的最长子串&#34;&gt;&lt;/a&gt;3.无重复字符的最长子串&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个字符串s，请你找出其中不含有重复字符的最长子串的长度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; s.length &amp;lt;&amp;#x3D; 5 * 104&lt;/li&gt;
&lt;li&gt;s 由英文字母、数字、符号和空格组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-1&#34;&gt;&lt;a href=&#34;#解题思路-1&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;h2 id=&#34;完整代码-1&#34;&gt;&lt;a href=&#34;#完整代码-1&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;209-长度最小的子数组&#34;&gt;&lt;a href=&#34;#209-长度最小的子数组&#34; class=&#34;headerlink&#34; title=&#34;209.长度最小的子数组&#34;&gt;&lt;/a&gt;209.长度最小的子数组&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个含有n个正整数的数组和一个正整数target。&lt;br&gt;找出该数组中满足其总和大于等于target的长度最小的子数组 [numsl, numsl+1, …, numsr-1, numsr]，并返回其长度。如果不存在符合条件的子数组，返回0。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; target &amp;lt;&amp;#x3D; 109&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 104&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;进阶：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你已经实现 O(n) 时间复杂度的解法, 请尝试设计一个 O(n log(n)) 时间复杂度的解法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-2&#34;&gt;&lt;a href=&#34;#解题思路-2&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;在数组字串问题中，经常会用到&lt;strong&gt;双指针&lt;/strong&gt;这一技巧。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;暴力方法 时间复杂度&lt;code&gt;O(n^2)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;枚举右端点，收缩左端点 时间复杂度&lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;拿到数组的长度n&lt;/li&gt;
&lt;li&gt;答案ans初始化为n+1或者更大&lt;/li&gt;
&lt;li&gt;总和sum初始化为0&lt;/li&gt;
&lt;li&gt;左端点left初始化为0&lt;/li&gt;
&lt;li&gt;right右端点for循环(0~n-1)：sum+&amp;#x3D;nums[right]&lt;/li&gt;
&lt;li&gt;for嵌套while(s-nums[left]):此时子数组的和减去左端点依旧&amp;gt;&amp;#x3D;target：sum-&amp;#x3D;nums[left];left+&amp;#x3D;1;(移掉左端点)&lt;/li&gt;
&lt;li&gt;如果sum&amp;gt;&amp;#x3D;target:更新答案最小值 ans&amp;#x3D;min(ans,right-left+1)&lt;/li&gt;
&lt;li&gt;返回ans（&amp;lt;&amp;#x3D;n返回ans，否则返回0）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意：此题不需要判断left和right两者间的大小关系。&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;因为当left&amp;#x3D;right时，s-nums[left]&amp;#x3D;0，一定比target小（target为正整数），不满足while条件。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在「2」的基础上，把ans的更新写到while里面&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;完整代码-2&#34;&gt;&lt;a href=&#34;#完整代码-2&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int minSubArrayLen(int target, vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        int n,ans,sum,left;
        n=nums.size();
        ans=n+1;
        sum=left=0;
        for(int i=0;i&amp;lt;n;i++)&amp;#123;
            // sum+=nums[i];
            // while(sum-nums[left]&amp;gt;=target)&amp;#123;
            //     sum-=nums[left];
            //     left++;
            // &amp;#125;
            // if(sum&amp;gt;=target)&amp;#123;
            //     ans=min(ans,i-left+1);
            // &amp;#125;
            while(sum&amp;gt;=target)&amp;#123;
                ans=min(ans,i-left+1);
                sum-=nums[left++];
            &amp;#125;
        &amp;#125;
        return ans&amp;lt;=n?ans:0;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2269-找到一个数字的-K-美丽值&#34;&gt;&lt;a href=&#34;#2269-找到一个数字的-K-美丽值&#34; class=&#34;headerlink&#34; title=&#34;2269.找到一个数字的 K 美丽值&#34;&gt;&lt;/a&gt;2269.找到一个数字的 K 美丽值&lt;/h1&gt;&lt;p&gt;今天字符串也要美丽了🆘&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个整数num的k美丽值定义为num中符合以下条件的子字符串数目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子字符串长度为k。&lt;/li&gt;
&lt;li&gt;子字符串能整除num。&lt;br&gt;给你整数num和k，请你返回num的k美丽值。&lt;br&gt;注意：&lt;br&gt;允许有前缀0。&lt;br&gt;0不能整除任何值。&lt;br&gt;一个子字符串是一个字符串里的连续一段字符序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= num &amp;lt;= 109&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= num.length&lt;/code&gt; （将 num 视为字符串）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-3&#34;&gt;&lt;a href=&#34;#解题思路-3&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;我觉得这道的要点就是子串怎么得，剩下的就好判断了。偏偏我就栽在这儿了😅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;int转string&lt;/strong&gt; &lt;code&gt;to_string()&lt;/code&gt;注意此函数需要赋给个string变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;string转int&lt;/strong&gt; &lt;code&gt;stoi()&lt;/code&gt;同样，需要赋给个int变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取长度为k的字符串&lt;/strong&gt; &lt;code&gt;substr(i,k)&lt;/code&gt;距离c++学这个函数已经过了一两年了，忘的一干二净，趁此好机会来总结一下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;获取子串&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;substr(pos,len)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;从pos开始，提取长度为len的子串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;查找字符串&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;find(str,pos)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;在pos之后查找str的位置，找不到返回string::pos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;rfind(str,pos)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;逆向查找str,从pos开始向前找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;find_first_of(chars,pos)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查找chars中的任意字符的第一次出现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;find_last_of(chars,pos)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查找chars中的任意字符的最后一次出现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;替换字符串&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;replace(pos,len,str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;从pos开始，用str替换len个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;erase(pos,len)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;删除从pos开始的len个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;insert(pos,str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;在pos位置插入str&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;大小写转换&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;toupper(c)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;将字符c转换为大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;tolower(c)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;将字符c转换为小写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;数字与字符串转换&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;to_string(num)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;把num转换为字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;stoi(str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;把str转换为int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;stol(str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;把str转换为long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;stod(str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;把str转换为double&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;完整代码-3&#34;&gt;&lt;a href=&#34;#完整代码-3&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int divisorSubstrings(int num, int k) &amp;#123;
        int cnt=0;
        string str=to_string(num);
        for(int i=0;i&amp;lt;=str.size()-k;i++)&amp;#123;
            string ans=str.substr(i,k);
            int answer=stoi(ans);
            if(answer!=0 &amp;amp;&amp;amp; num%answer==0)&amp;#123;
                cnt++;
            &amp;#125;
        &amp;#125;
        return cnt;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3305-元音辅音字符串计数Ⅰ&#34;&gt;&lt;a href=&#34;#3305-元音辅音字符串计数Ⅰ&#34; class=&#34;headerlink&#34; title=&#34;3305.元音辅音字符串计数Ⅰ&#34;&gt;&lt;/a&gt;3305.元音辅音字符串计数Ⅰ&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个字符串word和一个非负整数 k。&lt;br&gt;返回word的子字符串中，每个元音字母（’a’、’e’、’i’、’o’、’u’）至少出现一次，并且恰好包含k个辅音字母的子字符串的总数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 &amp;lt;&amp;#x3D; word.length &amp;lt;&amp;#x3D; 250&lt;/li&gt;
&lt;li&gt;word 仅由小写英文字母组成。&lt;/li&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; k &amp;lt;&amp;#x3D; word.length - 5&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-4&#34;&gt;&lt;a href=&#34;#解题思路-4&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;先试了试暴力😤循环套三层观感太差，不放上来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正经解法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑动窗口代替暴力循环&lt;/li&gt;
&lt;li&gt;哈希表统计元音出现次数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意几个用法&lt;/strong&gt;&lt;br&gt;&lt;em&gt;&lt;strong&gt;1️⃣ 几个键值对容器&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;键值对容器&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;实现方式&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;键值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;时间复杂度&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;是否有序&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;使用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;哈希表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键-值对&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;快速查找键对应的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;红黑树&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键-值对&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(logn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;有序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;需要有序键值对&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;unordered_set&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;哈希表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;快速查找元素是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;红黑树&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(logn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;有序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;需要排序的集合&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;2️⃣ 键值对容器+函数求的是什么？&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_map.size()&lt;/code&gt;返回unordered_map中&lt;strong&gt;键值对的数量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unordered_set.count(x)&lt;/code&gt;unordered_set中&lt;strong&gt;某个元素是否存在&lt;/strong&gt;，返回1表示在，0表示不在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码思路如下。这个方法时间空间上并非最优，后续需要调整思路。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;定义n：word长度;
定义unordered_map类型的vowel_cnt:元音出现次数;
定义consonant_cnt:辅音个数;
定义ans：统计最终答案;
定义unordered_set类型的vowels:所有元音字母;
定义左指针j=0;
遍历word从下标0~word.size():
    定义右元素right=word[i];
    统计元音出现次数：
        进行元/辅音计数;
    当辅音数量超过k://收缩窗口左边界
        定义左元素left=word[左指针];//取左边界字符
        如果left是元音：
            该元音出现次数--;
            当元音的计数减少到0时：
                将它从vowel_cnt中删除；
        否则：
            辅音个数--;
        左指针右移;
    如果包含所有元音且辅音个数为k:
        //避免修改原窗口状态,思路整体与上半部分相同☝️
        定义临时变量temp_vowel=vowel_cnt;
        定义临时变量temp_consonant=consonant_cnt;
        定义临时变量temp_j=j;
        定义计数cnt=0;
        当临时左下标&amp;lt;=右下标:
            如果包含所有临时元音且临时辅音个数为k:
                cnt++;
            否则:
                退出该层循环;
            定义c:word[临时左指针];
            如果c是元音：
                临时该元音出现次数--;
                当临时元音的计数减少到0时：
                    将它从临时vowel_cnt中删除;
            否则:
                临时辅音个数--;
            临时左指针j右移;
        ans+=cnt;
返回ans;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整代码-4&#34;&gt;&lt;a href=&#34;#完整代码-4&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int countOfSubstrings(string word, int k) &amp;#123;
        int len=word.size();
        unordered_map&amp;lt;char,int&amp;gt;vowel_cnt;
        int consonant_cnt=0;
        int ans=0;
        unordered_set&amp;lt;int&amp;gt;vowels=&amp;#123;&amp;#39;a&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;i&amp;#39;,&amp;#39;o&amp;#39;,&amp;#39;u&amp;#39;&amp;#125;;
        int j=0;
        for(int i=0;i&amp;lt;len;i++)&amp;#123;
            char right=word[i];
            if(vowels.count(right))&amp;#123;
                vowel_cnt[right]++;
            &amp;#125;
            else&amp;#123;
                consonant_cnt++;
            &amp;#125;
            while(consonant_cnt&amp;gt;k)&amp;#123;
                char left=word[j];
                if(vowels.count(left))&amp;#123;
                    vowel_cnt[left]--;
                    if(vowel_cnt[left]==0)&amp;#123;
                        vowel_cnt.erase(left);
                    &amp;#125;
                &amp;#125;
                else&amp;#123;
                    consonant_cnt--;
                &amp;#125;
                j++;
            &amp;#125;
            if(vowel_cnt.size()==5 &amp;amp;&amp;amp; consonant_cnt==k)&amp;#123;
                unordered_map&amp;lt;char,int&amp;gt;temp_vowel=vowel_cnt;
                int temp_consonant=consonant_cnt;
                int temp_j=j;
                int cnt=0;
                while(temp_j&amp;lt;=i)&amp;#123;
                    if(temp_vowel.size()==5 &amp;amp;&amp;amp; temp_consonant==k)&amp;#123;
                        cnt++;
                    &amp;#125;
                    else&amp;#123;
                        break;
                    &amp;#125;
                    int c=word[temp_j];
                    if(vowels.count(c))&amp;#123;
                        temp_vowel[c]--;
                        if(temp_vowel[c]==0)&amp;#123;
                            temp_vowel.erase(c);
                        &amp;#125;
                    &amp;#125;
                    else&amp;#123;
                        temp_consonant--;
                    &amp;#125;
                    temp_j++;
                &amp;#125;
                ans+=cnt;
            &amp;#125;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3306-元音辅音字符串计数Ⅱ&#34;&gt;&lt;a href=&#34;#3306-元音辅音字符串计数Ⅱ&#34; class=&#34;headerlink&#34; title=&#34;3306.元音辅音字符串计数Ⅱ&#34;&gt;&lt;/a&gt;3306.元音辅音字符串计数Ⅱ&lt;/h1&gt;&lt;p&gt;不行，彻底懵了脑子转不动做梦都是元辅音😫先把copy的官方题解放这，过两天我再苟回来看。&lt;/p&gt;
&lt;h2 id=&#34;解题思路-5&#34;&gt;&lt;a href=&#34;#解题思路-5&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;h2 id=&#34;完整代码-5&#34;&gt;&lt;a href=&#34;#完整代码-5&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    long long countOfSubstrings(string word, int k) &amp;#123;
        set&amp;lt;char&amp;gt; vowels = &amp;#123;&amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;&amp;#125;;
        auto count = [&amp;amp;](int m) -&amp;gt; long long &amp;#123;
            int n = word.size(), consonants = 0;
            long long res = 0;
            map&amp;lt;char, int&amp;gt; occur;
            for (int i = 0, j = 0; i &amp;lt; n; i++) &amp;#123;
                while (j &amp;lt; n &amp;amp;&amp;amp; (consonants &amp;lt; m || occur.size() &amp;lt; vowels.size())) &amp;#123;
                    if (vowels.count(word[j])) &amp;#123;
                        occur[word[j]]++;
                    &amp;#125; else &amp;#123;
                        consonants++;
                    &amp;#125;
                    j++;
                &amp;#125;
                if (consonants &amp;gt;= m &amp;amp;&amp;amp; occur.size() == vowels.size()) &amp;#123;
                    res += n - j + 1;
                &amp;#125;
                if (vowels.count(word[i])) &amp;#123;
                    occur[word[i]]--;
                    if (occur[word[i]] == 0) &amp;#123;
                        occur.erase(word[i]);
                    &amp;#125;
                &amp;#125; else &amp;#123;
                    consonants--;
                &amp;#125;
            &amp;#125;
            return res;
        &amp;#125;;
        return count(k) - count(k + 1);
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="专题" />
        <category term="力扣" />
        <category term="算法" />
        <updated>2025-03-12T10:20:15.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/03/06/%E5%8A%9B%E6%89%A3/Leetcode-%E9%93%BE%E8%A1%A8/</id>
        <title>Leetcode ⋮ 链表</title>
        <link rel="alternate" href="https://232akira.github.io/2025/03/06/%E5%8A%9B%E6%89%A3/Leetcode-%E9%93%BE%E8%A1%A8/"/>
        <content type="html">&lt;p&gt;链表这东西真的学一阵忘一阵😂&lt;/p&gt;
&lt;h1 id=&#34;单向链表&#34;&gt;&lt;a href=&#34;#单向链表&#34; class=&#34;headerlink&#34; title=&#34;单向链表&#34;&gt;&lt;/a&gt;单向链表&lt;/h1&gt;&lt;h2 id=&#34;结构定义&#34;&gt;&lt;a href=&#34;#结构定义&#34; class=&#34;headerlink&#34; title=&#34;结构定义&#34;&gt;&lt;/a&gt;结构定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;节点结构 &lt;code&gt;ListNode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;值 &lt;code&gt;data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指向下一个节点的指针 &lt;code&gt;next&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct ListNode&amp;#123;
    int data;
    ListNode* next;
    ListNode(int x):data(x),next(nullptr)&amp;#123;&amp;#125;
&amp;#125;Node;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;基本操作&#34;&gt;&lt;a href=&#34;#基本操作&#34; class=&#34;headerlink&#34; title=&#34;基本操作&#34;&gt;&lt;/a&gt;基本操作&lt;/h2&gt;&lt;h3 id=&#34;创建链表&#34;&gt;&lt;a href=&#34;#创建链表&#34; class=&#34;headerlink&#34; title=&#34;创建链表&#34;&gt;&lt;/a&gt;创建链表&lt;/h3&gt;&lt;p&gt;定义单链表类，封装基本操作。下面的几个操作都在public里~&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class LinkedList&amp;#123;
public:
    ListNode* head;
    LinkedList():head(nullptr);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;插入节点&#34;&gt;&lt;a href=&#34;#插入节点&#34; class=&#34;headerlink&#34; title=&#34;插入节点&#34;&gt;&lt;/a&gt;插入节点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;头插法:新节点加到链表头部&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void insertAtHead(int data)&amp;#123;
    ListNode* newNode=new ListNode(data);
    newNode-&amp;gt;next=head;
    head=newNode;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;尾插法：:新节点加到链表尾部&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void insertAtTail(int data)&amp;#123;
    ListNode* newNode=new ListNode(data);
    if(!head)&amp;#123;
        head=newNode;
        return;
    &amp;#125;
    ListNode* temp=head;
    while(temp-&amp;gt;next)&amp;#123;
        temp=temp-&amp;gt;next;
    &amp;#125;
    temp-&amp;gt;next=newNode;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;删除节点&#34;&gt;&lt;a href=&#34;#删除节点&#34; class=&#34;headerlink&#34; title=&#34;删除节点&#34;&gt;&lt;/a&gt;删除节点&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void deleteNode(int data)&amp;#123;
    if(!head)&amp;#123;
        return;
    &amp;#125;
    if(head-&amp;gt;data==data)&amp;#123;
        ListNode* temp=head;
        head=head-&amp;gt;next;
        delete temp;
        return;
    &amp;#125;
    ListNode* temp=head;
    while(temp-&amp;gt;next &amp;amp;&amp;amp; temp-&amp;gt;next-&amp;gt;val !=val)&amp;#123;
        temp=temp-&amp;gt;next;
    &amp;#125;
    if(temp-&amp;gt;next)&amp;#123;
        ListNode* delNode=temp-&amp;gt;next;
        temp-&amp;gt;next=temp-&amp;gt;next-&amp;gt;next;
        delete delNode;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改节点&#34;&gt;&lt;a href=&#34;#修改节点&#34; class=&#34;headerlink&#34; title=&#34;修改节点&#34;&gt;&lt;/a&gt;修改节点&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void updateNode(int oldData,newData)&amp;#123;
    ListNode* temp=head;
    while(temp)&amp;#123;
        if(temp-data==oldData)&amp;#123;
            temp-&amp;gt;data==oldData;
            return;
        &amp;#125;
        temp=temp-&amp;gt;next;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;查找节点&#34;&gt;&lt;a href=&#34;#查找节点&#34; class=&#34;headerlink&#34; title=&#34;查找节点&#34;&gt;&lt;/a&gt;查找节点&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool searchNode(int data)&amp;#123;
    ListNode* temp=head;
    while(temp)&amp;#123;
        if(temp-&amp;gt;data==data)&amp;#123;
            return true;
        &amp;#125;
    &amp;#125;
    return false;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打印链表&#34;&gt;&lt;a href=&#34;#打印链表&#34; class=&#34;headerlink&#34; title=&#34;打印链表&#34;&gt;&lt;/a&gt;打印链表&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void printList()&amp;#123;
    ListNode* temp=head;
    while(temp)&amp;#123;
        cout&amp;lt;&amp;lt;temp-&amp;gt;val&amp;lt;&amp;lt;&amp;quot;-&amp;gt;&amp;quot;;
        temp=temp-&amp;gt;next;
    &amp;#125;
    cout&amp;lt;&amp;lt;&amp;quot;NULL&amp;quot;&amp;lt;&amp;lt;endl;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;释放链表内存&#34;&gt;&lt;a href=&#34;#释放链表内存&#34; class=&#34;headerlink&#34; title=&#34;释放链表内存&#34;&gt;&lt;/a&gt;释放链表内存&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;~LinkedList()&amp;#123;
    while(head)&amp;#123;
        ListNode* temp=head;
        head=head-&amp;gt;next;
        delete temp;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;83-删除排序链表中的重复元素&#34;&gt;&lt;a href=&#34;#83-删除排序链表中的重复元素&#34; class=&#34;headerlink&#34; title=&#34;83.删除排序链表中的重复元素&#34;&gt;&lt;/a&gt;83.删除排序链表中的重复元素&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个已排序的链表的头head，删除所有重复的元素，使每个元素只出现一次。返回已排序的链表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中节点数目在范围 [0, 300] 内&lt;/li&gt;
&lt;li&gt;-100 &amp;lt;&amp;#x3D; Node.val &amp;lt;&amp;#x3D; 100&lt;/li&gt;
&lt;li&gt;题目数据保证链表已经按升序排列&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;【如果】头节点&amp;#x3D;空：直接返回该节点&lt;/li&gt;
&lt;li&gt;初始化一个当前节点变量&amp;#x3D;头节点&lt;/li&gt;
&lt;li&gt;【只要】当前&lt;code&gt;节点-&amp;gt;next&lt;/code&gt;不为空&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;「如果」&lt;code&gt;当前节点-&amp;gt;next的值&lt;/code&gt;&amp;#x3D;&lt;code&gt;当前节点的值&lt;/code&gt;： &lt;code&gt;当前节点-&amp;gt;next&lt;/code&gt;&amp;#x3D;&lt;code&gt;当前节点-&amp;gt;next-&amp;gt;next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;「否则」&lt;code&gt;当前节点&lt;/code&gt;&amp;#x3D;&lt;code&gt;当前节点-&amp;gt;next&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;返回头节点&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
 * Definition for singly-linked list.
 * struct ListNode &amp;#123;
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) &amp;#123;&amp;#125;
 *     ListNode(int x) : val(x), next(nullptr) &amp;#123;&amp;#125;
 *     ListNode(int x, ListNode *next) : val(x), next(next) &amp;#123;&amp;#125;
 * &amp;#125;;
 */
class Solution &amp;#123;
public:
    ListNode* deleteDuplicates(ListNode* head) &amp;#123;
        if(head==nullptr)&amp;#123;
            return head;
        &amp;#125;
        ListNode* cur=head;
        while(cur-&amp;gt;next!=nullptr)&amp;#123;
            if(cur-&amp;gt;next-&amp;gt;val==cur-&amp;gt;val)&amp;#123;
                cur-&amp;gt;next=cur-&amp;gt;next-&amp;gt;next;
            &amp;#125;
            else&amp;#123;
                cur=cur-&amp;gt;next;
            &amp;#125;
        &amp;#125;
        return head;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="力扣" />
        <category term="算法" />
        <updated>2025-03-06T02:25:28.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/03/05/%E5%8A%9B%E6%89%A3/Leetcode-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
        <title>Leetcode ⋮ 字符串</title>
        <link rel="alternate" href="https://232akira.github.io/2025/03/05/%E5%8A%9B%E6%89%A3/Leetcode-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
        <content type="html">&lt;h1 id=&#34;58-最后一个单词的长度&#34;&gt;&lt;a href=&#34;#58-最后一个单词的长度&#34; class=&#34;headerlink&#34; title=&#34;58.最后一个单词的长度&#34;&gt;&lt;/a&gt;58.最后一个单词的长度&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;KMP有点难理解了对我而言…看不懂就放两天继续钻，再多看看大佬博客的不同理解，效果会更好。&lt;/p&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参考链接：&lt;br&gt;&lt;a href=&#34;https://www.cnblogs.com/dusf/p/kmp.html&#34;&gt;1️⃣&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://blog.csdn.net/yyzsir/article/details/89462339?ops_request_misc=%257B%2522request%255Fid%2522%253A%252292dce769a412320e26ef79eb85ca18cd%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=92dce769a412320e26ef79eb85ca18cd&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-89462339-null-null.142%5Ev101%5Epc_search_result_base5&amp;utm_term=yyzsir%20kmp&amp;spm=1018.2226.3001.4187&#34;&gt;2️⃣&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;朴素模式匹配BF&#34;&gt;&lt;a href=&#34;#朴素模式匹配BF&#34; class=&#34;headerlink&#34; title=&#34;朴素模式匹配BF&#34;&gt;&lt;/a&gt;朴素模式匹配&lt;code&gt;BF&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;首先来个&lt;strong&gt;暴力&lt;/strong&gt;方法：不匹配模式串就右挪一位。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//暴力模式匹配
int 主串位置i；
int 模式串位置j；
int 主串长度；
int 子串长度；

当（主串位置 &amp;lt;= 主串长度 &amp;amp;&amp;amp; 模式串位置&amp;lt;模式串长度）:
    如果（该主串位置的主串字符 == 该模式串位置的模式串字符）：
        i++；
        j++；
    否则：
        i后退至上一轮匹配开始位置的后一位；
        j归零；
如果（模式串位置 == 模式串长度）：
    匹配成功，返回出现位置；
否则
    匹配失败，返回-1；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;优化模式匹配KMP&#34;&gt;&lt;a href=&#34;#优化模式匹配KMP&#34; class=&#34;headerlink&#34; title=&#34;优化模式匹配KMP&#34;&gt;&lt;/a&gt;优化模式匹配&lt;code&gt;KMP&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;即利用&lt;strong&gt;已经部分匹配&lt;/strong&gt;这个信息，保持&lt;strong&gt;i指针不回溯&lt;/strong&gt;，并通过j指针让&lt;strong&gt;模式串&lt;/strong&gt;尽可能移动到&lt;strong&gt;更有效的位置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么有几个要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;前缀(Prefix)和后缀（Suffix）&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;举个🌰，给定一个字符串s:&lt;code&gt;“abcab”&lt;/code&gt;,那么:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;s的子串&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;前缀&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;后缀&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;c,bc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ab,abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ca,bca&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abcab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ab,abc,abca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b,ab,cab,bcab&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;公共前后缀最长长度&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;从上面的前后缀不难看出，对于s的子串，存在部分前后缀重复的情况，我们需要的正是重复子串的最大长度。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;s的子串&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;前缀&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;后缀&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;公共前后缀最长长度&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;c,bc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;a&lt;/code&gt;,ab,abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;a&lt;/code&gt;,ca,bca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abcab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,&lt;code&gt;ab&lt;/code&gt;,abc,abca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b,&lt;code&gt;ab&lt;/code&gt;,cab,bcab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;next数组（部分匹配表）&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;KMP的next数组告诉我们：当模式串中的某个字符跟主串中的某个字符失配时，模式串下一步应该跳到哪个位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于s的&lt;strong&gt;每个字符&lt;/strong&gt;而言，当这个字符作为子串的最后一位时，公共前后缀最长长度为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;字符（标红部分）&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;公共前后缀最长长度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;a&lt;/code&gt;bcab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;code&gt;b&lt;/code&gt;cab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ab&lt;code&gt;c&lt;/code&gt;ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abc&lt;code&gt;a&lt;/code&gt;b&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abca&lt;code&gt;b&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;那么全部右移一位，令next[0]&amp;#x3D;-1：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;字符&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;i&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;next[i]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;实际匹配过程中，j移动到子串p的next[j]位置，p相对s向右移动j-next[j]位置。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;迭代法求p的next数组&lt;/strong&gt;&lt;br&gt;我们知道：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;next[0]=-1;
next[1]=0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;并且&lt;code&gt;next[j]&lt;/code&gt;代表p[0…j-1]的子串公共前后缀最长长度。&lt;br&gt;∴ 变量定义如下：&lt;br&gt;&lt;code&gt;j&lt;/code&gt;：当前子串指针&lt;br&gt;&lt;code&gt;k&lt;/code&gt;：当前匹配的前后缀长度（&amp;#x3D;next[j-1]）&lt;br&gt;&lt;code&gt;next[j]=k&lt;/code&gt;：next[0]&amp;#x3D;-1 即当p[0]都匹配失败时，只能回到j&amp;#x3D;0重新匹配。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void GetNext(char p[], int next[])
&amp;#123;
    int j = 0, k = -1;
    next[j] = k;
    while (p[j] != &amp;#39;\0&amp;#39;)             //遍历整个子串p
    &amp;#123;
        if (k == -1 || p[j] == p[k]) //匹配成功😀或者k=-1（刚匹配到字串的第一个）
        &amp;#123;
            j++;                     //j指针后移
            k++;
            next[j] = k;             //记录当前前后缀匹配长度
        &amp;#125; 
        else 
        &amp;#123;
            k = next[k];             //匹配失败😭，回溯到next[k]寻找更短的前后缀
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;KMP主算法&lt;br&gt;得到next数组的方法&lt;code&gt;GetNext()&lt;/code&gt;，就可以完整的写出KMP函数。这里写成一个函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int KMP(string s,string p)&amp;#123;
    int m=s.size();
    int n=p.size();
    if(m==0)&amp;#123;
        return 0;
    &amp;#125;
    //⬇️计算next数组
    vector&amp;lt;int&amp;gt;next;
    int j=0;
    for(int i=0;i&amp;lt;n;i++)&amp;#123;
        while(j&amp;gt;0 &amp;amp;&amp;amp; p[i]!=p[j])&amp;#123;
            j=next[j-1];
        &amp;#125;
        if(p[i]==p[j])&amp;#123;
            j++;
        &amp;#125;
        next[i]=j;
    &amp;#125;
    //⬇️KMP搜索匹配
    int j=0;
    for(int i=0;i&amp;lt;m;i++)&amp;#123;
        while(j&amp;gt;0 &amp;amp;&amp;amp; s[i]!=p[j])&amp;#123;
            j=next[j-1];
        &amp;#125;
        if(s[i]==p[j])&amp;#123;
            j++;
        &amp;#125;
        if(j==n)&amp;#123;
            return i-n+1;
        &amp;#125;
    &amp;#125;
    return -1;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说实话，后半部分现在不能完全理解，让我再多磕几天。&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int lengthOfLastWord(string s) &amp;#123;
        int len=s.length();
        int m=0,n=0;
        for(int i=len-1;i&amp;gt;0;i--)&amp;#123;
            if(s[i]!=&amp;#39; &amp;#39; &amp;amp;&amp;amp; (s[i+1]==&amp;#39; &amp;#39; || s[i+1]==&amp;#39;\0&amp;#39;))&amp;#123;
                m=i;
            &amp;#125;
            if((s[i-1]==&amp;#39; &amp;#39; || s[i-1]==&amp;#39;\0&amp;#39;) &amp;amp;&amp;amp; s[i]!=&amp;#39; &amp;#39;)&amp;#123;
                n=i;
                break;
            &amp;#125;
        &amp;#125;
        return m-n+1;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;1021-删除最外层的括号&#34;&gt;&lt;a href=&#34;#1021-删除最外层的括号&#34; class=&#34;headerlink&#34; title=&#34;1021.删除最外层的括号&#34;&gt;&lt;/a&gt;1021.删除最外层的括号&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;有效括号字符串为空 “”、”(“ + A + “)” 或 A + B ，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。&lt;br&gt;例如，””，”()”，”(())()” 和 “(()(()))” 都是有效的括号字符串。&lt;br&gt;如果有效字符串 s 非空，且不存在将其拆分为 s &amp;#x3D; A + B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。&lt;br&gt;给出一个非空有效字符串 s，考虑将其进行原语化分解，使得：s &amp;#x3D; P_1 + P_2 + … + P_k，其中 P_i 是有效括号字符串原语。&lt;br&gt;对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; s.length &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;s[i] 为 ‘(‘ 或 ‘)’&lt;/li&gt;
&lt;li&gt;s 是一个有效括号字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-1&#34;&gt;&lt;a href=&#34;#解题思路-1&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;引用&lt;strong&gt;官方题解&lt;/strong&gt;的话：&lt;br&gt;遍历 s，并用一个栈来表示括号的深度。遇到 ‘(’ 则将字符入栈，遇到 ‘)’ 则将栈顶字符出栈。栈从空到下一次空的过程，则是扫描了一个原语的过程。&lt;/p&gt;
&lt;h2 id=&#34;完整代码-1&#34;&gt;&lt;a href=&#34;#完整代码-1&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    string removeOuterParentheses(string s) &amp;#123;
        string res;
        int cnt=0;
        for(char ch:s)&amp;#123;
            if(ch==&amp;#39;)&amp;#39;)&amp;#123;
                cnt--;
            &amp;#125;
            if(cnt&amp;gt;0)&amp;#123;
                res.push_back(ch);
            &amp;#125;
            if(ch==&amp;#39;(&amp;#39;)&amp;#123;
                cnt++;
            &amp;#125;
        &amp;#125;
        return res;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;859-亲密字符串&#34;&gt;&lt;a href=&#34;#859-亲密字符串&#34; class=&#34;headerlink&#34; title=&#34;859.亲密字符串&#34;&gt;&lt;/a&gt;859.亲密字符串&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你两个字符串 s 和 goal ，只要我们可以通过交换 s 中的两个字母得到与 goal 相等的结果，就返回 true ；否则返回 false 。&lt;br&gt;交换字母的定义是：取两个下标 i 和 j （下标从 0 开始）且满足 i !&amp;#x3D; j ，接着交换 s[i] 和 s[j] 处的字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，在 “abcd” 中交换下标 0 和下标 2 的元素可以生成 “cbad” 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; s.length, goal.length &amp;lt;&amp;#x3D; 2 * 104&lt;/li&gt;
&lt;li&gt;s 和 goal 由小写英文字母组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-2&#34;&gt;&lt;a href=&#34;#解题思路-2&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;都去给我关注&lt;a href=&#34;https://leetcode.cn/u/ac_oier/&#34;&gt;三叶大佬&lt;/a&gt;！&lt;br&gt;既然交换s中的两个字母&amp;#x3D;&amp;#x3D;goal，即为亲密。那么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不亲密&lt;br&gt;&lt;code&gt;s&lt;/code&gt;与&lt;code&gt;goal&lt;/code&gt;长度不同 &lt;strong&gt;或&lt;/strong&gt; 词频不同&lt;/li&gt;
&lt;li&gt;亲密&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;与&lt;code&gt;goal&lt;/code&gt;不同的的字符串数量为2&lt;br&gt;&lt;strong&gt;或&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;与&lt;code&gt;goal&lt;/code&gt;不同的字符串数量为0 并且 &lt;code&gt;s&lt;/code&gt;中存在出现次数&amp;gt;2的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 这里&lt;a href=&#34;https://leetcode.cn/u/MiracleSNeko/&#34;&gt;评论区&lt;/a&gt;特好玩😂“我真傻，真的，”我抬起我没有神采的眼睛来，接着说。“我单知道两个不同的字符互相交换，会生成一个亲密字符串；我不知道相同的字符也会互相换着玩。……” 我接着但是呜咽，说不出成句的话来。（&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;所以注意：即使一开始s&amp;#x3D;&amp;#x3D;goal，但是s怎么交换2字符都不能再&amp;#x3D;&amp;#x3D;goal，也&lt;strong&gt;不算亲密&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;还有一个代码小细节：&lt;strong&gt;为什么是26？&lt;/strong&gt;&lt;br&gt;字符&lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt; - &lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt;共26个。因为题目限定了输入字符串只包含小写字母，所以最多只需要存储26个字符的频次。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;完整代码-2&#34;&gt;&lt;a href=&#34;#完整代码-2&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-CPP&#34;&gt;class Solution &amp;#123;
public:
    bool buddyStrings(string s, string goal) &amp;#123;
        if(s.size()!=goal.size())&amp;#123;
            return false;
        &amp;#125;
        if(s==goal)&amp;#123;
            vector&amp;lt;int&amp;gt; cnt(26);
            for(int i=0;i&amp;lt;s.size();i++)&amp;#123;
                cnt[s[i]-&amp;#39;a&amp;#39;]++;
                if(cnt[s[i]-&amp;#39;a&amp;#39;]&amp;gt;1)&amp;#123;
                    return true;
                &amp;#125;
            &amp;#125;
            return false;
        &amp;#125;
        else&amp;#123;//记录s和goal不相同的字符位置
            int first,second;
            first=-1;
            second=-1;
            for(int i=0;i&amp;lt;s.size();i++)&amp;#123;
                if(s[i]!=goal[i])&amp;#123;
                    if(first==-1)&amp;#123;
                        first=i;
                    &amp;#125;
                    else if(second==-1)&amp;#123;
                        second=i;
                    &amp;#125;
                    else&amp;#123;
                        return false;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        //检查是否可以交换
        return (second!=-1 &amp;amp;&amp;amp; s[first]==goal[second] &amp;amp;&amp;amp; s[second]==goal[first]);
        &amp;#125;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3304-找出第K个字符Ⅰ&#34;&gt;&lt;a href=&#34;#3304-找出第K个字符Ⅰ&#34; class=&#34;headerlink&#34; title=&#34;3304.找出第K个字符Ⅰ&#34;&gt;&lt;/a&gt;3304.找出第K个字符Ⅰ&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Alice 和 Bob 正在玩一个游戏。最初，Alice 有一个字符串 word &amp;#x3D; “a”。&lt;br&gt;给定一个正整数 k。&lt;br&gt;现在 Bob 会要求 Alice 执行以下操作 无限次 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 word 中的每个字符 更改 为英文字母表中的 下一个 字符来生成一个新字符串，并将其 追加 到原始的 word。&lt;br&gt;例如，对 “c” 进行操作生成 “cd”，对 “zb” 进行操作生成 “zbac”。&lt;br&gt;在执行足够多的操作后， word 中 至少 存在 k 个字符，此时返回 word 中第 k 个字符的值。&lt;br&gt;注意，在操作中字符 ‘z’ 可以变成 ‘a’。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; k &amp;lt;&amp;#x3D; 500&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-3&#34;&gt;&lt;a href=&#34;#解题思路-3&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;主打一个模拟：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构造字符串&lt;code&gt;s&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;初始值为&lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每轮迭代，生成s的副本t，然后每个字符变成它的下一个字母：&lt;code&gt;((word[i]-&amp;#39;a&amp;#39;+1)%26+&amp;#39;a&amp;#39;)&lt;/code&gt;&lt;blockquote&gt;
&lt;p&gt;这里用ASCII码运算，因为’a’&lt;del&gt;‘z’为98&lt;/del&gt;233,所以&lt;code&gt;word[i]-&amp;#39;a&amp;#39;&lt;/code&gt;计算word[i]相对与a的偏移量，即字符word[i]是字母表中的&lt;strong&gt;第&lt;code&gt;word[i]-&amp;#39;a&amp;#39;&lt;/code&gt;个字母&lt;/strong&gt;，&lt;code&gt;+1&lt;/code&gt;即为后一个字符；&lt;br&gt;&lt;code&gt;%26+&amp;#39;a&amp;#39;&lt;/code&gt;的原因是：当word[i]为&lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt;时,让26变回0，所以%26取模。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;t&lt;/code&gt;拼接回&lt;code&gt;s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;终止条件&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当&lt;code&gt;s.size()&amp;gt;=k&lt;/code&gt;时，直接返回s[k-1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-3&#34;&gt;&lt;a href=&#34;#完整代码-3&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;c&amp;#x3D;word[i]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    char kthCharacter(int k) &amp;#123;
        string word=&amp;quot;a&amp;quot;;
        while(word.size()&amp;lt;k)&amp;#123;
            string t;
            for(char c:word)&amp;#123;
                t.push_back((c-&amp;#39;a&amp;#39;+1)%26+&amp;#39;a&amp;#39;);
            &amp;#125;
            word+=t;
        &amp;#125;
        return word[k-1];
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;1544-整理字符串&#34;&gt;&lt;a href=&#34;#1544-整理字符串&#34; class=&#34;headerlink&#34; title=&#34;1544.整理字符串&#34;&gt;&lt;/a&gt;1544.整理字符串&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个由大小写英文字母组成的字符串 s 。&lt;br&gt;一个整理好的字符串中，两个相邻字符 s[i] 和 s[i+1]，其中 0&amp;lt;&amp;#x3D; i &amp;lt;&amp;#x3D; s.length-2 ，要满足如下条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 s[i] 是小写字符，则 s[i+1] 不可以是相同的大写字符。&lt;/li&gt;
&lt;li&gt;若 s[i] 是大写字符，则 s[i+1] 不可以是相同的小写字符。&lt;br&gt;请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的 两个相邻 字符并删除，直到字符串整理好为止。&lt;br&gt;请返回整理好的 字符串 。题目保证在给出的约束条件下，测试样例对应的答案是唯一的。&lt;br&gt;注意：空字符串也属于整理好的字符串，尽管其中没有任何字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; s.length &amp;lt;&amp;#x3D; 100&lt;/li&gt;
&lt;li&gt;s 只包含小写和大写英文字母&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-4&#34;&gt;&lt;a href=&#34;#解题思路-4&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;一开始直接用erase删符合条件的字符，而且删除后索引没有回退，报错显示 &lt;code&gt;std::out_of_range&lt;/code&gt;。&lt;br&gt;后来用&lt;strong&gt;栈&lt;/strong&gt;来解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;迭代字符串s，删除互为大小写的字符，其他的正常压栈&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs(stk.back() - ch) == 32&lt;/code&gt; 栈顶字符和当前字符互为大小写（用abs确保大小写前后顺序都可）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;完整代码-4&#34;&gt;&lt;a href=&#34;#完整代码-4&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    string makeGood(string s) &amp;#123;
        string stk;
        for(char ch:s)&amp;#123;
            if(!stk.empty() &amp;amp;&amp;amp; abs(stk.back()-ch)==32)&amp;#123;
                stk.pop_back();
            &amp;#125;
            else&amp;#123;
                stk.push_back(ch);
            &amp;#125;
        &amp;#125;
        return stk;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2116-判断一个括号字符串是否有效&#34;&gt;&lt;a href=&#34;#2116-判断一个括号字符串是否有效&#34; class=&#34;headerlink&#34; title=&#34;2116.判断一个括号字符串是否有效&#34;&gt;&lt;/a&gt;2116.判断一个括号字符串是否有效&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一个括号字符串是只由 ‘(‘ 和 ‘)’ 组成的 非空 字符串。如果一个字符串满足下面 任意一个条件，那么它就是有效的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串为 ().&lt;/li&gt;
&lt;li&gt;它可以表示为 AB（A 与 B 连接），其中A 和 B 都是有效括号字符串。&lt;/li&gt;
&lt;li&gt;它可以表示为 (A) ，其中 A 是一个有效括号字符串。&lt;br&gt;给你一个括号字符串 s 和一个字符串 locked ，两者长度都为 n 。locked &amp;gt;是一个二进制字符串，只包含 ‘0’ 和 ‘1’ 。对于 locked 中 每一个 下标 i ：&lt;/li&gt;
&lt;li&gt;如果 locked[i] 是 ‘1’ ，你 不能 改变 s[i] 。&lt;/li&gt;
&lt;li&gt;如果 locked[i] 是 ‘0’ ，你 可以 将 s[i] 变为 ‘(‘ 或者 ‘)’ 。&lt;br&gt;如果你可以将s变为有效括号字符串，请你返回true，否则返回false。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n &amp;#x3D;&amp;#x3D; s.length &amp;#x3D;&amp;#x3D; locked.length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; n &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;s[i] 要么是 ‘(‘ 要么是 ‘)’ 。&lt;/li&gt;
&lt;li&gt;locked[i] 要么是 ‘0’ 要么是 ‘1’ 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-5&#34;&gt;&lt;a href=&#34;#解题思路-5&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;做到好几个括号匹配问题了，浅总结一下：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;👉️括号平衡的核心规则&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;任何前缀都不能有多余的右括号 &amp;amp; 任何后缀都不能有多余的左括号&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;❔️为什么要检查前&amp;#x2F;后缀而不是整个括号字符串？&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;因为括号是从左到右依次匹配的。一旦前面某个位置出现错误，后面就绝对无法补救。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;✅️关键思路&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前缀遍历判断防止提前失配；后缀遍历防止无法闭合&lt;/li&gt;
&lt;li&gt;两边遍历保证整体匹配&lt;/li&gt;
&lt;li&gt;最终判断是否可以调整&lt;code&gt;（locked[i])&lt;/code&gt;使其符合匹配规则&lt;/li&gt;
&lt;li&gt;注意locked也是字符串不是int&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-5&#34;&gt;&lt;a href=&#34;#完整代码-5&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;用时21ms，还有优化空间。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    bool canBeValid(string s, string locked) &amp;#123;
        if(s.size()%2!=0)&amp;#123;
            return false;
        &amp;#125;
        int left,right;
        left=right=0;
        for(int i=0;i&amp;lt;s.size();i++)&amp;#123;
            if(s[i]==&amp;#39;(&amp;#39; || locked[i]==&amp;#39;0&amp;#39;)&amp;#123;
                left++;
            &amp;#125;
            else&amp;#123;
                right++;
            &amp;#125;
            if(right&amp;gt;left)&amp;#123;
                return false;
            &amp;#125;
        &amp;#125;
        left=right=0;
        for(int i=s.size()-1;i&amp;gt;=0;i--)&amp;#123;
            if(s[i]==&amp;#39;)&amp;#39; || locked[i]==&amp;#39;0&amp;#39;)&amp;#123;
                right++;
            &amp;#125;
            else&amp;#123;
                left++;
            &amp;#125;
            if(left&amp;gt;right)&amp;#123;
                return false;
            &amp;#125;
        &amp;#125;
        return true;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2255-统计是给定字符串前缀的字符串数目&#34;&gt;&lt;a href=&#34;#2255-统计是给定字符串前缀的字符串数目&#34; class=&#34;headerlink&#34; title=&#34;2255.统计是给定字符串前缀的字符串数目&#34;&gt;&lt;/a&gt;2255.统计是给定字符串前缀的字符串数目&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个字符串数组 words 和一个字符串 s ，其中 words[i] 和 s 只包含 小写英文字母 。&lt;br&gt;请你返回 words 中是字符串 s 前缀 的 字符串数目 。&lt;br&gt;一个字符串的 前缀 是出现在字符串开头的子字符串。子字符串 是一个字符串中的连续一段字符序列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; words.length &amp;lt;&amp;#x3D; 1000&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; words[i].length, s.length &amp;lt;&amp;#x3D; 10&lt;/li&gt;
&lt;li&gt;words[i] 和 s 只 包含小写英文字母。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-6&#34;&gt;&lt;a href=&#34;#解题思路-6&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;暴力双循环嵌套，第一个substr得子串，第二个判断子串是否与words[i]相等。&lt;/p&gt;
&lt;h2 id=&#34;完整代码-6&#34;&gt;&lt;a href=&#34;#完整代码-6&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int countPrefixes(vector&amp;lt;string&amp;gt;&amp;amp; words, string s) &amp;#123;
        string ch;
        int cnt=0;
        for(int i=0;i&amp;lt;=s.length();i++)&amp;#123;
            ch=s.substr(0,i);
            for(int j=0;j&amp;lt;words.size();j++)&amp;#123;
                if(words[j]==ch)&amp;#123;
                    cnt++;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return cnt;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2716-最小化字符串长度&#34;&gt;&lt;a href=&#34;#2716-最小化字符串长度&#34; class=&#34;headerlink&#34; title=&#34;2716.最小化字符串长度&#34;&gt;&lt;/a&gt;2716.最小化字符串长度&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个下标从 0 开始的字符串 s ，重复执行下述操作 任意 次：&lt;br&gt;给你一个下标从 0 开始的字符串 s ，重复执行下述操作 任意 次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在字符串中选出一个下标 i ，并使 c 为字符串下标 i 处的字符。并在 i 左侧（如果有）和 右侧（如果有）各 删除 一个距离 i 最近 的字符 c 。&lt;br&gt;请你通过执行上述操作任意次，使 s 的长度 最小化 。&lt;br&gt;返回一个表示 最小化 字符串的长度的整数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; s.length &amp;lt;&amp;#x3D; 100&lt;/li&gt;
&lt;li&gt;s 仅由小写英文字母组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-7&#34;&gt;&lt;a href=&#34;#解题思路-7&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;题目这么长，其实就是字符串&lt;strong&gt;去重&lt;/strong&gt;😂&lt;/p&gt;
&lt;h2 id=&#34;完整代码-7&#34;&gt;&lt;a href=&#34;#完整代码-7&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;我的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int minimizedStringLength(string s) &amp;#123;
        unordered_set&amp;lt;int&amp;gt; num;
        for(char ch:s)&amp;#123;
            if(num.find(ch)==num.end())&amp;#123;
                num.insert(ch);
            &amp;#125;
        &amp;#125;
        return num.size();
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;更简洁的方法&lt;br&gt;看到&lt;a href=&#34;https://leetcode.cn/problems/minimize-string-length/solutions/2296066/o1-kong-jian-wei-yun-suan-xie-fa-pythonj-7t4p/?envType=daily-question&amp;envId=2025-03-28&#34;&gt;题解&lt;/a&gt;，发现也可以直接写成一行：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_set&amp;lt;char&amp;gt;(s.begin(), s.end())&lt;/code&gt;&lt;br&gt;直接用s.begin()和s.end()构造一个unordered_set&lt;char&gt;，会自动去重字符串中的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.size()&lt;/code&gt;&lt;br&gt;计算去重后的字符个数&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;return unoredered_set(s.begin(),s.end().size());
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2109-最小化字符串长度&#34;&gt;&lt;a href=&#34;#2109-最小化字符串长度&#34; class=&#34;headerlink&#34; title=&#34;2109.最小化字符串长度&#34;&gt;&lt;/a&gt;2109.最小化字符串长度&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个下标从 0 开始的字符串 s ，以及一个下标从 0 开始的整数数组 spaces 。&lt;br&gt;数组 spaces 描述原字符串中需要添加空格的下标。每个空格都应该插入到给定索引处的字符值 之前 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，s &amp;#x3D; “EnjoyYourCoffee” 且 spaces &amp;#x3D; [5, 9] ，那么我们需要在 ‘Y’ 和 ‘C’ 之前添加空格，这两个字符分别位于下标 5 和下标 9 。因此，最终得到 “Enjoy Your Coffee” 。&lt;br&gt;请你添加空格，并返回修改后的字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; s.length &amp;lt;&amp;#x3D; 3 * 105&lt;/li&gt;
&lt;li&gt;s 仅由大小写英文字母组成&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; spaces.length &amp;lt;&amp;#x3D; 3 * 105&lt;/li&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; spaces[i] &amp;lt;&amp;#x3D; s.length - 1&lt;/li&gt;
&lt;li&gt;spaces 中的所有值严格递增&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-8&#34;&gt;&lt;a href=&#34;#解题思路-8&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;咳咳，虽然用时击败5%，但是自己写出来中等题而且没超时已经很棒了！夸夸自己😂&lt;/p&gt;
&lt;h2 id=&#34;完整代码-8&#34;&gt;&lt;a href=&#34;#完整代码-8&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    string addSpaces(string s, vector&amp;lt;int&amp;gt;&amp;amp; spaces) &amp;#123;
        int idx=0,cnt=0;
        for(int i=0;i&amp;lt;s.size();i++)&amp;#123;
            while(idx&amp;lt;spaces.size())&amp;#123;
                s.insert(spaces[idx]+cnt,&amp;quot; &amp;quot;);
                idx++;
                cnt++;
            &amp;#125;
        &amp;#125;
        return s;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2278-字母在字符串中的百分比&#34;&gt;&lt;a href=&#34;#2278-字母在字符串中的百分比&#34; class=&#34;headerlink&#34; title=&#34;2278.字母在字符串中的百分比&#34;&gt;&lt;/a&gt;2278.字母在字符串中的百分比&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个字符串s和一个字符 letter，返回在s中等于letter字符所占的百分比，向下取整到最接近的百分比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-9&#34;&gt;&lt;a href=&#34;#解题思路-9&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;我写的时候还很疑惑为什么返回的全是0😅然后意识到：&lt;br&gt;&lt;code&gt;return (cnt/s.size())*100&lt;/code&gt;这样合乎逻辑的写法实际上在这里是错误的。因为cnt&amp;#x2F;s.size()是整数除法（会直接去掉小数部分），那就必&amp;#x3D;0，然后0*100还是0，返回的也是0😂&lt;/p&gt;
&lt;h2 id=&#34;完整代码-9&#34;&gt;&lt;a href=&#34;#完整代码-9&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int percentageLetter(string s, char letter) &amp;#123;
        int cnt = 0;
        for (char ch : s) &amp;#123;
            if (ch == letter) &amp;#123;
                cnt++;
            &amp;#125;
        &amp;#125;
        return (cnt * 100) / s.size();  // 先乘 100 再除，确保整数除法不会丢失精度
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;168-Execl表列名称&#34;&gt;&lt;a href=&#34;#168-Execl表列名称&#34; class=&#34;headerlink&#34; title=&#34;168.Execl表列名称&#34;&gt;&lt;/a&gt;168.Execl表列名称&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个整数 columnNumber ，返回它在 Excel 表中相对应的列名称。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-10&#34;&gt;&lt;a href=&#34;#解题思路-10&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;上来看不明白这题，于是跑去看&lt;a href=&#34;https://leetcode.cn/problems/excel-sheet-column-title/solutions/849680/gong-shui-san-xie-cong-1-kai-shi-de-26-j-g2ur/&#34;&gt;题解&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这道题其实是一道类似于&lt;strong&gt;26进制&lt;/strong&gt;的数字系统模拟。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;列名的构成&lt;br&gt;每个列名由字母组成，并且字母的排列规则类似于进制。比如 A 对应 1，B 对应 2，…，Z 对应 26。接着，列名会继续循环，例如 AA 对应 27，AB 对应 28，…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对应关系&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;第 1 列是 A（即 1）&lt;/li&gt;
&lt;li&gt;第 2 列是 B（即 2）&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;第 26 列是 Z（即 26）&lt;/li&gt;
&lt;li&gt;第 27 列是 AA（即 27），可以看做是从 A（1）到 Z（26）循环一次&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;解题思路&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;每次从最右边的字符开始计算&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt; Excel 列名从A开始（1），而不是从0开始。所以每次取余的时-1。&lt;br&gt;1️⃣模拟进制转换&lt;/li&gt;
&lt;li&gt;每次对26取余，然后将结果映射到 A-Z&lt;/li&gt;
&lt;li&gt;然后columnNumber-1，类似于进制中的进位操作&lt;br&gt;2️⃣构建列名&lt;/li&gt;
&lt;li&gt;每次获得一个字符，将其加入列名的最前面，直到 columnNumber&amp;#x3D;0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-10&#34;&gt;&lt;a href=&#34;#完整代码-10&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    string convertToTitle(int columnNumber) &amp;#123;
        string res=&amp;quot;&amp;quot;;
        while(columnNumber&amp;gt;0)&amp;#123;
            columnNumber--;
            res=char(columnNumber%26+&amp;#39;A&amp;#39;)+res;
            columnNumber/=26;
        &amp;#125;
        return res;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3396-使数组元素互不相同所需的最少操作次数&#34;&gt;&lt;a href=&#34;#3396-使数组元素互不相同所需的最少操作次数&#34; class=&#34;headerlink&#34; title=&#34;3396.使数组元素互不相同所需的最少操作次数&#34;&gt;&lt;/a&gt;3396.使数组元素互不相同所需的最少操作次数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个整数数组 nums，你需要确保数组中的元素 互不相同 。为此，你可以执行以下操作任意次：&lt;br&gt;从数组的开头移除 3 个元素。如果数组中元素少于 3 个，则移除所有剩余元素。&lt;br&gt;注意：空数组也视作为数组元素互不相同。返回使数组元素互不相同所需的 最少操作次数 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 100&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 100&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-11&#34;&gt;&lt;a href=&#34;#解题思路-11&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;说实话这道题真难到我了，虽然是道简单题。&lt;/p&gt;
&lt;p&gt;1️⃣&lt;del&gt;错误解法注意&lt;/del&gt;一开始for循环遍历的同时修改容器：&lt;br&gt;&lt;code&gt;for(int num:nums)&lt;/code&gt;是range-based for loop（基于拷贝值的遍历），是基于nums的快照。但是我在遍历里用了&lt;code&gt;nums.erase(nums.begin(),nums.begin()+3)&lt;/code&gt;会导致迭代器失效😂&lt;/p&gt;
&lt;p&gt;2️⃣修改方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用无限循环&lt;br&gt;直到剩下的数组已经互不相同（flag&amp;#x3D;false）时跳出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bool flag&lt;br&gt;表示当前数组是否有重复元素，初始值为false。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历nums&lt;br&gt;unordered_set&lt;int&gt;一个arr用来判断重复元素。这部分老操作了，上面有几道也是类似的做法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;额外的就是要记得有重复元素时flag置为true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进行一次移除操作，计数器加一&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;剩余元素不足三个，直接清空nums&lt;/li&gt;
&lt;li&gt;否则删除begin()~begin()+3&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;返回cnt&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;完整代码-11&#34;&gt;&lt;a href=&#34;#完整代码-11&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int minimumOperations(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        int cnt=0;
        while(true)&amp;#123;
            unordered_set&amp;lt;int&amp;gt; arr;
            bool flag=false;
            for(int num:nums)&amp;#123;
                if(arr.find(num)!=arr.end())&amp;#123;
                    flag=true;
                    break;
                &amp;#125;
                arr.insert(num);
            &amp;#125;
            if(flag==false)&amp;#123;
                break;
            &amp;#125;
            if(nums.size()&amp;lt;=3)&amp;#123;
                nums.clear();
            &amp;#125;
            else&amp;#123;
                nums.erase(nums.begin(),nums.begin()+3);
            &amp;#125;
            cnt++;
        &amp;#125;
        return cnt;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;594-最长和谐子序列&#34;&gt;&lt;a href=&#34;#594-最长和谐子序列&#34; class=&#34;headerlink&#34; title=&#34;594.最长和谐子序列&#34;&gt;&lt;/a&gt;594.最长和谐子序列&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;和谐数组是指一个数组里元素的最大值和最小值之间的差别 正好是 1 。&lt;br&gt;给你一个整数数组nums，请你在所有可能的子序列中找到最长的和谐子序列的长度。&lt;br&gt;数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 2 * 104&lt;/li&gt;
&lt;li&gt;109 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 109&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-12&#34;&gt;&lt;a href=&#34;#解题思路-12&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;思路非原创。因为我一开始不知道子序列怎么得，所以跑去看&lt;a href=&#34;https://leetcode.cn/problems/longest-harmonious-subsequence/solutions/1110137/zui-chang-he-xie-zi-xu-lie-by-leetcode-s-8cyr/&#34;&gt;题解&lt;/a&gt;了，官方这里讲的很明了👍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从小到大排序（直接sort即可）&lt;/li&gt;
&lt;li&gt;begin&amp;#x2F;end控制头尾元素下标（我这里用的head&amp;#x2F;tail）&lt;/li&gt;
&lt;li&gt;子序列长度end-begin+1&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;完整代码-12&#34;&gt;&lt;a href=&#34;#完整代码-12&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int findLHS(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        sort(nums.begin(),nums.end());
        int head=0,tail=0,ans=0;
        while(tail&amp;lt;nums.size())&amp;#123;
            while(nums[tail]-nums[head]&amp;gt;1)&amp;#123;
                head++;
            &amp;#125;
            if(nums[tail]-nums[head]==1)&amp;#123;
                ans=max(ans,tail-head+1);
            &amp;#125;
            tail++;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="力扣" />
        <category term="算法" />
        <updated>2025-03-05T07:22:48.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/03/04/%E5%8A%9B%E6%89%A3/Leetcode-%E6%95%B0%E7%BB%84/</id>
        <title>Leetcode ⋮ 数组</title>
        <link rel="alternate" href="https://232akira.github.io/2025/03/04/%E5%8A%9B%E6%89%A3/Leetcode-%E6%95%B0%E7%BB%84/"/>
        <content type="html">&lt;h1 id=&#34;912-排序数组&#34;&gt;&lt;a href=&#34;#912-排序数组&#34; class=&#34;headerlink&#34; title=&#34;912.排序数组&#34;&gt;&lt;/a&gt;912.排序数组&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个整数数组 nums，请你将该数组升序排列。&lt;br&gt;你必须在 不使用任何内置函数 的情况下解决问题，时间复杂度为 O(nlog(n))，并且空间复杂度尽可能小。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;先来总结一下&lt;/p&gt;
&lt;h3 id=&#34;十大排序算法&#34;&gt;&lt;a href=&#34;#十大排序算法&#34; class=&#34;headerlink&#34; title=&#34;十大排序算法~&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.runoob.com/w3cnote/ten-sorting-algorithm.html&#34;&gt;十大排序算法&lt;/a&gt;~&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;排序算法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;「平均」时间复杂度&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;「最坏」时间复杂度&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;「最好」时间复杂度&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;空间复杂度&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;稳定性&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;适用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;冒泡排序&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n^2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n^2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数据量小、基本有序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;选择排序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n^2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n^2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n^2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数据量小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;插入排序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n^2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n^2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数据量小、基本有序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;希尔排序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlog^2n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlog^2n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;大数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;归并排序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;链表排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;快速排序&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n^2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(logn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;处理大数据最常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;堆排序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;优先队列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;计数排序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n+k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n+k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n+k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数据范围较小、整数分布集中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;桶排序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n+k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n+k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n^2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n+k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数据分布均匀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;基数排序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n×k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n×k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n+k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(n+k)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;稳定&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;非比较排序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;其他总结&#34;&gt;&lt;a href=&#34;#其他总结&#34; class=&#34;headerlink&#34; title=&#34;其他总结&#34;&gt;&lt;/a&gt;其他总结&lt;/h3&gt;&lt;p&gt;1️⃣按稳定性分类&lt;br&gt;在排序前后，相等元素的相对顺序是否保持不变，如果相对顺序不变，则该排序算法是稳定的，否则是不稳定的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定排序&lt;/strong&gt;：冒泡&amp;#x2F;插入&amp;#x2F;归并&amp;#x2F;基数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不稳定排序&lt;/strong&gt;：选择&amp;#x2F;快速&amp;#x2F;堆&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2️⃣排序算法优劣的&lt;a href=&#34;https://blog.csdn.net/2203_75646004/article/details/135172906&#34;&gt;衡量标准&lt;/a&gt;：&lt;br&gt;🔹 &lt;strong&gt;时间复杂度&lt;/strong&gt; 排序速度（比较&amp;amp;移动次数）&lt;br&gt;🔹 &lt;strong&gt;空间复杂度&lt;/strong&gt; 占内存辅助空间的大小&lt;br&gt;🔹 &lt;strong&gt;稳定性&lt;/strong&gt; A与B的关键字相等，排序后A、B的先后次序保持不变&lt;/p&gt;
&lt;p&gt;3️⃣按排序类别分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;插入&lt;/strong&gt;：插入&amp;#x2F;希尔&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择&lt;/strong&gt;：选择&amp;#x2F;堆&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交换&lt;/strong&gt;：冒泡&amp;#x2F;快速&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;归并&lt;/strong&gt;：归并&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基数&lt;/strong&gt;：基数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;1232-缀点成线&#34;&gt;&lt;a href=&#34;#1232-缀点成线&#34; class=&#34;headerlink&#34; title=&#34;1232.缀点成线&#34;&gt;&lt;/a&gt;1232.缀点成线&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个数组 coordinates ，其中 coordinates[i] &amp;#x3D; [x, y] ， [x, y] 表示横坐标为 x、纵坐标为 y 的点。请你来判断，这些点是否在该坐标系中属于同一条直线上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 &amp;lt;&amp;#x3D; coordinates.length &amp;lt;&amp;#x3D; 1000&lt;/li&gt;
&lt;li&gt;coordinates[i].length &amp;#x3D;&amp;#x3D; 2&lt;/li&gt;
&lt;li&gt;-10^4 &amp;lt;&amp;#x3D; coordinates[i][0], coordinates[i][1] &amp;lt;&amp;#x3D; 10^4&lt;/li&gt;
&lt;li&gt;coordinates 中不含重复的点&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-1&#34;&gt;&lt;a href=&#34;#解题思路-1&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;我本来是想着soeasy，用y&amp;#x2F;x对比斜率就行了，然后发现部分样例通不过。定睛一看，发现直线不一定过原点…&lt;/p&gt;
&lt;p&gt;那么就不使用斜率，而是使用&lt;strong&gt;斜率交叉乘法&lt;/strong&gt;：如果所有点都在同一条直线上，那么&lt;strong&gt;对于任意两点P1(x1,y1)、P2(x2,y2)、P3(x3,y3)之间的斜率必须相等&lt;/strong&gt;。也就是&lt;code&gt;(y2-y1)/(x2-x1)=(y3-y1)/(x3-x1)&lt;/code&gt;。为避免除法带来的浮点误差，用&lt;strong&gt;交叉相乘&lt;/strong&gt;验证更好。&lt;br&gt;&lt;em&gt;&lt;strong&gt;并且注意！&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;因为我的验证方法需要三个点，但是这道题有可&lt;code&gt;coordinates,length=2&lt;/code&gt;的情况，那就直接返回true，因为&lt;strong&gt;两点确定一条直线&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;完整代码-1&#34;&gt;&lt;a href=&#34;#完整代码-1&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    bool checkStraightLine(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; coordinates) &amp;#123;
        int x1,y1,x2,y2;
        x1=coordinates[0][0];
        y1=coordinates[0][1];
        x2=coordinates[1][0];
        y2=coordinates[1][1];
        if(coordinates.size()==2)&amp;#123;
            return true;
        &amp;#125;
        for(int i=2;i&amp;lt;coordinates.size();i++)&amp;#123;
            int x3=coordinates[i][0];
            int y3=coordinates[i][1];
            if((y2-y1)*(x3-x1)!=(x2-x1)*(y3-y1))&amp;#123;
                return false;
            &amp;#125;
        &amp;#125;
        return true;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2597-美丽子集的数目&#34;&gt;&lt;a href=&#34;#2597-美丽子集的数目&#34; class=&#34;headerlink&#34; title=&#34;2597.美丽子集的数目&#34;&gt;&lt;/a&gt;2597.美丽子集的数目&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个由正整数组成的数组 nums 和一个 正 整数 k 。&lt;br&gt;如果 nums 的子集中，任意两个整数的绝对差均不等于 k ，则认为该子数组是一个 美丽 子集。&lt;br&gt;返回数组 nums 中 非空 且 美丽 的子集数目。&lt;br&gt;nums 的子集定义为：可以经由 nums 删除某些元素（也可能不删除）得到的一个数组。只有在删除元素时选择的索引不同的情况下，两个子集才会被视作是不同的子集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 18&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums[i], k &amp;lt;&amp;#x3D; 1000&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-2&#34;&gt;&lt;a href=&#34;#解题思路-2&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;涉及&lt;strong&gt;子集&lt;/strong&gt;相关问题，一般有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回溯&lt;/li&gt;
&lt;li&gt;位运算&lt;br&gt;本题选择&lt;strong&gt;回溯&lt;/strong&gt;算法。因为该方法可在生成子集时&lt;strong&gt;剪枝&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设 nums &amp;#x3D; [2, 4, 6]，我们希望生成所有子集,那么回溯的选择路径如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          dfs(0)
        /        \
    不选2        选2
     / \         /  \
  不选4  选4   不选4  选4
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整代码-2&#34;&gt;&lt;a href=&#34;#完整代码-2&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int ans=0;
    void dfs(int index,vector&amp;lt;int&amp;gt;&amp;amp; nums,unordered_map&amp;lt;int,int&amp;gt;&amp;amp; freq,int k)&amp;#123;
        if(index==nums.size())&amp;#123;
            ans++;
            return;
        &amp;#125;
        dfs(index+1,nums,freq,k);
        if(freq[nums[index]-k]==0 &amp;amp;&amp;amp; freq[nums[index]+k]==0)&amp;#123;
            freq[nums[index]]++;
            dfs(index+1,nums,freq,k);
            freq[nums[index]]--;
        &amp;#125;
    &amp;#125;
    int beautifulSubsets(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) &amp;#123;
        unordered_map&amp;lt;int,int&amp;gt; freq;
        dfs(0,nums,freq,k);
        return ans-1;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2070-每一个查询的最大美丽值&#34;&gt;&lt;a href=&#34;#2070-每一个查询的最大美丽值&#34; class=&#34;headerlink&#34; title=&#34;2070.每一个查询的最大美丽值&#34;&gt;&lt;/a&gt;2070.每一个查询的最大美丽值&lt;/h1&gt;&lt;p&gt;又美丽了家人们🤣&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个二维整数数组 items ，其中 items[i] &amp;#x3D; [pricei, beautyi] 分别表示每一个物品的价格和美丽值 。&lt;br&gt;同时给你一个下标从 0 开始的整数数组 queries 。对于每个查询 queries[j] ，你想求出价格小于等于 queries[j] 的物品中，最大的美丽值 是多少。如果不存在符合条件的物品，那么查询的结果为 0 。&lt;br&gt;请你返回一个长度与 queries 相同的数组 answer，其中 answer[j]是第 j 个查询的答案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;br&gt;-1 &amp;lt;&amp;#x3D; items.length, queries.length &amp;lt;&amp;#x3D; 105&lt;br&gt;-items[i].length &amp;#x3D;&amp;#x3D; 2&lt;br&gt;-1 &amp;lt;&amp;#x3D; pricei, beautyi, queries[j] &amp;lt;&amp;#x3D; 109&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-3&#34;&gt;&lt;a href=&#34;#解题思路-3&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;h3 id=&#34;二分查找&#34;&gt;&lt;a href=&#34;#二分查找&#34; class=&#34;headerlink&#34; title=&#34;二分查找&#34;&gt;&lt;/a&gt;二分查找&lt;/h3&gt;&lt;p&gt;首先复习一下二分查找，我又忘了咋写。&lt;a href=&#34;https://232akira.github.io/2025/03/02/%E5%8A%9B%E6%89%A3%E5%A4%87%E5%BF%98%E5%BD%95/&#34;&gt;另一篇&lt;/a&gt;copy来的&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;要查找的目标&lt;code&gt;target&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;索引&lt;code&gt;index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;左、右指示符&lt;code&gt;left&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中间指示符&lt;code&gt;mid&lt;/code&gt;&lt;br&gt;主要思路就是计算&lt;code&gt;mid&lt;/code&gt;的位置：&lt;br&gt;1️⃣&lt;code&gt;nums[mid] == target&lt;/code&gt; 🤭找到了&lt;br&gt;2️⃣&lt;code&gt;nums[mid] &amp;lt; target&lt;/code&gt; → target在left的右边 → left右移 👉️left&amp;#x3D;mid+1;&lt;br&gt;3️⃣&lt;code&gt;nums[mid] &amp;gt; target&lt;/code&gt; → target在right的左边 → right左移 👉️right&amp;#x3D;mid-1;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//形参：vector&amp;lt;int&amp;gt;nums,int target
int left=0;
int right=nums.size()-1;
while(left&amp;lt;=right)&amp;#123;
    int mid=left+(right-left)/2;
    if(nums[mid]=target)&amp;#123;
        return mid;
    &amp;#125;
    else if(nums[mid]&amp;lt;target)&amp;#123;
        left=mid+1;
    &amp;#125;
    else&amp;#123;
        right=mid-1;
    &amp;#125;
    return index;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;本题思路&#34;&gt;&lt;a href=&#34;#本题思路&#34; class=&#34;headerlink&#34; title=&#34;本题思路&#34;&gt;&lt;/a&gt;本题思路&lt;/h3&gt;&lt;h4 id=&#34;方法一&#34;&gt;&lt;a href=&#34;#方法一&#34; class=&#34;headerlink&#34; title=&#34;方法一&#34;&gt;&lt;/a&gt;&lt;em&gt;&lt;strong&gt;方法一&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;&lt;p&gt;完球，力扣的急速判题卡死了😂第一个方法直观而且没用二分，美美超时。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;int&amp;gt; maximumBeauty(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; items, vector&amp;lt;int&amp;gt;&amp;amp; queries) &amp;#123;
        vector&amp;lt;int&amp;gt; answer(queries.size(),0);
        for(int j=0;j&amp;lt;queries.size();j++)&amp;#123;
            int target=queries[j];
            int maxnum=0;
            for(int i=0;i&amp;lt;items.size();i++)&amp;#123;
                if(items[i][0]&amp;lt;=target)&amp;#123;
                    maxnum=max(maxnum,items[i][1]);
                &amp;#125;
            &amp;#125;
            answer[j]=maxnum;
        &amp;#125;
        return answer;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;方法二&#34;&gt;&lt;a href=&#34;#方法二&#34; class=&#34;headerlink&#34; title=&#34;方法二&#34;&gt;&lt;/a&gt;&lt;em&gt;&lt;strong&gt;方法二&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;&lt;p&gt;老老实实用二分。注意：二分查找的前提是&lt;strong&gt;有序&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先按照price递增排序;&lt;/li&gt;
&lt;li&gt;定义美丽数组;&lt;/li&gt;
&lt;li&gt;遍历items:&lt;strong&gt;存储当前遍历到的最大美丽值&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;定义答案数组;&lt;/li&gt;
&lt;li&gt;遍历querties：&lt;strong&gt;二分查找&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二分查找目标🤟&lt;code&gt;items[i][0] &amp;lt;= queries[j]&lt;/code&gt; 的最大 i&lt;br&gt;有点绕了，兄弟兄弟…&lt;/p&gt;
&lt;h2 id=&#34;完整代码-3&#34;&gt;&lt;a href=&#34;#完整代码-3&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;int&amp;gt; maximumBeauty(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; items, vector&amp;lt;int&amp;gt;&amp;amp; queries) &amp;#123;
        sort(items.begin(),items.end());
        vector&amp;lt;int&amp;gt;maxbeauty(items.size());
        maxbeauty[0]=items[0][1];
        for(int i=1;i&amp;lt;items.size();i++)&amp;#123;
            maxbeauty[i]=max(maxbeauty[i-1],items[i][1]);
        &amp;#125;
        vector&amp;lt;int&amp;gt;answer(queries.size(),0);
        for(int j=0;j&amp;lt;queries.size();j++)&amp;#123;
            int target=queries[j];
            int left=0;
            int right=items.size()-1;
            int index=-1;
            while(left&amp;lt;=right)&amp;#123;
                int mid=left+(right-left)/2;
                if(items[mid][0]&amp;lt;=target)&amp;#123;
                    index=mid;
                    left=mid+1;
                &amp;#125;
                else&amp;#123;
                    right=mid-1;
                &amp;#125;
            &amp;#125;
            if(index!=-1)&amp;#123;
                answer[j]=maxbeauty[index];
            &amp;#125;
        &amp;#125;
        return answer;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2269-找到一个数字的-K-美丽值&#34;&gt;&lt;a href=&#34;#2269-找到一个数字的-K-美丽值&#34; class=&#34;headerlink&#34; title=&#34;2269.找到一个数字的 K 美丽值&#34;&gt;&lt;/a&gt;2269.找到一个数字的 K 美丽值&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个下标从0开始的整数数组nums。对于每个下标i（1 &amp;lt;&amp;#x3D; i &amp;lt;&amp;#x3D; nums.length - 2），nums[i] 的美丽值等于：&lt;br&gt;2，对于所有 0 &amp;lt;&amp;#x3D; j &amp;lt; i 且 i &amp;lt; k &amp;lt;&amp;#x3D; nums.length - 1 ，满足 nums[j] &amp;lt; nums[i] &amp;lt; nums[k]&lt;br&gt;1，如果满足 nums[i - 1] &amp;lt; nums[i] &amp;lt; nums[i + 1] ，且不满足前面的条件&lt;br&gt;0，如果上述条件全部不满足&lt;br&gt;返回符合 1 &amp;lt;&amp;#x3D; i &amp;lt;&amp;#x3D; nums.length - 2 的所有 nums[i] 的美丽值的总和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-4&#34;&gt;&lt;a href=&#34;#解题思路-4&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;难点在于nums[i]的美丽值为2的情况：&lt;/strong&gt;&lt;br&gt;突然想起来高中数学老师的口头禅：“大于大的，小于小的”。&lt;br&gt;nums[i]需要满足：比其左侧所有的nums[j]更大，以及&lt;em&gt;比其右侧所有的nums&lt;/em&gt;[k]更小。&lt;br&gt;即&lt;strong&gt;大于左侧最大值，小于右侧最小值&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*max_element(arr.begin(),arr.end())&lt;/code&gt;求数组最大值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*min_element(arr.begin(),arr.end())&lt;/code&gt;求数组最小值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;？超时了😇我还说想清楚了不难呢…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int sumOfBeauties(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        int maxval,minval,ans=0;
        for(int i=1;i&amp;lt;nums.size()-1;i++)&amp;#123;
            maxval=*max_element(nums.begin(),nums.begin()+i);
            minval=*min_element(nums.begin()+i+1,nums.end());
            if(maxval&amp;lt;nums[i] &amp;amp;&amp;amp; minval&amp;gt;nums[i])&amp;#123;
                ans+=2;
            &amp;#125;
            else if(nums[i-1]&amp;lt;nums[i] &amp;amp;&amp;amp; nums[i+1]&amp;gt;nums[i])&amp;#123;
                ans+=1;
            &amp;#125;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;改进方法就是：左侧最大值和右侧最小值各自都用一个数组存起来所有i的情况，再进行条件判断。同时可以存一个，另一个随每次判断进行更新就好。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义左侧最大int数组leftMax;
遍历i从1到nums.size()：
    leftMax[i]=max(左侧最大数组[i-1],原数组[i-1]);
int 美丽值;
定义右侧最小int变量rightMin并初始化为原数组[length()-1];
遍历i从length()-2到0:
    如果（条件一）：
        美丽值+=2;
    否则如果（条件2）：
        美丽值+=1;
    更新右侧最小值=min（右侧最小值，原数组[i]）;
返回美丽值
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整代码-4&#34;&gt;&lt;a href=&#34;#完整代码-4&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int sumOfBeauties(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        vector&amp;lt;int&amp;gt; leftMax(nums.size(),0);
        for(int i=1;i&amp;lt;nums.size();i++)&amp;#123;
            leftMax[i]=max(leftMax[i-1],nums[i-1]);
        &amp;#125;
        int ans=0;
        int rightMin=nums[nums.size()-1];
        for(int i=nums.size()-2;i&amp;gt;0;i--)&amp;#123;
            if(leftMax[i]&amp;lt;nums[i] &amp;amp;&amp;amp; nums[i]&amp;lt;rightMin)&amp;#123;
                ans+=2;
            &amp;#125;
            else if(nums[i-1]&amp;lt;nums[i] &amp;amp;&amp;amp; nums[i]&amp;lt;nums[i+1])&amp;#123;
                ans+=1;
            &amp;#125;
            rightMin=min(rightMin,nums[i]);
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;杨辉三角（一维数组版）&#34;&gt;&lt;a href=&#34;#杨辉三角（一维数组版）&#34; class=&#34;headerlink&#34; title=&#34;杨辉三角（一维数组版）&#34;&gt;&lt;/a&gt;杨辉三角（一维数组版）&lt;/h1&gt;&lt;h2 id=&#34;完整代码-5&#34;&gt;&lt;a href=&#34;#完整代码-5&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void Print_TR(int n)&amp;#123;
    int arr[n]=&amp;#123;1&amp;#125;;
    for(int i=0;i&amp;lt;n;i++)&amp;#123;
        for(int j=i;j&amp;gt;0;j--)&amp;#123;
            arr[j]+=arr[j-1];
        &amp;#125;
        //打印
        for(int j=0;j&amp;lt;=i;j++)&amp;#123;
            printf(&amp;quot;%d &amp;quot;,arr[j]);
        &amp;#125;
        printf(&amp;quot;\n&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2610-转换二维数组&#34;&gt;&lt;a href=&#34;#2610-转换二维数组&#34; class=&#34;headerlink&#34; title=&#34;2610.转换二维数组&#34;&gt;&lt;/a&gt;2610.转换二维数组&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个整数数组 nums 。请你创建一个满足以下条件的二维数组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二维数组应该 只 包含数组 nums 中的元素。&lt;/li&gt;
&lt;li&gt;二维数组中的每一行都包含 不同 的整数。&lt;/li&gt;
&lt;li&gt;二维数组的行数应尽可能 少 。&lt;br&gt;返回结果数组。如果存在多种答案，则返回其中任何一种。&lt;br&gt;请注意，二维数组的每一行上可以存在不同数量的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 200&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; nums.length&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-5&#34;&gt;&lt;a href=&#34;#解题思路-5&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;用&lt;strong&gt;哈希表&lt;/strong&gt;！😎统计元素出现次数，定义一个一维数组存每行元素。每用一个元素。哈希表中该元素次数–（当次数为0时）从表中删除该元素。&lt;/p&gt;
&lt;p&gt;这里看题解 涉及到stl&lt;strong&gt;迭代器&lt;/strong&gt;&lt;code&gt;it&lt;/code&gt;的用法：对于定义一个哈希表:&lt;code&gt;unordered_map&amp;lt;int,int&amp;gt;cnt&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当用&lt;code&gt;auto:it&lt;/code&gt;遍历&lt;code&gt;cnt.begin()&lt;/code&gt;到&lt;code&gt;!=cnt.end()&lt;/code&gt;时&lt;/li&gt;
&lt;li&gt;&lt;code&gt;it-&amp;gt;first&lt;/code&gt;即为哈希表键值对(key,value)中的&lt;code&gt;key&lt;/code&gt;。本题中即为&lt;strong&gt;元素本身&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;it-&amp;gt;second&lt;/code&gt;即为哈希表键值对(key,value)中的&lt;code&gt;value&lt;/code&gt;。本题中即为元素的&lt;strong&gt;出现次数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-6&#34;&gt;&lt;a href=&#34;#完整代码-6&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;感谢&lt;a href=&#34;https://leetcode.cn/u/endlesscheng/&#34;&gt;灵神&lt;/a&gt;题解，教会我很多&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; findMatrix(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        unordered_map&amp;lt;int,int&amp;gt; cnt;
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ans;
        for(int x:nums)&amp;#123;
            cnt[x]++;
        &amp;#125;
        while(!cnt.empty())&amp;#123;
            vector&amp;lt;int&amp;gt;row;
            for(auto it=cnt.begin();it!=cnt.end();)&amp;#123;
                row.push_back(it-&amp;gt;first);
                if(--it-&amp;gt;second==0)&amp;#123;
                    it=cnt.erase(it);
                &amp;#125;
                else&amp;#123;
                    it++;
                &amp;#125;
            &amp;#125;
            ans.push_back(row);
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2643-一最多的行&#34;&gt;&lt;a href=&#34;#2643-一最多的行&#34; class=&#34;headerlink&#34; title=&#34;2643.一最多的行&#34;&gt;&lt;/a&gt;2643.一最多的行&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个大小为 m x n 的二进制矩阵 mat ，请你找出包含最多 1 的行的下标（从 0 开始）以及这一行中 1 的数目。&lt;br&gt;如果有多行包含最多的 1 ，只需要选择 行下标最小 的那一行。&lt;br&gt;返回一个由行下标和该行中 1 的数量组成的数组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m &amp;#x3D;&amp;#x3D; mat.length &lt;/li&gt;
&lt;li&gt;n &amp;#x3D;&amp;#x3D; mat[i].length &lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; m, n &amp;lt;&amp;#x3D; 100 &lt;/li&gt;
&lt;li&gt;mat[i][j] 为 0 或 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-6&#34;&gt;&lt;a href=&#34;#解题思路-6&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;最轻松的一集😂但是我写的代码略史山，还有优化空间。&lt;/p&gt;
&lt;h2 id=&#34;完整代码-7&#34;&gt;&lt;a href=&#34;#完整代码-7&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;这里直接用&lt;code&gt;int ones = count(mat[i].begin(), mat[i].end(), 1); &lt;/code&gt;统计1的个数可以减少一次遍历。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;int&amp;gt; rowAndMaximumOnes(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; mat) &amp;#123;
        vector&amp;lt;int&amp;gt; cnt(100,0),ans;
        int index=0;
        for(int i=0;i&amp;lt;mat.size();i++)&amp;#123;
            for(int j=0;j&amp;lt;mat[i].size();j++)&amp;#123;
                if(mat[i][j]==1)&amp;#123;
                    cnt[i]++;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        int maxnum=cnt[0];
        for(int i=0;i&amp;lt;cnt.size();i++)&amp;#123;
            if(cnt[i]&amp;gt;maxnum)&amp;#123;
                maxnum=cnt[i];
                index=i;
            &amp;#125;
        &amp;#125;
        ans.push_back(index);
        ans.push_back(cnt[index]);
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;661-图片平滑器&#34;&gt;&lt;a href=&#34;#661-图片平滑器&#34; class=&#34;headerlink&#34; title=&#34;661.图片平滑器&#34;&gt;&lt;/a&gt;661.图片平滑器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;图像平滑器&lt;/strong&gt;是大小为 3 x 3 的过滤器，用于对图像的每个单元格平滑处理，平滑处理后单元格的值为该单元格的平均灰度。&lt;br&gt;每个单元格的&lt;strong&gt;平均灰度&lt;/strong&gt;定义为：该单元格自身及其周围的 8 个单元格的平均值，结果需向下取整。（即，需要计算蓝色平滑器中 9 个单元格的平均值）。&lt;br&gt;如果一个单元格周围存在单元格缺失的情况，则计算平均灰度时不考虑缺失的单元格（即，需要计算红色平滑器中 4 个单元格的平均值）。&lt;br&gt;给你一个表示图像灰度的&lt;code&gt;m x n&lt;/code&gt;整数矩阵&lt;code&gt;img&lt;/code&gt;，返回对图像的每个单元格平滑处理后的图像 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m &amp;#x3D;&amp;#x3D; img.length&lt;/li&gt;
&lt;li&gt;n &amp;#x3D;&amp;#x3D; img[i].length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; m, n &amp;lt;&amp;#x3D; 200&lt;/li&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; img[i][j] &amp;lt;&amp;#x3D; 255&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-7&#34;&gt;&lt;a href=&#34;#解题思路-7&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;关键知道矩阵边界，也就是不全加9个数的情况怎么算。我一开始还想着一个个情况穷举😂其实3*3区域安心两层遍历就行，对于这道题不会超时。&lt;br&gt;***刷题以来第一次碰到四层循环能通过的。。。***不看题解都不敢想像这个方法。&lt;/p&gt;
&lt;h2 id=&#34;完整代码-8&#34;&gt;&lt;a href=&#34;#完整代码-8&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; imageSmoother(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; img) &amp;#123;
        int m,n;
        m=img.size();
        n=img[0].size();
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;ans(m,vector&amp;lt;int&amp;gt;(n,0));
        for(int i=0;i&amp;lt;m;i++)&amp;#123;
            for(int j=0;j&amp;lt;n;j++)&amp;#123;
                int sum,cnt;
                sum=cnt=0;
                for(int r=i-1;r&amp;lt;=i+1;r++)&amp;#123;
                    for(int c=j-1;c&amp;lt;=j+1;c++)&amp;#123;
                        if(0&amp;lt;=r &amp;amp;&amp;amp; r&amp;lt;m &amp;amp;&amp;amp; 0&amp;lt;=c &amp;amp;&amp;amp; c&amp;lt;n)&amp;#123;
                            sum+=img[r][c];
                            cnt++;
                        &amp;#125;
                    &amp;#125;
                &amp;#125;
                ans[i][j]=cnt&amp;gt;0?sum/cnt:img[i][j];
            &amp;#125;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;27171-对角线上不同值的数量差&#34;&gt;&lt;a href=&#34;#27171-对角线上不同值的数量差&#34; class=&#34;headerlink&#34; title=&#34;27171.对角线上不同值的数量差&#34;&gt;&lt;/a&gt;27171.对角线上不同值的数量差&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个下标从 0 开始、大小为 m x n 的二维矩阵 grid ，请你求解大小同样为 m x n 的答案矩阵 answer 。&lt;br&gt;矩阵 answer 中每个单元格 (r, c) 的值可以按下述方式进行计算：&lt;br&gt;令 topLeft[r][c] 为矩阵 grid 中单元格 (r, c) 左上角对角线上 不同值 的数量。&lt;br&gt;令 bottomRight[r][c] 为矩阵 grid 中单元格 (r, c) 右下角对角线上 不同值 的数量。&lt;br&gt;然后 answer[r][c] &amp;#x3D; |topLeft[r][c] - bottomRight[r][c]| 。&lt;br&gt;返回矩阵 answer 。&lt;br&gt;矩阵对角线 是从最顶行或最左列的某个单元格开始，向右下方向走到矩阵末尾的对角线。&lt;br&gt;如果单元格 (r1, c1) 和单元格 (r, c) 属于同一条对角线且 r1 &amp;lt; r ，则单元格 (r1, c1) 属于单元格 (r, c) 的左上对角线。类似地，可以定义右下对角线。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m &amp;#x3D;&amp;#x3D; grid.length&lt;/li&gt;
&lt;li&gt;n &amp;#x3D;&amp;#x3D; grid[i].length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; m, n, grid[i][j] &amp;lt;&amp;#x3D; 50&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-8&#34;&gt;&lt;a href=&#34;#解题思路-8&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;几个地方思考的时候容易卡住：&lt;/p&gt;
&lt;p&gt;1️⃣&lt;strong&gt;不同值是什么意思？&lt;/strong&gt;&lt;br&gt;我一开始理解的是对于grid[i][j]，它的左对角线上和它不同的元素数量叫做topleft，右对角线上和它不同的元素数量叫做bottomright，然后就自以为大彻大悟☝️🤓&lt;del&gt;美美去打代码然后寄了&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;个人理解中，实际上这里的不同值的意思是：对于这半拉对角线上的所有元素而言的&lt;strong&gt;种类&lt;/strong&gt;数量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如全是1，那就1种，topleft&amp;#x3D;1；&lt;/li&gt;
&lt;li&gt;如果有1有0，那就是2种，topleft&amp;#x3D;2。&lt;br&gt;右对角线同理.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2️⃣&lt;strong&gt;如何统计“不同值”？&lt;/strong&gt;&lt;br&gt;这里选用基于红黑树的std::set而不是之前我们常用的unordered_map。因为对于本题，只需要判断「是否不同」而不需要记录「不同的次数」。&lt;br&gt;对于set&lt;int&gt;myset 而言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果rfind.find(grid[r][c])&amp;#x3D;&amp;#x3D;rfind.end()即为不同值&lt;/li&gt;
&lt;li&gt;新的不同值用myset.insert()添加&lt;/li&gt;
&lt;li&gt;myset.size()获得不同值的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-9&#34;&gt;&lt;a href=&#34;#完整代码-9&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; differenceOfDistinctValues(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) &amp;#123;
        int m,n;
        m=grid.size();
        n=grid[0].size();
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; answer(m,vector&amp;lt;int&amp;gt;(n,0));
        for(int i=0;i&amp;lt;m;i++)&amp;#123;
            for(int j=0;j&amp;lt;n;j++)&amp;#123;
                int lcnt,rcnt;
                lcnt=rcnt=0;
                set&amp;lt;int&amp;gt; lfind,rfind;
                //左对角线
                int r=i-1;
                int c=j-1;
                while(r&amp;gt;=0 &amp;amp;&amp;amp; c&amp;gt;=0)&amp;#123;
                    if(「」)&amp;#123;
                        lcnt++;
                    &amp;#125;
                    lfind.insert(grid[r][c]);
                    r--;
                    c--;
                &amp;#125;
                //右对角线
                r=i+1;
                c=j+1;
                while(r&amp;lt;m &amp;amp;&amp;amp; c&amp;lt;n)&amp;#123;
                    if(rfind.find(grid[r][c])==rfind.end())&amp;#123;
                        rcnt++;
                    &amp;#125;
                    rfind.insert(grid[r][c]);
                    r++;
                    c++;
                &amp;#125;
                answer[i][j]=abs(lcnt-rcnt);
            &amp;#125;
        &amp;#125;
        return answer;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3375-使数组的值全部为K的最少操作次数&#34;&gt;&lt;a href=&#34;#3375-使数组的值全部为K的最少操作次数&#34; class=&#34;headerlink&#34; title=&#34;3375.使数组的值全部为K的最少操作次数&#34;&gt;&lt;/a&gt;3375.使数组的值全部为K的最少操作次数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个整数数组 nums 和一个整数 k 。&lt;br&gt;如果一个数组中所有 严格大于 h 的整数值都 相等 ，那么我们称整数 h 是 合法的 。&lt;br&gt;比方说，如果 nums &amp;#x3D; [10, 8, 10, 8] ，那么 h &amp;#x3D; 9 是一个 合法 整数，因为所有满足 nums[i] &amp;gt; 9 的数都等于 10 ，但是 5 不是 合法 整数。&lt;br&gt;你可以对 nums 执行以下操作：&lt;br&gt;选择一个整数 h ，它对于 当前 nums 中的值是合法的。&lt;br&gt;对于每个下标 i ，如果它满足 nums[i] &amp;gt; h ，那么将 nums[i] 变为 h 。&lt;br&gt;你的目标是将 nums 中的所有元素都变为 k ，请你返回 最少 操作次数。如果无法将所有元素都变 k ，那么返回 -1 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-9&#34;&gt;&lt;a href=&#34;#解题思路-9&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;呃(⊙﹏⊙)自认为语文水平还不错，但是这题目着实看不懂…&lt;/p&gt;
&lt;p&gt;看了评论区&amp;amp;题解佬们的耐心讲解，我浅总结一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数返回&lt;br&gt;返回&lt;strong&gt;将nums所有元素变为k&lt;/strong&gt;的最少操作次数，变不了返回-1。&lt;/li&gt;
&lt;li&gt;元素变k的前提&lt;br&gt;nums中&amp;gt;k的所有元素都相等，将这些元素全变为k。&lt;/li&gt;
&lt;li&gt;无法满足返回-1是什么情况&lt;br&gt;如果nums中但凡有元素小于k，那么一定不中。&lt;/li&gt;
&lt;li&gt;最少操作次数&lt;br&gt;&lt;del&gt;关键来了&lt;/del&gt;数组中所有大于k的元素种类。对，就这样就行😅&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;完整代码-10&#34;&gt;&lt;a href=&#34;#完整代码-10&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int minOperations(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) &amp;#123;
        int cnt=0;
        unordered_set&amp;lt;int&amp;gt;hashset;
        for(int num:nums)&amp;#123;
            if(num&amp;lt;k)&amp;#123;
                return -1;
            &amp;#125;
            else&amp;#123;
                if(hashset.find(num)==hashset.end() &amp;amp;&amp;amp; num&amp;gt;k)&amp;#123;
                    hashset.insert(num);
                    cnt++;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return cnt;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2563-统计公平数对的数目&#34;&gt;&lt;a href=&#34;#2563-统计公平数对的数目&#34; class=&#34;headerlink&#34; title=&#34;2563.统计公平数对的数目&#34;&gt;&lt;/a&gt;2563.统计公平数对的数目&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个下标从 0 开始、长度为 n 的整数数组 nums ，和两个整数 lower 和 upper ，返回 公平数对的数目 。&lt;br&gt;如果 (i, j) 数对满足以下情况，则认为它是一个 公平数对 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; i &amp;lt; j &amp;lt; n，且&lt;/li&gt;
&lt;li&gt;lower &amp;lt;&amp;#x3D; nums[i] + nums[j] &amp;lt;&amp;#x3D; upper&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;nums.length &amp;#x3D;&amp;#x3D; n&lt;/li&gt;
&lt;li&gt;-109 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 109&lt;/li&gt;
&lt;li&gt;-109 &amp;lt;&amp;#x3D; lower &amp;lt;&amp;#x3D; upper &amp;lt;&amp;#x3D; 109&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-10&#34;&gt;&lt;a href=&#34;#解题思路-10&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;PS：因为实习鸽了五个工作日的我想了想又苟回来日更辣！！！现在是2025年4月19！等做到1000题再停更，主打一个保持编码的思维和手感😼&lt;del&gt;毕竟斥巨资开了力扣年卡不写一年也太亏了&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码-11&#34;&gt;&lt;a href=&#34;#完整代码-11&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="力扣" />
        <category term="算法" />
        <updated>2025-03-04T11:15:05.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/03/04/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%982-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
        <title>专题2️⃣ ⋮ 贪心算法</title>
        <link rel="alternate" href="https://232akira.github.io/2025/03/04/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%982-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
        <content type="html">&lt;p&gt;力扣连着刷到了几个贪心，而且另一篇笔记字数要爆了，决定先按大类慢慢分一下。&lt;br&gt;🤟&lt;a href=&#34;https://zhuanlan.zhihu.com/p/180104885&#34;&gt;参考链接&lt;/a&gt;&lt;br&gt;规律特征就是更加注重当前的状态,通常用于组合优化问题。即每一次都做出&lt;strong&gt;当前&lt;/strong&gt;看起来&lt;strong&gt;最好的&lt;/strong&gt;选择。每次只需要考虑一个问题，并通常是自底向上求解。即&lt;strong&gt;局部最优→全局最优&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;455-分发饼干&#34;&gt;&lt;a href=&#34;#455-分发饼干&#34; class=&#34;headerlink&#34; title=&#34;455.分发饼干&#34;&gt;&lt;/a&gt;455.分发饼干&lt;/h1&gt;&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;h1 id=&#34;976-三角形的最大周长&#34;&gt;&lt;a href=&#34;#976-三角形的最大周长&#34; class=&#34;headerlink&#34; title=&#34;976.三角形的最大周长&#34;&gt;&lt;/a&gt;976.三角形的最大周长&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定由一些正数（代表长度）组成的数组 nums ，返回 由其中三个长度组成的、面积不为零的三角形的最大周长 。如果不能形成任何面积不为零的三角形，返回 0。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;3 &amp;lt;= nums.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums[i] &amp;lt;= 106&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-1&#34;&gt;&lt;a href=&#34;#解题思路-1&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;因为题目需要的是最大的三角形周长，所以不需要暴力列举所有的情况再一一对比，而是直接奔着“最大”这个目标求解就行:&lt;br&gt;三条边a,b,c（假设从小到大已排好），当a+b&amp;gt;c时满足三角形。&lt;strong&gt;如果不满足，必须换更大的a,b&lt;/strong&gt;。&lt;br&gt;贪心优化策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nums排序&lt;/li&gt;
&lt;li&gt;从最大的三个数开始 尝试是否满足&lt;/li&gt;
&lt;li&gt;若无法满足，往前找更小的a,b&lt;/li&gt;
&lt;li&gt;一旦找到符合条件的三边，直接返回&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-1&#34;&gt;&lt;a href=&#34;#完整代码-1&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int largestPerimeter(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        sort(nums.begin(),nums.end());
        for(int i=nums.size()-1;i&amp;gt;=2;i++)&amp;#123;
            if(nums[i-1]+nums[i-2]&amp;gt;nums[i])
        &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;860-柠檬水找零&#34;&gt;&lt;a href=&#34;#860-柠檬水找零&#34; class=&#34;headerlink&#34; title=&#34;860.柠檬水找零&#34;&gt;&lt;/a&gt;860.柠檬水找零&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。&lt;br&gt;每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。&lt;br&gt;注意，一开始你手头没有任何零钱。&lt;br&gt;给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= bills.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bills[i] 不是 5 就是 10 或是 20 &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-2&#34;&gt;&lt;a href=&#34;#解题思路-2&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;**找零时，尽量先用大额。**并且只记录5美元、10美元的数量（因为这题目的情况不可能找20块）那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收到5美元  直接收 &lt;/li&gt;
&lt;li&gt;收到10美元 &lt;code&gt;10-5=5&lt;/code&gt; 找5美元（如果有）&lt;/li&gt;
&lt;li&gt;收到20美元 &lt;strong&gt;贪心来了~&lt;/strong&gt;&lt;code&gt;20-5=15&lt;/code&gt;优先使用10+5找零，否则用5+5+5（如果有）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-2&#34;&gt;&lt;a href=&#34;#完整代码-2&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    bool lemonadeChange(vector&amp;lt;int&amp;gt;&amp;amp; bills) &amp;#123;
        int five=0,ten=0;
        for(int bill:bills)&amp;#123;
            if(bill==5)&amp;#123;
                five++;
            &amp;#125;
            else if(bill==10)&amp;#123;
                if(five!=0)&amp;#123;
                    five--;
                    ten++;
                &amp;#125;
                else&amp;#123;
                    return false;
                &amp;#125;
            &amp;#125;
            else if(bill==20)&amp;#123;
                if(ten&amp;gt;0 &amp;amp;&amp;amp; five&amp;gt;0)&amp;#123;
                    ten--;
                    five--;
                &amp;#125;
                else if(five&amp;gt;=3)&amp;#123;
                    five-=3;
                &amp;#125;
                else&amp;#123;
                    return false;
                &amp;#125;
                
            &amp;#125;
        &amp;#125;
        return true;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2680-最大或值&#34;&gt;&lt;a href=&#34;#2680-最大或值&#34; class=&#34;headerlink&#34; title=&#34;2680.最大或值&#34;&gt;&lt;/a&gt;2680.最大或值&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个下标从 0 开始长度为 n 的整数数组 nums 和一个整数 k 。每一次操作中，你可以选择一个数并将它乘 2 。&lt;br&gt;你最多可以进行 k 次操作，请你返回 nums[0] | nums[1] | … | nums[n - 1] 的最大值。&lt;br&gt;a | b 表示两个整数 a 和 b 的 按位或 运算。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 109&lt;/li&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; k &amp;lt;&amp;#x3D; 15&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-3&#34;&gt;&lt;a href=&#34;#解题思路-3&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;做了这么几道中等题，发现很多难就难在变量大的时候怎么才能不超时的问题上😂&lt;/p&gt;
&lt;p&gt;因此要注意：&lt;br&gt;&lt;em&gt;&lt;strong&gt;👉️按位或（|）的特性&lt;/strong&gt;&lt;/em&gt;（二进制数）某一位只要有一个是1，按位或的结果该位就是1。&lt;br&gt;题目需要按位或的最大值，那么也就意味着尽量让高位变成1。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;👉️不能直接暴力枚举&lt;/strong&gt;&lt;/em&gt;否则会超时。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;🔍️按位运算总结&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;运算&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;运算符&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;按位与&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;两位都是1，结果才是1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;5 &amp;amp; 3 = 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;按位或&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;一竖杠&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;只要有一个是1，结果就是1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;5 或 3 = 7&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;按位异或&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;相同为0，不同为1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;5 ^ 3 = 6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;按位取反&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0变1，1变0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;~5 = -6&lt;/code&gt;（补码）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;左移&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;乘2^k&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;5 &amp;lt;&amp;lt; 1 = 10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;右移&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;除2^k&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;5 &amp;gt;&amp;gt; 1 = 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;解决方案：&lt;br&gt;&lt;strong&gt;1️⃣预计算最初的或值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;orsum|=num&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2️⃣按位或最大化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遍历nums，对每个num[i]进行优化&lt;/li&gt;
&lt;li&gt;假设nums[i]被选中，*2^k，计算新的或值&lt;/li&gt;
&lt;li&gt;对于已经选定的nums[i]，&lt;code&gt;0~i-1&lt;/code&gt;的或值设为&lt;code&gt;leftor&lt;/code&gt;;&lt;code&gt;i+1~n-1&lt;/code&gt;的或值设为&lt;code&gt;rightor&lt;/code&gt;。那么新的或值只需要让&lt;code&gt;leftor | nums[i]*2^k | rightor&lt;/code&gt;即可。&lt;/li&gt;
&lt;li&gt;nums[i]*2^k用&lt;code&gt;nums[i] * (1LL &amp;lt;&amp;lt; k)&lt;/code&gt;。表示位运算中的左移操作，让nums[i]的二进制向左移动k位右侧补零，等价于&lt;code&gt;*2^k&lt;/code&gt;（这里可以自己试一试：&lt;code&gt;5&amp;lt;&amp;lt;3&lt;/code&gt;等价于&lt;code&gt;40=5*8&lt;/code&gt;。）；LL防止溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;🆗其他问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么 &lt;code&gt;left[i+1] = left[i] | nums[i]&lt;/code&gt;，&lt;code&gt;right[i] = right[i+1] | nums[i]&lt;/code&gt;？&lt;br&gt;按位或计算有个特点：计算或值具有单调性，也就是a|b|c的结果一定不会比a|b小。&lt;br&gt;&lt;code&gt;left[i]&lt;/code&gt;存的是nums[0]~nums[1]的或值，又因为left[i+1]相比left[i]需要加入nums[i]进行或值运算，所以&lt;code&gt;left[i+1] = left[i] | nums[i]&lt;/code&gt;；&lt;code&gt;right[i]&lt;/code&gt;同理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-3&#34;&gt;&lt;a href=&#34;#完整代码-3&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    long long maximumOr(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) &amp;#123;
        int n=nums.size();
        vector&amp;lt;long long&amp;gt; left(n+1,0),right(n+1,0);
        for(int i=0;i&amp;lt;n;i++)&amp;#123;
            left[i+1]=left[i]|nums[i];
        &amp;#125;
        for(int i=n-1;i&amp;gt;=0;i--)&amp;#123;
            right[i]=right[i+1]|nums[i];
        &amp;#125;
        long long maxor=0;
        for(int i=0;i&amp;lt;n;i++)&amp;#123;
            long long newor;
            newor=left[i]|(nums[i]*(1LL&amp;lt;&amp;lt;k))|right[i+1];
            maxor=max(maxor,newor);
        &amp;#125;
        return maxor;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2829-k-avoiding数组的最小总和&#34;&gt;&lt;a href=&#34;#2829-k-avoiding数组的最小总和&#34; class=&#34;headerlink&#34; title=&#34;2829.k-avoiding数组的最小总和&#34;&gt;&lt;/a&gt;2829.k-avoiding数组的最小总和&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你两个整数 n 和 k 。&lt;br&gt;对于一个由 不同 正整数组成的数组，如果其中不存在任何求和等于 k 的不同元素对，则称其为 k-avoiding 数组。&lt;br&gt;返回长度为 n 的 k-avoiding 数组的可能的最小总和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; n, k &amp;lt;&amp;#x3D; 50&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-4&#34;&gt;&lt;a href=&#34;#解题思路-4&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数组总和最小&lt;/strong&gt;&lt;br&gt;从&lt;code&gt;1&lt;/code&gt;开始逐步添加符合条件的数字，直到数组长度达到&lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免和为k&lt;/strong&gt;&lt;br&gt;尝试加入&lt;code&gt;x&lt;/code&gt;时，确保数组中不存在&lt;code&gt;k-x&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;完整代码-4&#34;&gt;&lt;a href=&#34;#完整代码-4&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int minimumSum(int n, int k) &amp;#123;
        vector&amp;lt;int&amp;gt; ans;
        unordered_set&amp;lt;int&amp;gt; used;
        int num=1;
        while(ans.size()&amp;lt;n)&amp;#123;
            if(used.find(k-num)==used.end())&amp;#123;
                ans.push_back(num);
                used.insert(num);
            &amp;#125;
            num++;
        &amp;#125;
        return accumulate(ans.begin(),ans.end(),0);
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2712-使所有字符相等的最小成本&#34;&gt;&lt;a href=&#34;#2712-使所有字符相等的最小成本&#34; class=&#34;headerlink&#34; title=&#34;2712.使所有字符相等的最小成本&#34;&gt;&lt;/a&gt;2712.使所有字符相等的最小成本&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个下标从 0 开始、长度为 n 的二进制字符串 s ，你可以对其执行两种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选中一个下标 i 并且反转从下标 0 到下标 i（包括下标 0 和下标 i ）的所有字符，成本为 i + 1 。&lt;/li&gt;
&lt;li&gt;选中一个下标 i 并且反转从下标 i 到下标 n - 1（包括下标 i 和下标 n - 1 ）的所有字符，成本为 n - i 。&lt;br&gt;返回使字符串内所有字符 相等 需要的 最小成本 。&lt;br&gt;反转字符意味着：如果原来的值是 ‘0’ ，则反转后值变为 ‘1’ ，反之亦然。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; s.length &amp;#x3D;&amp;#x3D; n &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;s[i] 为 ‘0’ 或 ‘1’&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-5&#34;&gt;&lt;a href=&#34;#解题思路-5&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;所有字符相等&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;全&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;全&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;对于&lt;code&gt;i&lt;/code&gt;，反转的成本&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;反转前缀&lt;code&gt;[0,i]&lt;/code&gt;，成本&lt;code&gt;i+1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反转后缀&lt;code&gt;[i,n-1]&lt;/code&gt;，成本&lt;code&gt;n-i&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;核心问题&lt;/strong&gt;&lt;br&gt;对每个i，求出 min（s全1）和min（s全0），再对二者求min。&lt;br&gt;说人话就是：从0开始遍历，如果&lt;code&gt;s[i] ≠ s[i+1]&lt;/code&gt;，那么我们此时有两种选择：反转前缀[0,i] 或 反转后缀[i,n-1]。对于每一个这样需要反转的i，我们选择反转前缀还是后缀的原则就是&lt;strong&gt;哪个成本小选哪个&lt;/strong&gt;。最后得到的总成本也必然最小。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;👉️难理解的部分：&lt;code&gt;min(i,n-i)&lt;/code&gt; 或 &lt;code&gt;min(i+1,n-i-1)&lt;/code&gt;。&lt;br&gt;个人理解是因为对于此算法，实际上的分界点在s[i]和s[i+1]之间。也就是说：修正分界点需要做的是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反转0~i&lt;/li&gt;
&lt;li&gt;反转i+1~n-1&lt;br&gt;这样求得的min才能保证达到我们“最小成本”的目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👉️这里学到一个小知识：s.size()返回的类型为&lt;strong&gt;无符号整数（unsigned int）&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size_t&lt;/code&gt;无符号整型 (unsigned)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;是C++标准库中专门用于表示数组、容器的大小或索引的类型&lt;/li&gt;
&lt;li&gt;不能表示负数&lt;/li&gt;
&lt;li&gt;在 64 位系统上，size_t通常是unsigned long，比int更大，可表示更大的范围。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;有符号整型 (signed)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;是C++默认的整数类型，可以存储正数、负数和 0。&lt;/li&gt;
&lt;li&gt;取值范围一般是 [-2³¹, 2³¹ - 1]（32位系统） 或 [-2⁶³, 2⁶³ - 1]（64位系统）&lt;br&gt;&lt;em&gt;&lt;strong&gt;更适合存储一般的计数、索引、数学运算，而size_t主要用于数组大小和内存管理。&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;完整代码-5&#34;&gt;&lt;a href=&#34;#完整代码-5&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    long long minimumCost(string s) &amp;#123;
        long long int sum=0;
        int n=s.size();
        for(int i=0;i&amp;lt;n-1;i++)&amp;#123;
            if(s[i]!=s[i+1])&amp;#123;
                sum+=min(i+1,n-i-1);
            &amp;#125;
        &amp;#125;
        return sum;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;11-盛最多水的容器&#34;&gt;&lt;a href=&#34;#11-盛最多水的容器&#34; class=&#34;headerlink&#34; title=&#34;11.盛最多水的容器&#34;&gt;&lt;/a&gt;11.盛最多水的容器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。&lt;br&gt;找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;br&gt;返回容器可以储存的最大水量。&lt;br&gt;说明：你不能倾斜容器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n &amp;#x3D;&amp;#x3D; height.length&lt;/li&gt;
&lt;li&gt;2 &amp;lt;&amp;#x3D; n &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; height[i] &amp;lt;&amp;#x3D; 104&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-6&#34;&gt;&lt;a href=&#34;#解题思路-6&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;莫名想起接雨水（？😅一眼做不出来，上&lt;a href=&#34;https://leetcode.cn/problems/container-with-most-water/solutions/94102/on-shuang-zhi-zhen-jie-fa-li-jie-zheng-que-xing-tu/&#34;&gt;题解&lt;/a&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哪里贪心？&lt;br&gt; &lt;a href=&#34;https://leetcode.cn/u/teaven/&#34;&gt;评论&lt;/a&gt;佬的解释：永远找最高和最远的柱子，局部最优推出全局最优。双指针的解法存在遗漏，但对全局最优解无影响。&lt;/li&gt;
&lt;li&gt;双指针的解法本质：缩减搜索空间。&lt;/li&gt;
&lt;li&gt;排除i&amp;#x2F;j的配对可能性：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;i和j相遇算法结束；&lt;/li&gt;
&lt;li&gt;对于两边指针i、j，如果移动其中一边，那么新的容器h一定 不大于 另一边的柱子高度；&lt;/li&gt;
&lt;li&gt;收缩过程中，配对的h较低一方的柱子必定被舍弃所有可能，该位置指针向中间收缩。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-6&#34;&gt;&lt;a href=&#34;#完整代码-6&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;单看代码理解应该也没问题，这道题知道思路后写起来是无压力的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int maxArea(vector&amp;lt;int&amp;gt;&amp;amp; height) &amp;#123;
        int left,right;
        left=0;
        right=height.size()-1;
        int ans=0;
        while(left&amp;lt;right)&amp;#123;
            int h=height[left]&amp;lt;height[right]?height[left]:height[right];
            ans=max(ans,(right-left)*h);
            if(height[left]&amp;lt;height[right])&amp;#123;
                left++;
            &amp;#125;
            else&amp;#123;
                right--;
            &amp;#125;           
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="专题" />
        <category term="力扣" />
        <category term="算法" />
        <updated>2025-03-04T05:41:46.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/03/02/%E5%A4%87%E5%BF%98/%E5%A4%87%E5%BF%98%E5%BD%95-%E5%8A%9B%E6%89%A3/</id>
        <title>备忘录 ⋮ 力扣</title>
        <link rel="alternate" href="https://232akira.github.io/2025/03/02/%E5%A4%87%E5%BF%98/%E5%A4%87%E5%BF%98%E5%BD%95-%E5%8A%9B%E6%89%A3/"/>
        <content type="html">&lt;p&gt;一些问题总结和标签比较杂、没有分类的题目会放到这篇。&lt;/p&gt;
&lt;h1 id=&#34;基础算法问题&#34;&gt;&lt;a href=&#34;#基础算法问题&#34; class=&#34;headerlink&#34; title=&#34;基础算法问题&#34;&gt;&lt;/a&gt;基础算法问题&lt;/h1&gt;&lt;p&gt;这些题听着老熟了，一到写起来就主打一个略有耳闻🫠&lt;/p&gt;
&lt;h2 id=&#34;题目一览&#34;&gt;&lt;a href=&#34;#题目一览&#34; class=&#34;headerlink&#34; title=&#34;题目一览&#34;&gt;&lt;/a&gt;题目一览&lt;/h2&gt;&lt;p&gt;省流表👇️&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目并非只有表中那几个，可在&lt;a href=&#34;https://leetcode.cn/problemset/&#34;&gt;此页&lt;/a&gt;自行筛选。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1️⃣数组与数学类&#34;&gt;&lt;a href=&#34;#1️⃣数组与数学类&#34; class=&#34;headerlink&#34; title=&#34;1️⃣数组与数学类&#34;&gt;&lt;/a&gt;&lt;strong&gt;1️⃣数组与数学类&lt;/strong&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;题目&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;力扣题号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;变体 &amp;#x2F; 要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;杨辉三角&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[118/119]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;一维数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;斐波那契数列&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[509]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;爬楼梯问题&lt;code&gt;[70]&lt;/code&gt;&amp;#x2F;递归&amp;#x2F;迭代&amp;#x2F;动态规划&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;两数之和&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[1]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;哈希表优化时间复杂度到O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;合并两个有序数组&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[88]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;原地合并（从后向前填充）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;最大子数组和&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[53]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;动态规划&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;2️⃣字符串操作类&#34;&gt;&lt;a href=&#34;#2️⃣字符串操作类&#34; class=&#34;headerlink&#34; title=&#34;2️⃣字符串操作类&#34;&gt;&lt;/a&gt;&lt;strong&gt;2️⃣字符串操作类&lt;/strong&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;题目&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;力扣题号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;变体&amp;#x2F;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;反转字符串&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[344]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;原地修改（双指针）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;有效的括号&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[20]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;用栈实现括号匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;最长公共前缀&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[14]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;纵向扫描&amp;#x2F;分治&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;字符串转整数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[8]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;处理边界（溢出&amp;#x2F;符号&amp;#x2F;空格）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;3️⃣链表类&#34;&gt;&lt;a href=&#34;#3️⃣链表类&#34; class=&#34;headerlink&#34; title=&#34;3️⃣链表类&#34;&gt;&lt;/a&gt;&lt;strong&gt;3️⃣链表类&lt;/strong&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;题目&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;力扣题号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;变体&amp;#x2F;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;反转链表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[206]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;迭代&amp;#x2F;递归&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;环形链表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[141]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;快慢指针判环&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;合并两个有序链表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[21]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;迭代&amp;#x2F;递归&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;删除链表倒数第N个节点&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[19]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;一趟扫描&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;4️⃣树与递归&#34;&gt;&lt;a href=&#34;#4️⃣树与递归&#34; class=&#34;headerlink&#34; title=&#34;4️⃣树与递归&#34;&gt;&lt;/a&gt;&lt;strong&gt;4️⃣树与递归&lt;/strong&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;题目&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;力扣题号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;变体&amp;#x2F;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;二叉树的最大深度&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[104]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;迭代&amp;#x2F;递归&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;对称二叉树&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[101]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;迭代（队列&amp;#x2F;栈）&amp;#x2F;递归&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;路径总和&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[112]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;动回溯法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;5️⃣动态规划&#34;&gt;&lt;a href=&#34;#5️⃣动态规划&#34; class=&#34;headerlink&#34; title=&#34;5️⃣动态规划&#34;&gt;&lt;/a&gt;&lt;strong&gt;5️⃣动态规划&lt;/strong&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;题目&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;力扣题号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;变体&amp;#x2F;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;打家劫舍&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[198]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;状态转移方程推导&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;零钱兑换&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[322]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;完全背包问题解法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;最长递增子序列&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[300]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(nlogn)优化解法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;6️⃣排序与查找&#34;&gt;&lt;a href=&#34;#6️⃣排序与查找&#34; class=&#34;headerlink&#34; title=&#34;6️⃣排序与查找&#34;&gt;&lt;/a&gt;&lt;strong&gt;6️⃣排序与查找&lt;/strong&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;题目&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;力扣题号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;变体&amp;#x2F;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;快速排序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;力扣排序题均可&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;手写递归和非递归版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;二分查找&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[53]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;处理边界条件（左闭右闭&amp;#x2F;左闭右开）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;寻找峰值&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[53]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;二分法的特殊应用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;7️⃣其他高频&#34;&gt;&lt;a href=&#34;#7️⃣其他高频&#34; class=&#34;headerlink&#34; title=&#34;7️⃣其他高频&#34;&gt;&lt;/a&gt;&lt;strong&gt;7️⃣其他高频&lt;/strong&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;题目&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;力扣题号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;变体&amp;#x2F;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;LRU缓存&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[146]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;手写递归和非递归版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;实现队列&amp;#x2F;栈&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[232/225]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;处理边界条件（左闭右闭&amp;#x2F;左闭右开）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;汉明距离&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;[461]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;二分法的特殊应用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;具体题目思路&amp;amp;代码记录见各个专题🤗&lt;/p&gt;
&lt;h1 id=&#34;简单题&#34;&gt;&lt;a href=&#34;#简单题&#34; class=&#34;headerlink&#34; title=&#34;简单题&#34;&gt;&lt;/a&gt;简单题&lt;/h1&gt;&lt;h2 id=&#34;66-加一&#34;&gt;&lt;a href=&#34;#66-加一&#34; class=&#34;headerlink&#34; title=&#34;66.加一&#34;&gt;&lt;/a&gt;66.加一&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。&lt;br&gt;最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。&lt;br&gt;你可以假设除了整数 0 之外，这个整数不会以零开头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;判断数组末尾是否有9：
    无9：末尾数字+1;
    有9：
        是否全为9：
            是全9：
                构造长度=size+1的数组，首位=1，其余全置0;
            非全9：
                找到倒着数第一个不是9的元素,
                该元素加1,
                末尾所有的9置0;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;AC代码&#34;&gt;&lt;a href=&#34;#AC代码&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;int&amp;gt; plusOne(vector&amp;lt;int&amp;gt;&amp;amp; digits) &amp;#123;
        int len=digits.size();
        if(digits[len-1]!=9)&amp;#123;
            digits[len-1]+=1;
        &amp;#125;
        else&amp;#123;
            int cnt=0;//记录9出现的次数，第一个非9元素的下标即为len-cnt-1
            for(int i=len-1;i&amp;gt;=0;i--)&amp;#123;
                if(digits[i]==9)&amp;#123;
                    cnt++;
                &amp;#125;
                else&amp;#123;
                    break;
                &amp;#125;
            &amp;#125;
            if(cnt==len)&amp;#123;
                digits.insert(digits.begin(),1);
                for(int i=1;i&amp;lt;len+1;i++)&amp;#123;
                    digits[i]=0;
                &amp;#125;
            &amp;#125;
            else&amp;#123;
                int index=len-cnt-1;
                digits[index]+=1;
                for(int i=index+1;i&amp;lt;len;i++)&amp;#123;
                    digits[i]=0;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return digits;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;896-单调数列&#34;&gt;&lt;a href=&#34;#896-单调数列&#34; class=&#34;headerlink&#34; title=&#34;896.单调数列&#34;&gt;&lt;/a&gt;896.单调数列&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;如果数组是单调递增或单调递减的，那么它是&lt;strong&gt;单调&lt;/strong&gt;的。&lt;br&gt;如果对于所有 i &amp;lt;&amp;#x3D; j，nums[i] &amp;lt;&amp;#x3D; nums[j]，那么数组 nums 是单调递增的。 如果对于所有 i &amp;lt;&amp;#x3D; j，nums[i] &amp;gt;&amp;#x3D; nums[j]，那么数组 nums 是单调递减的。&lt;br&gt;当给定的数组 nums 是单调数组时返回 true，否则返回 false。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-1&#34;&gt;&lt;a href=&#34;#解题思路-1&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;bool 递增变量=真，递减变量=真；
遍历数组：
    如果该元素+1 大于 该元素：
        标记递减变量=假；
    如果该元素+1 小于 该元素：
        标记递增变量=假；
如果递增or递减=真，返回真；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;AC代码-1&#34;&gt;&lt;a href=&#34;#AC代码-1&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    bool isMonotonic(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        bool increase=true,decrease=true;
        for(int i=0;i&amp;lt;nums.size()-1;i++)&amp;#123;
            if(nums[i+1] &amp;gt; nums[i])&amp;#123;
                decrease=false;
            &amp;#125;
            if(nums[i+1] &amp;lt; nums[i])&amp;#123;
                increase=false;
            &amp;#125;
        &amp;#125;
        return decrease || increase;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;896-罗马数字转整数&#34;&gt;&lt;a href=&#34;#896-罗马数字转整数&#34; class=&#34;headerlink&#34; title=&#34;896.罗马数字转整数&#34;&gt;&lt;/a&gt;896.罗马数字转整数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。&lt;/strong&gt;&lt;br&gt;字符          数值&lt;br&gt;I             1&lt;br&gt;V             5&lt;br&gt;X             10&lt;br&gt;L             50&lt;br&gt;C             100&lt;br&gt;D             500&lt;br&gt;M             1000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。&lt;/li&gt;
&lt;li&gt;通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：&lt;br&gt;①I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。&lt;br&gt;②X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。&lt;br&gt;③C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;给定一个罗马数字，将其转换成整数。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-2&#34;&gt;&lt;a href=&#34;#解题思路-2&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;这题一开始我无从下手，直接跑去翻题解了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++ &lt;a href=&#34;https://www.w3cschool.cn/cpp/cpp-fu8l2ppt.html&#34;&gt;map&lt;/a&gt;用法&lt;/strong&gt;&lt;br&gt;想起来python的字典。同样cpp stl中的map提供的是一种键值对（key-value）容器，其中的数据成对出现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化：&lt;code&gt;map类型 &amp;lt;数据类型1，数据类型2&amp;gt; 容器名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于map类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;键值对容器&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;实现方式&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;键值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;时间复杂度&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;是否有序&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;使用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;哈希表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键-值对&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;快速查找键对应的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;红黑树&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键-值对&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(logn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;有序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;需要有序键值对&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;unordered_set&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;哈希表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;快速查找元素是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;红黑树&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(logn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;有序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;需要排序的集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;哈希表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键-值&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;有重复键且不关心顺序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;对于本题&lt;/strong&gt;&lt;br&gt;引用评论区&lt;a href=&#34;https://leetcode.cn/u/hust_wei/&#34;&gt;大佬&lt;/a&gt;的解释：当前位置的元素比下个位置的元素小，就减去当前值，否则加上当前值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义键值对容器 &amp;lt;字符，整型&amp;gt; 
    分别对应罗马数字的字符和数值(注意字符变量加单引号);

int 结果变量；
int 罗马数字长度；
遍历罗马数字：
    如果元素 当前位置&amp;lt;下一个位置：（注意使用值时加方括号[]）
        结果变量-=值变量；
    否则：
        结果变量+=值变量；
返回结果；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;AC代码-2&#34;&gt;&lt;a href=&#34;#AC代码-2&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    unordered_map&amp;lt;char,int&amp;gt;mymap=&amp;#123;
        &amp;#123;&amp;#39;I&amp;#39;,1&amp;#125;,
        &amp;#123;&amp;#39;V&amp;#39;,5&amp;#125;,
        &amp;#123;&amp;#39;X&amp;#39;,10&amp;#125;,
        &amp;#123;&amp;#39;L&amp;#39;,50&amp;#125;,
        &amp;#123;&amp;#39;C&amp;#39;,100&amp;#125;,
        &amp;#123;&amp;#39;D&amp;#39;,500&amp;#125;,
        &amp;#123;&amp;#39;M&amp;#39;,1000&amp;#125;,
    &amp;#125;;
    int romanToInt(string s) &amp;#123;
        int ans=0;
        int len=s.length();
        for(int i=0;i&amp;lt;len;i++)&amp;#123;
            if(mymap[s[i]]&amp;lt;mymap[s[i+1]])&amp;#123;
                ans-=mymap[s[i]];
            &amp;#125;
            else&amp;#123;
                ans+=mymap[s[i]];
            &amp;#125;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;58-最后一个单词的长度&#34;&gt;&lt;a href=&#34;#58-最后一个单词的长度&#34; class=&#34;headerlink&#34; title=&#34;58.最后一个单词的长度&#34;&gt;&lt;/a&gt;58.最后一个单词的长度&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。&lt;br&gt;&lt;strong&gt;单词&lt;/strong&gt;是指仅由字母组成、不包含任何空格字符的最大子字符串。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-3&#34;&gt;&lt;a href=&#34;#解题思路-3&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;【方法一】&lt;/strong&gt;&lt;br&gt;我的思路是&lt;strong&gt;从后向前&lt;/strong&gt;遍历字符串时：如果它的后一个是空格或空，自己不是空格，意味着句尾有空格，该下标是倒着数第一个不为空格的字母；如果前一个是空格或空，自己不是空格，代表这是词的开头，记录下标直接退出循环。最后长度就是二者相减。&lt;br&gt;但是这样写大多数样例不通过（悲&lt;/p&gt;
&lt;p&gt;（二编）卧槽我改对了！！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【方法二】&lt;/strong&gt;&lt;br&gt;不对那就改呗：直接从字符串的尾部开始遍历，&lt;strong&gt;跳过所有尾部空格&lt;/strong&gt;，直到遇到&lt;strong&gt;第一个非空格字符&lt;/strong&gt;，并计算其长度。能够更好的处理边界情况。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int 长度=字符串长度;
int i=长度-1;
int 结果长度=0
当i大于等于0并且s的第i个字符为空格时：
    i--；（倒着循环遍历）
*本题设定s不为空，若无此条件需在此判断：当i&amp;lt;0时直接返回（s为空）
当i大于等于0并且s的第i个字符不为空格时：
    结果长度++；
    i--；
返回结果长度;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;AC代码-3&#34;&gt;&lt;a href=&#34;#AC代码-3&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;【方法一】&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int lengthOfLastWord(string s) &amp;#123;
        int len=s.length();
        int m=0,n=0;
        for(int i=len-1;i&amp;gt;0;i--)&amp;#123;
            if(s[i]!=&amp;#39; &amp;#39; &amp;amp;&amp;amp; (s[i+1]==&amp;#39; &amp;#39; || s[i+1]==&amp;#39;\0&amp;#39;))&amp;#123;
                m=i;
            &amp;#125;
            if((s[i-1]==&amp;#39; &amp;#39; || s[i-1]==&amp;#39;\0&amp;#39;) &amp;amp;&amp;amp; s[i]!=&amp;#39; &amp;#39;)&amp;#123;
                n=i;
                break;
            &amp;#125;
        &amp;#125;
        return m-n+1;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【方法二】&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int lengthOfLastWord(string s) &amp;#123;
        int len=s.length();
        int ans=0;
        int i=len-1;
        while(i&amp;gt;=0 &amp;amp;&amp;amp; s[i]==&amp;#39; &amp;#39;)&amp;#123;
            i--;
        &amp;#125;
        while(i&amp;gt;=0 &amp;amp;&amp;amp; s[i]!=&amp;#39; &amp;#39;)&amp;#123;
            ans++;
            i--;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9-回文数&#34;&gt;&lt;a href=&#34;#9-回文数&#34; class=&#34;headerlink&#34; title=&#34;9.回文数&#34;&gt;&lt;/a&gt;9.回文数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。&lt;br&gt;回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;br&gt;例如，121 是回文，而 123 不是。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-4&#34;&gt;&lt;a href=&#34;#解题思路-4&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回文数是正整数&lt;/li&gt;
&lt;li&gt;负数不是回文数&lt;/li&gt;
&lt;li&gt;一个数的最后一位是0且这个数不为0，不是回文数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将数字的后半部分反转，用&lt;code&gt;反转数字&lt;/code&gt;存储。最后的反转数字包含原始x的后半部分，x包含原始x的前半部分。&lt;br&gt;最后返回时：若&lt;strong&gt;原始x是偶数&lt;/strong&gt;，那么对于回文数，&lt;strong&gt;x一定&amp;#x3D;反转数字&lt;/strong&gt;。若&lt;strong&gt;原始x是奇数&lt;/strong&gt;，那么反转数字会比x多一位，这一位是反转数字的个位并且是原始x的中位数，不影响回文数判断。所以&lt;strong&gt;先去掉个位&lt;/strong&gt;再与当前的x比较。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果（x小于0，或者x的个位不等于0且x不等于0）：
    不是回文数；
定义反转数字=0；
当（x &amp;gt; 反转数字）：
    反转数字=反转数字*10+x%10；
    x/=10；
x = 反转数字
返回x = 反转数字 或者 x = 去掉个位的反转数字；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;AC代码-4&#34;&gt;&lt;a href=&#34;#AC代码-4&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    bool isPalindrome(int x) &amp;#123;
        if(x&amp;lt;0 || (x%10==0 &amp;amp;&amp;amp; x!=0))&amp;#123;
            return false;
        &amp;#125;
        int num=0;
        while(x&amp;gt;num)&amp;#123;
            num=num*10+x%10;
            x/=10;
        &amp;#125;
        return x==num || x==num/10;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;14-最长公共前缀&#34;&gt;&lt;a href=&#34;#14-最长公共前缀&#34; class=&#34;headerlink&#34; title=&#34;14.最长公共前缀&#34;&gt;&lt;/a&gt;14.最长公共前缀&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。&lt;br&gt;如果不存在公共前缀，返回空字符串 “”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-5&#34;&gt;&lt;a href=&#34;#解题思路-5&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;区区小简单，真是难倒我了。&lt;br&gt;这里总结力扣官方题解的纵向扫描方法。我一开始想的也是类似思路，奈何憋不出来代码。&lt;br&gt;&lt;strong&gt;关键点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最长公共前缀的长度不可能超过任何一个字符串的长度&lt;/li&gt;
&lt;li&gt;数组strs的大小即为字符串的总个数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二维数组形式&lt;/strong&gt;可以直接表示第i个字符的第j位&lt;/li&gt;
&lt;li&gt;如果 &lt;strong&gt;&lt;code&gt;i&lt;/code&gt;超出某个字符串的长度&lt;/strong&gt;或**第&lt;code&gt;j&lt;/code&gt;个字符串的第&lt;code&gt;i&lt;/code&gt;个字符不等于&lt;code&gt;c&lt;/code&gt;**时，直接返回当前的公共前缀。&lt;/li&gt;
&lt;li&gt;循环结束说明所有字符串的所有字符都匹配，那么第一个字符串本身就是最长公共前缀，返回第一个字符串&lt;code&gt;strs[0]&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;如果数组为空：
    返回&amp;quot;&amp;quot;；
int 长度变量=数组第一个字符串元素的长度；
int 计数变量=数组大小；
遍历i，从0到长度变量：
    char 字符变量=第一个字符串的第i个字符；
    遍历j，从1到计数变量：
        如果（i==第j个字符串的大小 || 第j个字符串的第i个字符 ！= 字符变量）：
            返回 第一个字符串的第一个字符~第i个字符；
返回 第一个字符；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;AC代码-5&#34;&gt;&lt;a href=&#34;#AC代码-5&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    string longestCommonPrefix(vector&amp;lt;string&amp;gt;&amp;amp; strs) &amp;#123;
        if(!strs.size())&amp;#123;
            return &amp;quot;&amp;quot;;
        &amp;#125;
        int len=strs[0].size();
        int cnt=strs.size();
        for(int i=0;i&amp;lt;len;i++)&amp;#123;
            char c=strs[0][i];
            for(int j=1;j&amp;lt;cnt;j++)&amp;#123;
                if(i==strs[j].size() || strs[j][i]!=c)&amp;#123;
                    return strs[0].substr(0,i);
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return strs[0];
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;682-棒球比赛&#34;&gt;&lt;a href=&#34;#682-棒球比赛&#34; class=&#34;headerlink&#34; title=&#34;682.棒球比赛&#34;&gt;&lt;/a&gt;682.棒球比赛&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;比赛开始时，记录是空白的。你会得到一个记录操作的&lt;strong&gt;字符串列表&lt;/strong&gt; ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数 x - 表示本回合新获得分数 x&lt;/li&gt;
&lt;li&gt;“+” - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。&lt;/li&gt;
&lt;li&gt;“D” - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。&lt;/li&gt;
&lt;li&gt;“C” - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。&lt;br&gt;请你返回记录中所有得分的总和。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-6&#34;&gt;&lt;a href=&#34;#解题思路-6&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;用int动态数组ans记录得分，但是不用i做索引来查询，而是用begin、end、size、back等方法来防止发生越界访问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意&lt;code&gt;string&lt;/code&gt;类型为字符串，用双引号””括起来，&lt;code&gt;char&lt;/code&gt;类型为字符，用单引号’’。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;前两次得分之和：size-1 +size-2
前一次得分：back
最近一次得分移除-&amp;gt;出栈-&amp;gt;pop_back
加入得分：压栈-&amp;gt;push_back
字符串转整型：stoi
计算动态数组的和：accumulate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外，我一开始想用&lt;code&gt;unordered_map&lt;/code&gt;，做题做迷了。后来发现动态数组完全可以解决：C++ 标准库中的 vector 支持动态调整大小，可以方便地模拟栈的行为。而unordered_map 是用来存储键值对（key-value pairs）的哈希表。&lt;br&gt;本问题中不需要映射关系，所以并不需要用到 unordered_map。&lt;br&gt;还有，&lt;strong&gt;stack&lt;int&gt;&lt;strong&gt;的&lt;code&gt;.push()&lt;/code&gt;和&lt;code&gt;.pop()&lt;/code&gt;也可，但是&lt;/strong&gt;vector&lt;/strong&gt;的&lt;code&gt;.push_back()&lt;/code&gt;和&lt;code&gt;.pop_back()&lt;/code&gt;也同样可以。那就选更常用的vector，何乐而不为呢？&lt;/p&gt;
&lt;h3 id=&#34;AC代码-6&#34;&gt;&lt;a href=&#34;#AC代码-6&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;p&gt;用时击败7%，悲。之后滚回来优化算法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int calPoints(vector&amp;lt;string&amp;gt;&amp;amp; operations) &amp;#123;
        vector&amp;lt;int&amp;gt;ans;
        for(string ch:operations)&amp;#123;
            if(ch==&amp;quot;+&amp;quot;)&amp;#123;
                ans.push_back(ans[ans.size()-1]+ans[ans.size()-2]);
            &amp;#125;
            else if(ch==&amp;quot;D&amp;quot;)&amp;#123;
                ans.push_back(ans.back()*2);
            &amp;#125;
            else if(ch==&amp;quot;C&amp;quot;)&amp;#123;
                ans.pop_back();
            &amp;#125;
            else&amp;#123;
                ans.push_back(stoi(ch));
            &amp;#125;
        &amp;#125;
        return accumulate(ans.begin(),ans.end(),0);
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;26-删除有序数组中的重复项&#34;&gt;&lt;a href=&#34;#26-删除有序数组中的重复项&#34; class=&#34;headerlink&#34; title=&#34;26.删除有序数组中的重复项&#34;&gt;&lt;/a&gt;26.删除有序数组中的重复项&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个非严格递增排列的数组nums,请你原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回nums中唯一元素的个数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;考虑nums的唯一元素的数量为k，你需要做以下事情确保你的题解可以被通过：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改数组nums，使nums的前k个元素包含唯一元素，并按照它们最初在nums中出现的顺序排列。nums的其余元素与nums的大小不重要。&lt;/li&gt;
&lt;li&gt;返回 k 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-7&#34;&gt;&lt;a href=&#34;#解题思路-7&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;int 最终数组长度=1;
遍历nums：
    如果第i个元素不等于第i-1个元素：
        nums[最终数组长度]=nums[i]；
        最终数组长度++；
返回最终数组长度；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;AC代码-7&#34;&gt;&lt;a href=&#34;#AC代码-7&#34; class=&#34;headerlink&#34; title=&#34;AC代码&#34;&gt;&lt;/a&gt;AC代码&lt;/h3&gt;&lt;p&gt;妈呀这题一提交发现每ms都有解法…密密麻麻(ΩДΩ)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int removeDuplicates(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        int ans=1;
        for(int i=1;i&amp;lt;nums.size();i++)&amp;#123;
            if(nums[i]!=nums[i-1])&amp;#123;
                nums[ans]=nums[i];
                ans++;
            &amp;#125;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1922-统计好数字的数目&#34;&gt;&lt;a href=&#34;#1922-统计好数字的数目&#34; class=&#34;headerlink&#34; title=&#34;1922.统计好数字的数目&#34;&gt;&lt;/a&gt;1922.统计好数字的数目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们称一个数字字符串是 好数字 当它满足（下标从 0 开始）偶数 下标处的数字为 偶数 且 奇数 下标处的数字为 质数 （2，3，5 或 7）。&lt;br&gt;比方说，”2582” 是好数字，因为偶数下标处的数字（2 和 8）是偶数且奇数下标处的数字（5 和 2）为质数。但 “3245” 不是 好数字，因为 3 在偶数下标处但不是偶数。&lt;br&gt;给你一个整数 n ，请你返回长度为 n 且为好数字的数字字符串 总数 。由于答案可能会很大，请你将它对 10^9 + 7 取余后返回 。&lt;br&gt;一个 数字字符串 是每一位都由 0 到 9 组成的字符串，且可能包含前导 0 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; n &amp;lt;&amp;#x3D; 1015&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-8&#34;&gt;&lt;a href=&#34;#解题思路-8&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;🤔一开始就被范围吓到了，这完全穷举不了啊，悲。&lt;br&gt;这道题不超时的话只能用数学方法了，快来和我一起看&lt;a href=&#34;https://leetcode.cn/problems/count-good-numbers/solutions/857728/cheng-fa-yuan-li-kuai-su-mi-by-endlessch-btkn/?envType=daily-question&amp;envId=2025-04-13&#34;&gt;题解&lt;/a&gt;!&lt;br&gt;&lt;strong&gt;总结一下&lt;/strong&gt; 对于长度为n的好数字字符串：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;偶数下标个数&lt;code&gt;a=⌈n/2⌉=⌊(n+1)/2⌋&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;下标有五种可能：0、2、4、6、8&lt;/li&gt;
&lt;li&gt;方案数&lt;code&gt;5^a&lt;/code&gt;&lt;blockquote&gt;
&lt;p&gt;*注意这里⌈ ⌉是向上取整，⌊ ⌋是向下取整。我也是最近才学到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;奇数下标个数&lt;code&gt;b=⌊n/2⌋&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;下标有四种可能：2、3、5、7&lt;/li&gt;
&lt;li&gt;方案数&lt;code&gt;4^b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;可得总方案数为&lt;code&gt;(5^a)*(4^b)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到这里涉及到两个问题：&lt;br&gt;&lt;strong&gt;👉️快速幂&lt;/strong&gt;&lt;br&gt;直接暴力pow必定超时&amp;#x2F;爆栈，所以需要快速幂。&lt;a href=&#34;https://leetcode.cn/problems/powx-n/solutions/2858114/tu-jie-yi-zhang-tu-miao-dong-kuai-su-mi-ykp3i/&#34;&gt;方法&lt;/a&gt;太神了…趁热打铁把&lt;a href=&#34;https://leetcode.cn/problems/powx-n/description/&#34;&gt;50.Pow(x,n)&lt;/a&gt;一起拿下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;x^n&lt;/code&gt;怎么快速算？&lt;br&gt;n转二进制后，从右往左遍历，遇到1就乘对应x的幂次。&lt;br&gt;比如&lt;code&gt;13 = 1101&lt;/code&gt;：&lt;br&gt;那么&lt;code&gt;x^13&lt;/code&gt; &amp;#x3D; &lt;code&gt;x^(2^0)&lt;/code&gt; * &lt;code&gt;x^(2^2)&lt;/code&gt; * &lt;code&gt;x^(2^3)&lt;/code&gt; &amp;#x3D; &lt;code&gt;x&lt;/code&gt; * &lt;code&gt;x^4&lt;/code&gt; * &lt;code&gt;x^8&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;👉️取模&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为题目要算的答案特别大以至于超出64位整数的范围，所以要求对&lt;code&gt;10^9 + 7&lt;/code&gt;取模。&lt;br&gt;这里好多数学公式😫先把代码总结&lt;a href=&#34;(https://leetcode.cn/discuss/post/3584387/fen-xiang-gun-mo-yun-suan-de-shi-jie-dan-7xgu/)&#34;&gt;copy&lt;/a&gt;过来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;MOD = 1_000_000_007
// 加
(a + b) % MOD
// 减
(a - b + MOD) % MOD
// 把任意整数 a 取模到 [0,MOD-1] 中，无论 a 是正是负
(a % MOD + MOD) % MOD
// 乘（注意使用 64 位整数）
a * b % MOD
// 多个数相乘，要步步取模，防止溢出
a * b % MOD * c % MOD
// 除（MOD 是质数且 b 不是 MOD 的倍数）
a * qpow(b, MOD - 2, MOD) % MOD
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    const long long mod=1e9+7;
    //快速幂：计算base^exp
    long long ModPow(long long base,long long exp)&amp;#123;
        long long res=1;
        while(exp)&amp;#123;
            if(exp%2==1)&amp;#123;//当前位是1
                res=(res*base)%mod;
            &amp;#125;
            base=(base*base)%mod;//base^2是base的下一步幂
            exp/=2;
        &amp;#125;
        return res;
    &amp;#125;
    //主函数
    int countGoodNumbers(long long n) &amp;#123;
        long long a,b;
        a=(n+1)/2;
        b=n/2;
        return (ModPow(5,a)*ModPow(4,b))% mod;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;50-Pow-x-n&#34;&gt;&lt;a href=&#34;#50-Pow-x-n&#34; class=&#34;headerlink&#34; title=&#34;50.Pow(x,n)&#34;&gt;&lt;/a&gt;50.Pow(x,n)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;实现 pow(x, n) ，即计算 x 的整数 n 次幂函数（即，x^n ）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-100.0 &amp;lt; x &amp;lt; 100.0&lt;/li&gt;
&lt;li&gt;231 &amp;lt;&amp;#x3D; n &amp;lt;&amp;#x3D; 231-1&lt;/li&gt;
&lt;li&gt;n 是一个整数&lt;/li&gt;
&lt;li&gt;要么 x 不为零，要么 n &amp;gt; 0 。&lt;/li&gt;
&lt;li&gt;-104 &amp;lt;&amp;#x3D; xn &amp;lt;&amp;#x3D; 104&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解题思路-9&#34;&gt;&lt;a href=&#34;#解题思路-9&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;详见上一题~这里还涉及到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;n为负数&lt;br&gt;把n变成-n，x变为1&amp;#x2F;x。&lt;/li&gt;
&lt;li&gt;n&amp;#x3D;(−2)^31&lt;br&gt;此时n取反会超出int最大值，可以转为64位int。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，关键代码&lt;a href=&#34;https://leetcode.cn/problems/powx-n/solutions/2858114/tu-jie-yi-zhang-tu-miao-dong-kuai-su-mi-ykp3i/&#34;&gt;灵神&lt;/a&gt;的更简洁，放在这里学习一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;        while (n) &amp;#123; // 从低到高枚举 n 的每个比特位
            if (n &amp;amp; 1) &amp;#123; // 这个比特位是 1
                ans *= x; // 把 x 乘到 ans 中
            &amp;#125;
            x *= x; // x 自身平方
            n &amp;gt;&amp;gt;= 1; // 继续枚举下一个比特位
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;完整代码-1&#34;&gt;&lt;a href=&#34;#完整代码-1&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    double myPow(double x, int N) &amp;#123;
        double res=1;
        long long n=N;
        while(n)&amp;#123;
            if(n&amp;lt;0)&amp;#123;
                n=-n;
                x=1/x;
            &amp;#125;
            if(n%2==1)&amp;#123;
                res=(res*x);
            &amp;#125;
            x=x*x;
            n/=2;
        &amp;#125;
        return res;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="力扣" />
        <category term="备忘录" />
        <updated>2025-03-02T11:55:55.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/02/20/%E5%85%B6%E4%BB%96/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%8D%8A%E5%B9%B4%E7%9A%84%E7%97%9B/</id>
        <title>博客搭建小半年的痛</title>
        <link rel="alternate" href="https://232akira.github.io/2025/02/20/%E5%85%B6%E4%BB%96/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%8D%8A%E5%B9%B4%E7%9A%84%E7%97%9B/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;主打一个备忘&lt;/strong&gt;&lt;br&gt;断断续续从24年中搞到现在25年初，最磨蹭的一集。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最新问题&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提交评论 ×&lt;br&gt;替换部分主题图片 ×&lt;br&gt;文章总访问量显示 ×&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;首先是参考链接&#34;&gt;&lt;a href=&#34;#首先是参考链接&#34; class=&#34;headerlink&#34; title=&#34;首先是参考链接&#34;&gt;&lt;/a&gt;首先是参考链接&lt;/h2&gt;&lt;p&gt;非常感谢！&lt;/p&gt;
&lt;h3 id=&#34;ShokaX&#34;&gt;&lt;a href=&#34;#ShokaX&#34; class=&#34;headerlink&#34; title=&#34;ShokaX&#34;&gt;&lt;/a&gt;ShokaX&lt;/h3&gt;&lt;p&gt;github：&lt;a href=&#34;https://github.com/theme-shoka-x/hexo-theme-shokaX&#34;&gt;https://github.com/theme-shoka-x/hexo-theme-shokaX&lt;/a&gt;&lt;br&gt;官方文档：&lt;a href=&#34;https://hexo.docs.shokax.top/&#34;&gt;https://hexo.docs.shokax.top/&lt;/a&gt;&lt;br&gt;主题指南：&lt;a href=&#34;https://docs.kaitaku.xyz/&#34;&gt;https://docs.kaitaku.xyz/&lt;/a&gt;&lt;br&gt;社区资源：&lt;a href=&#34;https://github.com/theme-shoka-x/awesome-shokaX&#34;&gt;https://github.com/theme-shoka-x/awesome-shokaX&lt;/a&gt;&lt;br&gt;shoka：&lt;a href=&#34;https://github.com/amehime/hexo-theme-shoka&#34;&gt;https://github.com/amehime/hexo-theme-shoka&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他相关网站-教程&#34;&gt;&lt;a href=&#34;#其他相关网站-教程&#34; class=&#34;headerlink&#34; title=&#34;其他相关网站&amp;amp;教程&#34;&gt;&lt;/a&gt;其他相关网站&amp;amp;教程&lt;/h3&gt;&lt;p&gt;Linn’s Shoka：&lt;a href=&#34;https://linn-ylz.com/Hexo/blog-content-test/&#34;&gt;https://linn-ylz.com/Hexo/blog-content-test/&lt;/a&gt;&lt;br&gt;waline快速上手：&lt;a href=&#34;https://waline.js.org/guide/get-started/&#34;&gt;https://waline.js.org/guide/get-started/&lt;/a&gt;&lt;br&gt;Vercel服务端部署：&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example&amp;teamSlug=232akiras-projects&#34;&gt;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwalinejs%2Fwaline%2Ftree%2Fmain%2Fexample&amp;amp;teamSlug=232akiras-projects&lt;/a&gt;&lt;br&gt;leancloud：&lt;a href=&#34;https://console.leancloud.app/apps&#34;&gt;https://console.leancloud.app/apps&lt;/a&gt;&lt;br&gt;Gimhoy图床：&lt;a href=&#34;https://pic.gimhoy.com/&#34;&gt;https://pic.gimhoy.com/&lt;/a&gt;&lt;br&gt;Google字体：&lt;a href=&#34;https://fonts.google.com/&#34;&gt;https://fonts.google.com/&lt;/a&gt;&lt;br&gt;百度统计：&lt;a href=&#34;https://tongji.baidu.com/main/setting/10000672027/home/site/index&#34;&gt;https://tongji.baidu.com/main/setting/10000672027/home/site/index&lt;/a&gt;&lt;br&gt;markdown排版：&lt;a href=&#34;https://markdown.com.cn/editor/&#34;&gt;https://markdown.com.cn/editor/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;搭建思路&#34;&gt;&lt;a href=&#34;#搭建思路&#34; class=&#34;headerlink&#34; title=&#34;搭建思路&#34;&gt;&lt;/a&gt;搭建思路&lt;/h2&gt;&lt;p&gt;这方面毫无实战知识，不停地踩坑踩坑…&lt;/p&gt;
&lt;h3 id=&#34;Hexo初始化博客&#34;&gt;&lt;a href=&#34;#Hexo初始化博客&#34; class=&#34;headerlink&#34; title=&#34;Hexo初始化博客&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://hexo.io/zh-cn/&#34; title=&#34;点此跳转Hexo官网&#34;&gt;Hexo&lt;/a&gt;初始化博客&lt;/h3&gt;&lt;p&gt;基于Node.js的博客框架。本博客采用Hexo+Github搭建。&lt;br&gt;&lt;strong&gt;常用命令&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;功能&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;命令&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;简写&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;清理缓存&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;hexo clean&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;hexo cl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;部署站点&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;hexo deploy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;hexo d&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;生成博客&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;hexo generate&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;hexo g&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;启动本地服务&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;hexo server&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;hexo s&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;Shoka主题配置&#34;&gt;&lt;a href=&#34;#Shoka主题配置&#34; class=&#34;headerlink&#34; title=&#34;Shoka主题配置&#34;&gt;&lt;/a&gt;Shoka主题配置&lt;/h3&gt;&lt;p&gt;一开始胡乱配置，后来更新的时候爆出来好多问题。于是这两天从头重做&lt;/p&gt;
&lt;h4 id=&#34;步骤如下：&#34;&gt;&lt;a href=&#34;#步骤如下：&#34; class=&#34;headerlink&#34; title=&#34;步骤如下：&#34;&gt;&lt;/a&gt;步骤如下：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;前置hexo init、Node.js等
pnpm安装shokax
/_config.landscape.yml重命名为_config.shokax.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;config-yml中的配置项：&#34;&gt;&lt;a href=&#34;#config-yml中的配置项：&#34; class=&#34;headerlink&#34; title=&#34;&amp;#x2F;_config.yml中的配置项：&#34;&gt;&lt;/a&gt;&amp;#x2F;_config.yml中的配置项：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;markdown配置
停用默认代码高亮
文件压缩
feed生成
站内搜索
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;config-shokax-yml中的配置项：&#34;&gt;&lt;a href=&#34;#config-shokax-yml中的配置项：&#34; class=&#34;headerlink&#34; title=&#34;&amp;#x2F;_config.shokax.yml中的配置项：&#34;&gt;&lt;/a&gt;&amp;#x2F;_config.shokax.yml中的配置项：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;静态资源存放目录
ShokaX功能模块
主页头图
Iconfont图标
导航栏
侧边栏
大标题
社交链接
字数和阅读时间统计
预加载和预解析地址
SEO优化和访客优化
夜间模式
自动定位
标题自定义
图片自定义
首页精选
分类翻转块
实验性特性
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/images/github_blog.jpg&#34; alt=&#34;2025&amp;#x2F;3&amp;#x2F;17&#34; title=&#34;Insights&#34;&gt;&lt;/p&gt;
&lt;p&gt;突然发现放简历上的的网站二维码扫出来404😇可能当初生成二维码时没事，链接是某个具体的文章路径，后来Hexo更新或者改了文章的permalink，导致原来的链接失效了。&lt;/p&gt;
&lt;p&gt;回到我的主页😼👇️&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;site: K’s BLOG&lt;br&gt;url: &lt;a href=&#34;https://232akira.github.io/&#34;&gt;https://232akira.github.io/&lt;/a&gt;&lt;br&gt;color: “#adff2f”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（？渲染器没安装好…&lt;/p&gt;
</content>
        <category term="记录" />
        <updated>2025-02-20T02:26:39.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2024/11/23/%E5%85%B6%E4%BB%96/%E5%AD%98%E5%AD%98markdown%E7%9B%B8%E5%85%B3/</id>
        <title>存存markdown相关</title>
        <link rel="alternate" href="https://232akira.github.io/2024/11/23/%E5%85%B6%E4%BB%96/%E5%AD%98%E5%AD%98markdown%E7%9B%B8%E5%85%B3/"/>
        <content type="html">&lt;h2 id=&#34;这是232akira的第一篇博客的二级标题两个井号加空格&#34;&gt;&lt;a href=&#34;#这是232akira的第一篇博客的二级标题两个井号加空格&#34; class=&#34;headerlink&#34; title=&#34;这是232akira的第一篇博客的二级标题两个井号加空格&#34;&gt;&lt;/a&gt;这是232akira的第一篇博客的二级标题两个井号加空格&lt;/h2&gt;&lt;h3 id=&#34;这是232akira的第一篇博客的三级标题三个井号加空格&#34;&gt;&lt;a href=&#34;#这是232akira的第一篇博客的三级标题三个井号加空格&#34; class=&#34;headerlink&#34; title=&#34;这是232akira的第一篇博客的三级标题三个井号加空格&#34;&gt;&lt;/a&gt;这是232akira的第一篇博客的三级标题三个井号加空格&lt;/h3&gt;&lt;p&gt;这是232akira的第一篇博客的第一段直接回车&lt;/p&gt;
&lt;p&gt;这是232akira的第一篇博客的第二段&lt;/p&gt;
&lt;p&gt;这是换行尝试两个空格+回车&lt;br&gt;&lt;br&gt;&lt;br&gt;换行！&lt;/p&gt;
&lt;p&gt;这是字体加粗尝试加粗 &lt;strong&gt;前后各加2个星星号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是字体斜体尝试斜体 &lt;em&gt;前后各加1个星星号&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这是字体同时加粗斜体尝试 &lt;em&gt;&lt;strong&gt;前后各加3个星星号&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这是创建块引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kuaiyinyongkuaiyinyongkkk&lt;br&gt;这是多个段落的块引用&lt;br&gt;kuaiyinyongkkk&lt;/p&gt;
&lt;p&gt;kkk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是嵌套块引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kuaiyinyongkkk&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;qiantaoaaa&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用短横杠（注意两边空格）出来是圆点&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是有序列表&lt;br&gt;1.我是1第一项必须数字一加英文句号后面数字无所谓&lt;br&gt;2.我是2&lt;br&gt;    1.我是1&lt;br&gt;    2.我是2&lt;br&gt;3.我是3&lt;/p&gt;
&lt;p&gt;这是无序列表点乘加短横杠都可以变成圆点&lt;br&gt;-111&lt;br&gt;-222&lt;br&gt;    -1111嵌套前面四个空格&lt;br&gt;    -代码在列表里缩进8个空格或者2个tab&lt;br&gt;            print(“hello world~”)&lt;br&gt;-333&lt;/p&gt;
&lt;p&gt;这是代码语法&lt;br&gt;把代码包裹在反引号&lt;code&gt;中 比如我这里是 &lt;/code&gt;代码代码代码&lt;code&gt;创建代码块就还是缩进4个空格or1个tab&lt;/code&gt;        我是代码块啊啊啊&amp;#96;&lt;/p&gt;
&lt;h2 id=&#34;这是分隔线单独一行三星或多星-破折号-下划线&#34;&gt;&lt;a href=&#34;#这是分隔线单独一行三星或多星-破折号-下划线&#34; class=&#34;headerlink&#34; title=&#34;这是分隔线单独一行三星或多星&amp;#x2F;破折号&amp;#x2F;下划线***&#34;&gt;&lt;/a&gt;这是分隔线单独一行三星或多星&amp;#x2F;破折号&amp;#x2F;下划线&lt;br&gt;***&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;出来的效果一样的&lt;/p&gt;
&lt;p&gt;这是链接链接的文本放中括号地址放后面圆括号&lt;a href=&#34;https://www.xuexi.cn/&#34; title=&#34;我是title&#34;&gt;快来学习&lt;/a&gt;&lt;br&gt;或者直接尖括号链接跳转&lt;a href=&#34;https://www.xuexi.cn/&#34;&gt;https://www.xuexi.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;强调链接就在尖括号前后增加星号，表示为代码就加反引号&lt;br&gt;I love &lt;strong&gt;&lt;a href=&#34;https://www.xuexi.cn/&#34; title=&#34;我是title&#34;&gt;学习&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是引用型链接，两个方括号前一个写文本后一个指向其他位置的链接&lt;br&gt;[跳转跳转啊啊啊] &lt;a href=&#34;https://www.xuexi.cn/&#34;&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是添加图像使用感叹号+方括号+圆括号。方括号里写替代文本，圆括号里写图片链接，也可以后接图片标题文本。跳转链接写在最外面并再套一层方括号。&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/images/kabi.jpg&#34; alt=&#34;这是图片&#34; title=&#34;我是title&#34;&gt;&lt;/p&gt;
</content>
        <category term="记录" />
        <updated>2024-11-23T10:40:43.000Z</updated>
    </entry>
</feed>
