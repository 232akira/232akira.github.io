{
    "version": "https://jsonfeed.org/version/1",
    "title": "😼 • All posts by \"力扣\" tag",
    "description": "欢迎交流学习!",
    "home_page_url": "https://232akira.github.io",
    "items": [
        {
            "id": "https://232akira.github.io/2025/03/06/Leetcode%E9%93%BE%E8%A1%A8/",
            "url": "https://232akira.github.io/2025/03/06/Leetcode%E9%93%BE%E8%A1%A8/",
            "title": "Leetcode链表",
            "date_published": "2025-03-06T02:25:28.000Z",
            "content_html": "<p>链表这东西真的学一阵忘一阵😂</p>\n<h1 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a>单向链表</h1><h2 id=\"结构定义\"><a href=\"#结构定义\" class=\"headerlink\" title=\"结构定义\"></a>结构定义</h2><ul>\n<li>节点结构 <code>ListNode</code></li>\n<li>值 <code>data</code></li>\n<li>指向下一个节点的指针 <code>next</code></li>\n</ul>\n<pre><code>struct ListNode&#123;\n    int data;\n    ListNode* next;\n    ListNode(int x):data(x),next(nullptr)&#123;&#125;\n&#125;Node;\n</code></pre>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h3 id=\"创建链表\"><a href=\"#创建链表\" class=\"headerlink\" title=\"创建链表\"></a>创建链表</h3><p>定义单链表类，封装基本操作。下面的几个操作都在public里~</p>\n<pre><code>class LinkedList&#123;\npublic:\n    ListNode* head;\n    LinkedList():head(nullptr);\n&#125;\n</code></pre>\n<h3 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h3><ul>\n<li>头插法:新节点加到链表头部</li>\n</ul>\n<pre><code>void insertAtHead(int data)&#123;\n    ListNode* newNode=new ListNode(data);\n    newNode-&gt;next=head;\n    head=newNode;\n&#125;\n</code></pre>\n<ul>\n<li>尾插法：:新节点加到链表尾部</li>\n</ul>\n<pre><code>void insertAtTail(int data)&#123;\n    ListNode* newNode=new ListNode(data);\n    if(!head)&#123;\n        head=newNode;\n        return;\n    &#125;\n    ListNode* temp=head;\n    while(temp-&gt;next)&#123;\n        temp=temp-&gt;next;\n    &#125;\n    temp-&gt;next=newNode;\n&#125;\n</code></pre>\n<h3 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h3><pre><code>void deleteNode(int data)&#123;\n    if(!head)&#123;\n        return;\n    &#125;\n    if(head-&gt;data==data)&#123;\n        ListNode* temp=head;\n        head=head-&gt;next;\n        delete temp;\n        return;\n    &#125;\n    ListNode* temp=head;\n    while(temp-&gt;next &amp;&amp; temp-&gt;next-&gt;val !=val)&#123;\n        temp=temp-&gt;next;\n    &#125;\n    if(temp-&gt;next)&#123;\n        ListNode* delNode=temp-&gt;next;\n        temp-&gt;next=temp-&gt;next-&gt;next;\n        delete delNode;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"修改节点\"><a href=\"#修改节点\" class=\"headerlink\" title=\"修改节点\"></a>修改节点</h3><pre><code>void updateNode(int oldData,newData)&#123;\n    ListNode* temp=head;\n    while(temp)&#123;\n        if(temp-data==oldData)&#123;\n            temp-&gt;data==oldData;\n            return;\n        &#125;\n        temp=temp-&gt;next;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"查找节点\"><a href=\"#查找节点\" class=\"headerlink\" title=\"查找节点\"></a>查找节点</h3><pre><code>bool searchNode(int data)&#123;\n    ListNode* temp=head;\n    while(temp)&#123;\n        if(temp-&gt;data==data)&#123;\n            return true;\n        &#125;\n    &#125;\n    return false;\n&#125;\n</code></pre>\n<h3 id=\"打印链表\"><a href=\"#打印链表\" class=\"headerlink\" title=\"打印链表\"></a>打印链表</h3><pre><code>void printList()&#123;\n    ListNode* temp=head;\n    while(temp)&#123;\n        cout&lt;&lt;temp-&gt;val&lt;&lt;&quot;-&gt;&quot;;\n        temp=temp-&gt;next;\n    &#125;\n    cout&lt;&lt;&quot;NULL&quot;&lt;&lt;endl;\n&#125;\n</code></pre>\n<h3 id=\"释放链表内存\"><a href=\"#释放链表内存\" class=\"headerlink\" title=\"释放链表内存\"></a>释放链表内存</h3><pre><code>~LinkedList()&#123;\n    while(head)&#123;\n        ListNode* temp=head;\n        head=head-&gt;next;\n        delete temp;\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "算法",
                "链表",
                "力扣"
            ]
        }
    ]
}