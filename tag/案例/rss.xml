<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Per aspera ad astra • Posts by &#34;案例&#34; tag</title>
        <link>https://232akira.github.io</link>
        <description>欢迎交流学习!</description>
        <language>zh-CN</language>
        <pubDate>Thu, 17 Apr 2025 13:43:07 +0800</pubDate>
        <lastBuildDate>Thu, 17 Apr 2025 13:43:07 +0800</lastBuildDate>
        <category>记录</category>
        <category>TIPS</category>
        <category>力扣</category>
        <category>算法</category>
        <category>备忘录</category>
        <category>专题</category>
        <category>AI</category>
        <category>案例</category>
        <category>笔记</category>
        <category>指南</category>
        <item>
            <guid isPermalink="true">https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1-2%20%E6%8E%A5%E5%85%A5DeepSeek-R1%E4%BC%98%E5%8C%96%E6%8F%90%E7%A4%BA%E8%AF%8D/</guid>
            <title>案例1️⃣-2 ⋮ 接入DeepSeek-R1优化提示词</title>
            <link>https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1-2%20%E6%8E%A5%E5%85%A5DeepSeek-R1%E4%BC%98%E5%8C%96%E6%8F%90%E7%A4%BA%E8%AF%8D/</link>
            <category>AI</category>
            <category>案例</category>
            <pubDate>Thu, 17 Apr 2025 13:43:07 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;🔆2025-04-16&lt;/p&gt;
&lt;h2 id=&#34;优化Stable-Difussion生成效果-接入DeepSeek-R1处理提示词&#34;&gt;&lt;a href=&#34;#优化Stable-Difussion生成效果-接入DeepSeek-R1处理提示词&#34; class=&#34;headerlink&#34; title=&#34;优化Stable Difussion生成效果(接入DeepSeek-R1处理提示词)&#34;&gt;&lt;/a&gt;优化Stable Difussion生成效果(接入DeepSeek-R1处理提示词)&lt;/h2&gt;&lt;p&gt;哇这里只加了一个功能流程中就出现很多bug😅待我慢慢梳理一下&lt;/p&gt;
&lt;h2 id=&#34;问题引入&#34;&gt;&lt;a href=&#34;#问题引入&#34; class=&#34;headerlink&#34; title=&#34;问题引入&#34;&gt;&lt;/a&gt;问题引入&lt;/h2&gt;&lt;p&gt;上面说到对提示词进行优化，那么可以直接再引入一个文本生成模型来进行这个操作，那么整体的流程就变为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A[原始提示词] --&amp;gt; B(DeepSeek-R1优化)--&amp;gt; C[优化后提示词]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后才是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C --&amp;gt; D(Stable Diffusion生成)
D --&amp;gt; E[最终图像]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取DeepSeek-R1-API&#34;&gt;&lt;a href=&#34;#获取DeepSeek-R1-API&#34; class=&#34;headerlink&#34; title=&#34;获取DeepSeek-R1 API&#34;&gt;&lt;/a&gt;获取DeepSeek-R1 API&lt;/h2&gt;&lt;p&gt;和先前拿到Stable Diffusion是同一个方法：访问&lt;code&gt;沐曦资源包&lt;/code&gt;-&amp;gt;&lt;code&gt;DeepSeek-R1&lt;/code&gt;-&amp;gt;&lt;code&gt;API&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base_url&lt;/code&gt; &lt;a href=&#34;https://ai.gitee.com/v1&#34;&gt;https://ai.gitee.com/v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api_key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; DeepSeek-R1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码思路&#34;&gt;&lt;a href=&#34;#代码思路&#34; class=&#34;headerlink&#34; title=&#34;代码思路&#34;&gt;&lt;/a&gt;代码思路&lt;/h2&gt;&lt;p&gt;简而言之，就是在Stable Diffusion拿到提示词之前，把原始提示词先丢给DeepSeek处理一下，也可以说是&lt;strong&gt;双模型协同机制&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;DeepSeek-R1&#34;&gt;&lt;a href=&#34;#DeepSeek-R1&#34; class=&#34;headerlink&#34; title=&#34;DeepSeek-R1&#34;&gt;&lt;/a&gt;DeepSeek-R1&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;作为「提示词工程师」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;message模块向其发送指令，比如：你是一个专业的SD提示词优化助手等等&lt;/li&gt;
&lt;li&gt;接受用户输入的提示词&lt;/li&gt;
&lt;li&gt;优化&lt;br&gt;优化的策略可以有很多，针对Stable Diffusion我们可以这样做：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;转换成英文&lt;/li&gt;
&lt;li&gt;语法结构优化（将描述性语言转换为SD擅长的标签式表达）&lt;/li&gt;
&lt;li&gt;自动补充合适的艺术风格细节（如添加”ultra detailed, 8k”等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;⚠️注意！这里有个致命的提示词要点，影响整个案例是否成功。将放到后面作为重点补充。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;输出经优化后的提示词&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;def get_optimized_prompt(original_prompt: str) -&amp;gt; str：
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Stable-Diffusion&#34;&gt;&lt;a href=&#34;#Stable-Diffusion&#34; class=&#34;headerlink&#34; title=&#34;Stable Diffusion&#34;&gt;&lt;/a&gt;Stable Diffusion&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;作为「图像生成器」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;接受经优化后的提示词&lt;/li&gt;
&lt;li&gt;输出文生图结果&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;def generate_image(prompt: str, output_path: str = &amp;quot;output-DS-R1.png&amp;quot;) -&amp;gt; bool:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;报错梳理&#34;&gt;&lt;a href=&#34;#报错梳理&#34; class=&#34;headerlink&#34; title=&#34;报错梳理&#34;&gt;&lt;/a&gt;报错梳理&lt;/h2&gt;&lt;h3 id=&#34;模型资源地址-模型名称置入错误&#34;&gt;&lt;a href=&#34;#模型资源地址-模型名称置入错误&#34; class=&#34;headerlink&#34; title=&#34;模型资源地址&amp;#x2F;模型名称置入错误&#34;&gt;&lt;/a&gt;模型资源地址&amp;#x2F;模型名称置入错误&lt;/h3&gt;&lt;p&gt;这个其实是非常没有技术含量的报错🫥因为这个案例的代码比较冗长（200行左右），并且模型资源置入的地址的代码位置比较分散，所以在快速大量修改整体代码时，很容易没有调用到模型资源，但往往报错的时候不会意识到是这么简单的问题。&lt;br&gt;&lt;strong&gt;举个🌰：&lt;/strong&gt;&lt;br&gt;遇到了401报错，那么可能是API Key：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为空&lt;/li&gt;
&lt;li&gt;已过期&lt;/li&gt;
&lt;li&gt;不属于当前使用的API服务（比如错用OpenAI的Key调用 Gitee AI，我就是没注意到这里）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔄所以记得基础问题至少也要检查一遍。&lt;/p&gt;
&lt;h3 id=&#34;运行无报错但是无输出&#34;&gt;&lt;a href=&#34;#运行无报错但是无输出&#34; class=&#34;headerlink&#34; title=&#34;运行无报错但是无输出&#34;&gt;&lt;/a&gt;运行无报错但是无输出&lt;/h3&gt;&lt;p&gt;这里属于和模型无关的基础代码编写问题了。需要添加一定的逻辑，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加代码调试输出逻辑&lt;/li&gt;
&lt;li&gt;强制报错测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最好是加个运行日志，方便看看细节啥情况。这里问了DS说的很专业，码一下&lt;br&gt;🔄错误熔断设计：&lt;code&gt;独立捕获每个API的异常&lt;/code&gt; &amp;amp; &lt;code&gt;生成过程状态实时反馈&lt;/code&gt;，并添加完整的日志追踪。&lt;/p&gt;
&lt;h3 id=&#34;运行成功有输出但是完全不对&#34;&gt;&lt;a href=&#34;#运行成功有输出但是完全不对&#34; class=&#34;headerlink&#34; title=&#34;运行成功有输出但是完全不对&#34;&gt;&lt;/a&gt;运行成功有输出但是完全不对&lt;/h3&gt;&lt;p&gt;甚至比优化前还要离谱🤣输入的原始提示词是“一只穿着宇航服的猫在月球上漫步”，到这里生成的图不像原来一样至少是个猫，而是变成了一张人物古典水墨风了，完全不相关。&lt;/p&gt;
&lt;p&gt;到这里意识到一个方法,也就是需要按照案例的流程进行逐个排错。我们需要明白究竟是哪个步骤出了问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简称：DeepSeek-&amp;gt;DS、Stable Diffusion-&amp;gt;SD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DS没有接受到提示词&lt;/li&gt;
&lt;li&gt;DS接受到提示词 &amp;amp; 优化失败（包括生成的新提示词错误的情况）&lt;/li&gt;
&lt;li&gt;DS接受到提示词 &amp;amp; 优化成功 &amp;amp; SD接受到新提示词&lt;/li&gt;
&lt;li&gt;DS接受到提示词 &amp;amp; 优化成功 &amp;amp; SD接受到新提示词 &amp;amp; SD输出图像失败&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以推断问题大概率出现在&lt;code&gt;2&lt;/code&gt;or&lt;code&gt;3&lt;/code&gt;，也就是提示词的优化和传递环节出现了问题，所以导致SD拿到错误的提示词之后很顺溜的生成了错误的图片。&lt;br&gt;🔄需要修改代码逻辑。&lt;/p&gt;
&lt;h3 id=&#34;警惕AI骗人现象&#34;&gt;&lt;a href=&#34;#警惕AI骗人现象&#34; class=&#34;headerlink&#34; title=&#34;警惕AI骗人现象&#34;&gt;&lt;/a&gt;警惕AI骗人现象&lt;/h3&gt;&lt;p&gt;我这里被DeepSeek坑的好惨😭长记性了。我报错的代码它给修改后运行正确，一时激动难以自已。然后发现他在提示词生成错误后直接这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    except:
        return &amp;quot;cat in astronaut suit on the moon, detailed fur, cosmic background, 8k&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;😅😅😅哪有这样的，我需要调用ds来生成这样的语句，它到自己干脆的设置：生成不了直接用写好的优化后代码。太离谱…&lt;br&gt;这里同样需要修改代码逻辑，保证出现失败后能够及时响应。&lt;/p&gt;
&lt;h3 id=&#34;⚠️最后一个也是最重要的一个报错&#34;&gt;&lt;a href=&#34;#⚠️最后一个也是最重要的一个报错&#34; class=&#34;headerlink&#34; title=&#34;⚠️最后一个也是最重要的一个报错&#34;&gt;&lt;/a&gt;⚠️最后一个也是最重要的一个报错&lt;/h3&gt;&lt;p&gt;哇这里真的，&lt;strong&gt;理解起来很容易，发现起来很难！！！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先我们知道：DeepSeek-R1是个&lt;strong&gt;深度思考&lt;/strong&gt;模型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是说，它大概率会在你要求&lt;code&gt;不要生成其他无关内容&lt;/code&gt;时，思考了一大堆：好的，用户说明我需要巴拉巴拉…然后字数就超了，这半截思考内容就会传递给Stable Diffusion，结果可想而知🫥比如这样：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2025-04-16 17:27:41,655 - ERROR - 响应内容: &amp;#123;&amp;quot;id&amp;quot;:&amp;quot;9e7f4969063e49b7a542150ed194db43&amp;quot;,&amp;quot;object&amp;quot;:&amp;quot;chat.completion&amp;quot;,&amp;quot;created&amp;quot;:1744795661,&amp;quot;model&amp;quot;:&amp;quot;deepseek-r1&amp;quot;,&amp;quot;choices&amp;quot;:[&amp;#123;&amp;quot;index&amp;quot;:0,&amp;quot;message&amp;quot;:&amp;#123;&amp;quot;role&amp;quot;:&amp;quot;assistant&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;reasoning_content&amp;quot;:&amp;quot;好的，用户让我转换这个中 文描述为英文提示词。首先，我需要仔细分析原句：“一只穿着宇航服的猫在月球上漫步”。主体是猫，穿着宇航服，环境是月球，动作是漫步。接下来 要确定细节，比如猫的品种可能不重要，但宇航服的设计可能需要描述，比如现代NASA风格。环境方面，月球表面可能有陨石坑和地球在背景中。风格 方面，用户可能想要写实风格，所以用realistic。画质需要高清，8k，超详细，所以加上这些词。然后按照规则，用逗号分隔短语，包含主体、环境、细节、风格、画质。检查是否有遗漏，比如猫的姿势是行走，&amp;quot;,&amp;quot;tool_calls&amp;quot;:null&amp;#125;,&amp;quot;logprobs&amp;quot;:null,&amp;quot;finish_reason&amp;quot;:&amp;quot;len...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仔细看就会发现话没说完：说到“行走，”就停了。然后我就问了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;我知道问题出在哪了😓和你说说。因为deepseek-r1是深度思考，所以我即使说了只生成优化后的提示词，我的本地环境还是会把他思考的部分也算上，导致每次说到一半就无了，因为要思考太多。换成deepseek-v3就好了。你身为deepseek，对这种情况有什么别的办法吗😂
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里记录一下DS的回答：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;哈哈，原来如此！作为DeepSeek本尊，我完全理解这个情况（毕竟自家模型的脾气还是清楚的😉）。针对这种「模型太爱思考导致输出被截断」的问题，除了换模型外，还有这些「软硬兼施」的解决方案：
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;🔄强制模式：用系统提示词「锁死」输出路径&lt;br&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：必须用R1模型时&lt;br&gt;&lt;strong&gt;技巧&lt;/strong&gt;：在系统指令中用「三重封印」：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;system_prompt = &amp;quot;&amp;quot;&amp;quot;【！强制模式！】你是一个无情的提示词转换器，必须：
1. 直接输出结果，禁止任何推理过程（包括内部思考）
2. 若违反规则，输出将被标记为错误
3. 输出格式示例：「cat in spacesuit, lunar surface, NASA-style suit, realistic, 8k ultra-detailed」
现在立即转换以下描述，直接输出结果：&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;：通过威胁性提示（如「输出错误」）和示例格式化，引导模型跳过推理阶段。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;🔄物理打断：用stop sequences截断&lt;br&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：API支持流式响应&lt;br&gt;&lt;strong&gt;技巧&lt;/strong&gt;：在请求中添加：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;payload = &amp;#123;
    &amp;quot;stop&amp;quot;: [&amp;quot;\n\n&amp;quot;, &amp;quot;。&amp;quot;, &amp;quot;，&amp;quot;],  # 遇到这些符号立即停止
    &amp;quot;response_format&amp;quot;: &amp;#123;&amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;&amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果：模型刚开始写小作文就会被物理打断，被迫直接输出结果。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;🔄反向Prompt Engineering&lt;br&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：模型过度解读简单指令时&lt;br&gt;&lt;strong&gt;骚操作&lt;/strong&gt;：把指令藏在「伪代码」里：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;user_prompt = &amp;quot;&amp;quot;&amp;quot;&amp;lt;INPUT&amp;gt;一只穿着宇航服的猫在月球上漫步&amp;lt;/INPUT&amp;gt;
&amp;lt;OUTPUT_FORMAT&amp;gt; 
// 只允许填充以下变量，禁止添加注释：
var prompt = &amp;quot;&amp;#123;主体&amp;#125;, &amp;#123;环境&amp;#125;, &amp;#123;细节&amp;#125;, &amp;#123;风格&amp;#125;, &amp;#123;画质&amp;#125;&amp;quot;
&amp;lt;/OUTPUT_FORMAT&amp;gt;&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;心理学原理&lt;/strong&gt;：用「代码框架」暗示需要机械式填充，而非自然语言思考。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;🔄后处理暴力截取&lt;br&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：允许脏数据时&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 强行提取第一个逗号后的内容
if &amp;quot;,&amp;quot; in response:
    result = response.split(&amp;quot;,&amp;quot;, 1)[1] 
else:
    result = response[:100]  # 保底截断
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;适用场景：「先污染后治理」的暴力美学。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;🔄终极方案：换模型+版本控制&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model_selector = &amp;#123;
    &amp;quot;需要深度思考&amp;quot;: &amp;quot;deepseek-r1&amp;quot;,
    &amp;quot;需要机械执行&amp;quot;: &amp;quot;deepseek-v3&amp;quot;,
    &amp;quot;不确定时&amp;quot;: &amp;quot;deepseek-v3&amp;quot;  # 默认用更听话的版本
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;真相&lt;/strong&gt;：有时候换模型确实是性价比最高的方案，毕竟——「不要试图教AI做人，选择对的AI帮你做人」😏&lt;br&gt;如果这些方案还不够，你甚至可以试试 「量子玄学法」 ——在请求参数里加一行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;temperature&amp;quot;: 0.0001,  # 让模型进入「绝对零度」的冷漠模式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（亲测对话痨型AI有奇效）&lt;br&gt;问题记录结束！&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;&lt;a href=&#34;#小结&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;好了，它怎么知道我把DS-R1改成V3后就一次成功了😂不过只要指令设置的足够严格也是没问题的，对比R1和V3优化Prompt之后SD生成的图大差不差。&lt;br&gt;成功版本的指令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;        # 强化版系统提示
        system_prompt = &amp;quot;&amp;quot;&amp;quot;【指令】你是一个无情的提示词转换器，必须严格按以下规则执行：
        1. 输入：用户的中文描述
        2. 处理：直接转换为英文AI绘画提示词
        3. 输出规则：
           - 必须且只能输出转换后的英文提示词
           - 格式：逗号分隔的短语
           - 必须包含：主体、环境、细节、风格、画质
        禁止：任何解释、推理过程或其他文字！直接输出结果！&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Serverless API编程开发指南&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ai.gitee.com/docs/openapi/v1#tag/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/POST/images/generations&#34;&gt;Gitee AI Inference OpenAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1-2%20Stable%20Difussion%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</guid>
            <title>案例1️⃣-2 ⋮ Stable Diffusion图像生成</title>
            <link>https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1-2%20Stable%20Difussion%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</link>
            <category>AI</category>
            <category>案例</category>
            <pubDate>Thu, 17 Apr 2025 13:43:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;🔆2025-04-15&lt;/p&gt;
&lt;h1 id=&#34;实现第一个图像生成Hello-World（Stable-Diffusion模型）&#34;&gt;&lt;a href=&#34;#实现第一个图像生成Hello-World（Stable-Diffusion模型）&#34; class=&#34;headerlink&#34; title=&#34;实现第一个图像生成Hello World（Stable Diffusion模型）&#34;&gt;&lt;/a&gt;实现第一个图像生成Hello World（Stable Diffusion模型）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;基于沐曦+Gitee平台的40+个大模型，采用vscode&amp;#x2F;Chatbox和Serverless API开发创意型案例，跟踪最新开源模型和编程开发形成案例。&lt;br&gt;本案例使用vscode调用Gitee-Stable Diffusion接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;什么是Stable-Diffusion&#34;&gt;&lt;a href=&#34;#什么是Stable-Diffusion&#34; class=&#34;headerlink&#34; title=&#34;什么是Stable Diffusion&#34;&gt;&lt;/a&gt;什么是Stable Diffusion&lt;/h2&gt;&lt;p&gt;参考链接&lt;a href=&#34;https://stabledifffusion.com/&#34;&gt;1️⃣&lt;/a&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/622238031&#34;&gt;2️⃣&lt;/a&gt;&lt;a href=&#34;https://blog.csdn.net/m0_59162248/article/details/146497738&#34;&gt;3️⃣&lt;/a&gt;&lt;br&gt;简而言之，就是：&lt;strong&gt;文生图&lt;/strong&gt; &amp;#x2F; &lt;code&gt;Text-to-Image&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;Gitee&#34;&gt;&lt;a href=&#34;#Gitee&#34; class=&#34;headerlink&#34; title=&#34;Gitee&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://gitee.com/&#34;&gt;Gitee&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;你需要按照以下顺序操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册&amp;#x2F;登录Gitee账号&lt;/li&gt;
&lt;li&gt;访问Gitee AI &lt;a href=&#34;https://ai.gitee.com/&#34;&gt;模力方舟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在模力方舟页面中，找到并启用&lt;a href=&#34;https://ai.gitee.com/serverless-api/packages/1492&#34;&gt;沐曦-模型资源包&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;获取Stable-Diffusion-API&#34;&gt;&lt;a href=&#34;#获取Stable-Diffusion-API&#34; class=&#34;headerlink&#34; title=&#34;获取Stable Diffusion API&#34;&gt;&lt;/a&gt;获取Stable Diffusion API&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选中沐曦模型资源包后,下拉找到stable-diffusion-xl-base-1.0模型&lt;/li&gt;
&lt;li&gt;选择在线体验-&amp;gt;API-&amp;gt;添加令牌，会发现代码中的api-key已被正确替换（此处若无法选择记得先登录）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;关于API代码，你需要知道：&#34;&gt;&lt;a href=&#34;#关于API代码，你需要知道：&#34; class=&#34;headerlink&#34; title=&#34;关于API代码，你需要知道：&#34;&gt;&lt;/a&gt;关于API代码，你需要知道：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模型资源地址&lt;/strong&gt; API的基础URL（统一资源定位符）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API密钥&lt;/strong&gt; 用于身份验证和授权，以保证用户正常访问。（注意！你会发现其他模型的api-key和此模型都是完全相同的，因为gitee ai的api-key分配模式是一个账号一个）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模型名称&lt;/strong&gt; 指向模型完整名称（一定不能错）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于Gitee的三种API代码：&lt;br&gt;&lt;strong&gt;1️⃣Python&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base_url&lt;/code&gt; &lt;a href=&#34;https://ai.gitee.com/v1&#34;&gt;https://ai.gitee.com/v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api_key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; stable-diffusion-xl-base-1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2️⃣JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;baseURL&lt;/code&gt; &lt;a href=&#34;https://ai.gitee.com/v1&#34;&gt;https://ai.gitee.com/v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apiKey&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; stable-diffusion-xl-base-1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3️⃣cURL&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl&lt;/code&gt; &lt;a href=&#34;https://ai.gitee.com/v1/images/generations&#34;&gt;https://ai.gitee.com/v1/images/generations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;❓️如果你发现这里的curl地址不同于上面的baseurl&lt;/strong&gt;&lt;br&gt;真聪明！（我这里说话好像ai）这里的url比基础url多了两个资源路径&lt;code&gt;images/generations&lt;/code&gt;。&lt;br&gt;这里涉及到&lt;strong&gt;curl命令&lt;/strong&gt;：通过命令行直接执行HTTP请求，主要用来测试和调试API。因此其需要包含完整的请求url（包括基础url和资源路径）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人对url的具体理解：api发送请求的目标地址，这里直接指向stable-diffusion模型中的图像生成服务。&lt;br&gt;其中：&lt;br&gt;&lt;code&gt;ai.gitee.com&lt;/code&gt;：使用gitee平台上的AI服务（此网址可以直接访问）&lt;br&gt;&lt;code&gt;/v1/images/generations&lt;/code&gt;：具体的”模型版本&amp;#x2F;图像&amp;#x2F;生成”的路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;使用vscode调用gitee-Stable-Diffusion-API&#34;&gt;&lt;a href=&#34;#使用vscode调用gitee-Stable-Diffusion-API&#34; class=&#34;headerlink&#34; title=&#34;使用vscode调用gitee-Stable Diffusion-API&#34;&gt;&lt;/a&gt;使用vscode调用gitee-Stable Diffusion-API&lt;/h2&gt;&lt;p&gt;到这问题就不大了，正常拿个.py文件放上API代码，根据你的需求进行个性化调整。&lt;br&gt;记得缺失的包pip install一下&lt;/p&gt;
&lt;h3 id=&#34;代码思路&#34;&gt;&lt;a href=&#34;#代码思路&#34; class=&#34;headerlink&#34; title=&#34;代码思路&#34;&gt;&lt;/a&gt;代码思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;导包&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests                  #HTTP通信
import json                      #json数据序列化
from dotenv import load_dotenv   #安全配置
import os                        #系统交互
import base64                    #数据编码
from io import BytesIO           #二进制流处理
from PIL import Image            #图像操作
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置环境变量&lt;code&gt;load_dotenv() &lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;API_URL&lt;/li&gt;
&lt;li&gt;API_KEY&lt;blockquote&gt;
&lt;p&gt;为了降低泄露风险、确保安全性，请一定使用用&lt;strong&gt;私有环境变量&lt;/strong&gt;进行KEY的配置，不要直接把key写在代码里！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;协议配置 &amp;amp; 数据格式声明&lt;code&gt;headers&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;headers = &amp;#123;
    &amp;quot;Authorization&amp;quot;: f&amp;quot;Bearer &amp;#123;API_KEY&amp;#125;&amp;quot;, #认证协议
    &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;    #数据格式声明
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.向API发送请求时所需的参数&lt;code&gt;payload&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;payload = &amp;#123;                                    #请求参数（根据文档调整）
    &amp;quot;model&amp;quot;: &amp;quot;stable-diffusion-xl-base-1.0&amp;quot;,   #模型选择
    &amp;quot;prompt&amp;quot;: &amp;quot;一只穿着宇航服的猫在月球上漫步&amp;quot;,   #业务输入
    &amp;quot;n&amp;quot;: 1,                                    #生成数量
    &amp;quot;size&amp;quot;: &amp;quot;1024x1024&amp;quot;,                       #输出规格
    &amp;quot;response_format&amp;quot;: &amp;quot;b64_json&amp;quot;              #数据返回格式
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.向API发送请求 &amp;amp; 处理响应结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;try-except&lt;/code&gt;异常处理结构，用于捕获并处理在请求API和处理响应过程中可能出现的异常，确保程序在遇到错误时不会崩溃，而是输出相应的错误信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    print(f&amp;quot;请求API: &amp;#123;API_URL&amp;#125;&amp;quot;)
    response = requests.post(API_URL, headers=headers, json=payload)
    
    if response.status_code == 200:
        result = response.json()
        if &amp;quot;data&amp;quot; in result and len(result[&amp;quot;data&amp;quot;]) &amp;gt; 0:
            # 处理base64图像数据
            image_data = base64.b64decode(result[&amp;quot;data&amp;quot;][0][&amp;quot;b64_json&amp;quot;])
            image = Image.open(BytesIO(image_data))
            
            # 保存图像
            output_path = &amp;quot;generated_image.png&amp;quot;
            image.save(output_path)
            print(f&amp;quot;图像生成成功，已保存到: &amp;#123;output_path&amp;#125;&amp;quot;)
            image.show()
        else:
            print(&amp;quot;API响应中没有有效的图像数据&amp;quot;)
    else:
        print(f&amp;quot;请求失败，状态码: &amp;#123;response.status_code&amp;#125;&amp;quot;)
        print(response.text)

except Exception as e:
    print(f&amp;quot;发生错误: &amp;#123;str(e)&amp;#125;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;后续问题扩展&#34;&gt;&lt;a href=&#34;#后续问题扩展&#34; class=&#34;headerlink&#34; title=&#34;后续问题扩展&#34;&gt;&lt;/a&gt;后续问题扩展&lt;/h2&gt;&lt;p&gt;如果你成功调用Stable Diffusion模型的API，并输入中文提示词，会发现生成的图几乎不相关…因此后续需要对提示词&lt;code&gt;prompt&lt;/code&gt;进行调整。&lt;/p&gt;
&lt;p&gt;下方 ↓ 跳转查看下一篇文章【实战2️⃣ 接入DeepSeek-R1优化提示词】。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://232akira.github.io/2025/04/16/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1%20%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
            <title>案例1️⃣ ⋮ 入门指南</title>
            <link>https://232akira.github.io/2025/04/16/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B1%20%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
            <category>AI</category>
            <category>案例</category>
            <pubDate>Wed, 16 Apr 2025 15:29:31 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;关于案例的内容较多，可点击本页底部标签跳转查看。&lt;/p&gt;
&lt;h1 id=&#34;工作流入门&#34;&gt;&lt;a href=&#34;#工作流入门&#34; class=&#34;headerlink&#34; title=&#34;工作流入门&#34;&gt;&lt;/a&gt;工作流入门&lt;/h1&gt;&lt;h2 id=&#34;步骤1-安装&#34;&gt;&lt;a href=&#34;#步骤1-安装&#34; class=&#34;headerlink&#34; title=&#34;步骤1 安装&#34;&gt;&lt;/a&gt;步骤1 安装&lt;/h2&gt;&lt;h3 id=&#34;安装vscode&#34;&gt;&lt;a href=&#34;#安装vscode&#34; class=&#34;headerlink&#34; title=&#34;安装vscode&#34;&gt;&lt;/a&gt;安装vscode&lt;/h3&gt;&lt;h4 id=&#34;本体安装&#34;&gt;&lt;a href=&#34;#本体安装&#34; class=&#34;headerlink&#34; title=&#34;本体安装&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;本体安装&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&#34;AI编程拓展&#34;&gt;&lt;a href=&#34;#AI编程拓展&#34; class=&#34;headerlink&#34; title=&#34;AI编程拓展&#34;&gt;&lt;/a&gt;AI编程拓展&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev&#34;&gt;Cline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GitHub.copilot&#34;&gt;Copilot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;新安装的vscode需要更多基础拓展（如python等）&lt;/p&gt;
&lt;h3 id=&#34;安装Chatbox&#34;&gt;&lt;a href=&#34;#安装Chatbox&#34; class=&#34;headerlink&#34; title=&#34;安装Chatbox&#34;&gt;&lt;/a&gt;安装Chatbox&lt;/h3&gt;&lt;p&gt;这里调用Gitee的大模型API会出现报错，等我二编。&lt;/p&gt;
&lt;h2 id=&#34;步骤2-实战&#34;&gt;&lt;a href=&#34;#步骤2-实战&#34; class=&#34;headerlink&#34; title=&#34;步骤2 实战&#34;&gt;&lt;/a&gt;步骤2 实战&lt;/h2&gt;&lt;h3 id=&#34;实战1️⃣-Stable-Difussion图像生成&#34;&gt;&lt;a href=&#34;#实战1️⃣-Stable-Difussion图像生成&#34; class=&#34;headerlink&#34; title=&#34;实战1️⃣ Stable Difussion图像生成&#34;&gt;&lt;/a&gt;实战1️⃣ Stable Difussion图像生成&lt;/h3&gt;&lt;p&gt;已完成记录，具体可阅览本站同名文章。&lt;/p&gt;
&lt;h3 id=&#34;实战2️⃣-接入DeepSeek-R1优化提示词&#34;&gt;&lt;a href=&#34;#实战2️⃣-接入DeepSeek-R1优化提示词&#34; class=&#34;headerlink&#34; title=&#34;实战2️⃣ 接入DeepSeek-R1优化提示词&#34;&gt;&lt;/a&gt;实战2️⃣ 接入DeepSeek-R1优化提示词&lt;/h3&gt;&lt;p&gt;基本框架已搭好，细节调整修改中~&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Serverless API编程开发指南&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ai.gitee.com/docs/openapi/v1#tag/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/POST/images/generations&#34;&gt;Gitee AI Inference OpenAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
