{
    "version": "https://jsonfeed.org/version/1",
    "title": "Per aspera ad astra • All posts by \"指南\" tag",
    "description": "欢迎交流学习!",
    "home_page_url": "https://232akira.github.io",
    "items": [
        {
            "id": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20PKMer%20Market%E5%AE%89%E8%A3%85/",
            "url": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20PKMer%20Market%E5%AE%89%E8%A3%85/",
            "title": "指南🧭 ⋮ PKMer Market安装",
            "date_published": "2025-08-24T08:30:06.000Z",
            "content_html": "<blockquote>\n<p>最近在用Obsidian搭建自己的知识库。工作学习以来长时间接受各方面大量信息，光靠生物脑容量已经不够用了😫</p>\n</blockquote>\n<p>那么拓展Obsidian的更多功能，如编辑增强、交互优化、绘图工具和文献管理等等，大多都可以通过配置相应的插件来实现。</p>\n<p>国内用PKMer Market安装就很舒适（非广！），两步走即可👇</p>\n<ol>\n<li><p>访问<a href=\"https://pkmer.cn/products/market/\">PKMer_PKMer 插件主题市场</a></p>\n</li>\n<li><p>在其官网下载zip包后参考<a href=\"https://pkmer.cn/Pkmer-Docs/10-obsidian/obsidian%E7%A4%BE%E5%8C%BA%E6%8F%92%E4%BB%B6/pkmer-market/pkmer%E6%8F%92%E4%BB%B6%E7%94%B5%E8%84%91%E7%AB%AF%E5%AE%89%E8%A3%85%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/\">教程</a>进行手动安装</p>\n</li>\n</ol>\n<p>参考👉<a href=\"https://blog.csdn.net/sinat_32525917/article/details/149714238\">此链接</a></p>\n<p>我安装的第三方插件如下：(在<code>设置</code>-&gt;<code>选项</code>-&gt;<code>第三方插件</code>查看)</p>\n<ol>\n<li>Calendar(Beta)</li>\n<li>Dataview</li>\n<li>Diagrams</li>\n<li>Editing Toolbar</li>\n<li>Emoji Toolbar</li>\n<li>ExcaliBrain</li>\n<li>Excalidraw</li>\n<li>PKMer</li>\n</ol>\n",
            "tags": [
                "指南"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Obsidian%20Git%E5%90%8C%E6%AD%A5/",
            "url": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Obsidian%20Git%E5%90%8C%E6%AD%A5/",
            "title": "指南🧭 ⋮ Obsidian Git同步",
            "date_published": "2025-08-24T08:30:05.000Z",
            "content_html": "<p>这里假设你用<code>A设备</code>写Obsidian笔记，并想要在<code>B设备</code>上拉取笔记内容。<a href=\"https://zhuanlan.zhihu.com/p/657663584\">参考链接</a></p>\n<h2 id=\"在A设备上\"><a href=\"#在A设备上\" class=\"headerlink\" title=\"在A设备上\"></a>在A设备上</h2><h3 id=\"1️⃣初始化本地Git仓库\"><a href=\"#1️⃣初始化本地Git仓库\" class=\"headerlink\" title=\"1️⃣初始化本地Git仓库\"></a>1️⃣初始化本地Git仓库</h3><h4 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装<a href=\"https://git-scm.com/downloads\">Git</a></h4><ol>\n<li>官网下载</li>\n<li>默认配置安装</li>\n<li>打开命令行git bash here</li>\n</ol>\n<h4 id=\"在Obsidian仓库中初始化Git\"><a href=\"#在Obsidian仓库中初始化Git\" class=\"headerlink\" title=\"在Obsidian仓库中初始化Git\"></a>在Obsidian仓库中初始化Git</h4><p><strong>1. 进入你的本地Obsidian库文件夹</strong></p>\n<blockquote>\n<p>这里建议资源管理器跳转到对应目录，在地址栏直接输入cmd+回车打开终端即可。</p>\n</blockquote>\n<pre><code>cd /path/to/your/ObsidianVault\n</code></pre>\n<p><strong>2. 初始化Git仓库</strong></p>\n<pre><code>git init\n</code></pre>\n<h3 id=\"2️⃣连接远程Github仓库\"><a href=\"#2️⃣连接远程Github仓库\" class=\"headerlink\" title=\"2️⃣连接远程Github仓库\"></a>2️⃣连接远程Github仓库</h3><h4 id=\"在你的Github上创建新仓库\"><a href=\"#在你的Github上创建新仓库\" class=\"headerlink\" title=\"在你的Github上创建新仓库\"></a>在你的Github上创建新仓库</h4><p><strong>1. 登录</strong>你的Github账号</p>\n<p><strong>2. New Repository</strong></p>\n<ul>\n<li>设置仓库名，例如<code>MyObsidianVault</code></li>\n<li><code>Private</code></li>\n<li>不要勾选<code>Initialize with README</code></li>\n</ul>\n<h4 id=\"将本地仓库推送到Github\"><a href=\"#将本地仓库推送到Github\" class=\"headerlink\" title=\"将本地仓库推送到Github\"></a>将本地仓库推送到Github</h4><blockquote>\n<p>在上一个步骤的Obsidian笔记目录下（.git隐藏文件所在根目录）cmd进入终端</p>\n</blockquote>\n<ul>\n<li>关联你的远程仓库</li>\n</ul>\n<pre><code>git remote add origin https://github.com/你的用户名/你的仓库名.git\n</code></pre>\n<h4 id=\"添加所有文件并提交\"><a href=\"#添加所有文件并提交\" class=\"headerlink\" title=\"添加所有文件并提交\"></a>添加所有文件并提交</h4><blockquote>\n<p>日常同步仅用以下三步即可</p>\n</blockquote>\n<pre><code>git add .\ngit commit -m &quot;你的更新日志&quot;\ngit push\n</code></pre>\n<hr>\n<h2 id=\"在B设备上\"><a href=\"#在B设备上\" class=\"headerlink\" title=\"在B设备上\"></a>在B设备上</h2><h3 id=\"1️⃣克隆仓库\"><a href=\"#1️⃣克隆仓库\" class=\"headerlink\" title=\"1️⃣克隆仓库\"></a>1️⃣克隆仓库</h3><p>进入你想要放置笔记文件的目录下，依旧地址栏cmd打开终端</p>\n<pre><code>git clone https://github.com/你的用户名/你的仓库名.git\n</code></pre>\n<h3 id=\"2️⃣Obsidian打开克隆的文件夹\"><a href=\"#2️⃣Obsidian打开克隆的文件夹\" class=\"headerlink\" title=\"2️⃣Obsidian打开克隆的文件夹\"></a>2️⃣Obsidian打开克隆的文件夹</h3><ol>\n<li>左边栏点击<code>打开命令面板</code></li>\n<li>选择<code>打开其他仓库</code></li>\n<li>链接到刚刚Clone的目录即可</li>\n</ol>\n<h3 id=\"3️⃣同步更新\"><a href=\"#3️⃣同步更新\" class=\"headerlink\" title=\"3️⃣同步更新\"></a>3️⃣同步更新</h3><pre><code>git pull #拉取最新更改\ngit push # 推送本地更改\n</code></pre>\n<hr>\n<p>经过以上简易快速的手动同步方式，你已经完成了Obsidian在github仓库上的同步。<br>🆗可以在任何时候在Github官网登录账号，点击<code>Your repositories</code>进入你私有的仓库查看同步笔记内容。</p>\n",
            "tags": [
                "指南"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20API%20Key%E5%AF%BC%E5%85%A5/",
            "url": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20API%20Key%E5%AF%BC%E5%85%A5/",
            "title": "指南🧭 ⋮ API Key导入",
            "date_published": "2025-08-24T08:30:04.000Z",
            "content_html": "<blockquote>\n<p>在调用模型服务时需要配置对应平台的API Key，但直接将API Key硬编码在代码中是个非常危险且不推荐的行为！！！</p>\n<p>因此关于Python项目中API Key的几种导入方法，简单归个类👇<br><em><code>（Windows11）</code></em></p>\n</blockquote>\n<h3 id=\"系统环境变量-System-Environment-Variables\"><a href=\"#系统环境变量-System-Environment-Variables\" class=\"headerlink\" title=\"系统环境变量 (System Environment Variables)\"></a>系统环境变量 (System Environment Variables)</h3><ol>\n<li><strong>终端命令</strong></li>\n</ol>\n<pre><code># cmd（需要管理员权限）\nsetx XXX_API_KEY &quot;your_api_key_here&quot; /M\n\n# powershell（需要管理员权限）\n[Environment]::SetEnvironmentVariable(&quot;XXX_API_KEY&quot;, &quot;your_api_key_here&quot;, &quot;Machine&quot;)\n</code></pre>\n<ol start=\"2\">\n<li>Win+S搜索-&gt;<strong>编辑系统环境变量</strong>-&gt;手动添加变量&amp;值</li>\n</ol>\n<ul>\n<li>变量：XXX_API_KEY</li>\n<li>值：your_api_key_here</li>\n</ul>\n<p><em><strong>特点：</strong></em></p>\n<ul>\n<li>管理员权限</li>\n<li>全局生效（适用于所有用户）</li>\n<li>重启终端后生效</li>\n<li>适合生产环境或服务器部署</li>\n</ul>\n<h3 id=\"用户环境变量-User-Environment-Variables\"><a href=\"#用户环境变量-User-Environment-Variables\" class=\"headerlink\" title=\"用户环境变量 (User Environment Variables)\"></a>用户环境变量 (User Environment Variables)</h3><ol>\n<li><strong>终端命令</strong></li>\n</ol>\n<pre><code># cmd（无需管理员权限）\nsetx XXX_API_KEY &quot;your_api_key_here&quot;\n\n# powershell（无需管理员权限）\n[Environment]::SetEnvironmentVariable(&quot;XXX_API_KEY&quot;, &quot;your_api_key_here&quot;, &quot;User&quot;)\n</code></pre>\n<ol start=\"2\">\n<li>Win+S搜索-&gt;<strong>编辑账户的环境变量</strong>-&gt;手动添加变量&amp;值</li>\n</ol>\n<ul>\n<li>变量：XXX_API_KEY</li>\n<li>值：your_api_key_here</li>\n</ul>\n<p><em><strong>特点：</strong></em></p>\n<ul>\n<li>无需管理员权限</li>\n<li>只对当前用户生效</li>\n<li>重启终端后生效</li>\n<li>适合个人开发环境</li>\n</ul>\n<h3 id=\"会话环境变量-Session-Environment-Variables\"><a href=\"#会话环境变量-Session-Environment-Variables\" class=\"headerlink\" title=\"会话环境变量 (Session Environment Variables)\"></a>会话环境变量 (Session Environment Variables)</h3><p><strong>终端命令</strong></p>\n<pre><code># cmd\nset XXX_API_KEY=your_api_key_here\n\n# powershell\n$env:XXX_API_KEY=&quot;your_api_key_here&quot;\n</code></pre>\n<p><em><strong>特点：</strong></em></p>\n<ul>\n<li>只在当前终端会话中有效</li>\n<li>关闭终端后失效</li>\n<li>无需重启终端，立即生效</li>\n<li>适合临时测试</li>\n</ul>\n<h3 id=\"env-文件\"><a href=\"#env-文件\" class=\"headerlink\" title=\".env 文件\"></a>.env 文件</h3><p>项目根目录下创建名为<code>.env</code>的文件</p>\n<pre><code>XXX_API_KEY=your_api_key_here\n</code></pre>\n<p><em><strong>特点：</strong></em></p>\n<ul>\n<li>无需管理员权限</li>\n<li>项目级别隔离，不同项目可独立管理密钥</li>\n<li>支持多环境配置（如<code>.env.local</code>, <code>.env.production</code>等）</li>\n<li>通常被<code>.gitignore</code>排除，安全性好</li>\n</ul>\n<hr>\n<h3 id=\"环境变量优先级（Python-dotenv）\"><a href=\"#环境变量优先级（Python-dotenv）\" class=\"headerlink\" title=\"环境变量优先级（Python-dotenv）\"></a>环境变量优先级（Python-dotenv）</h3><p>当使用python-dotenv加载环境变量时，变量的生效优先级如下：（从高到低）</p>\n<ol>\n<li>系统环境变量 (最高优先级)</li>\n<li>用户环境变量</li>\n<li><code>env</code>文件中的变量</li>\n<li>默认值</li>\n</ol>\n<p><em>即：进程总是取用当前环境中已存在的最高优先级的那个值。</em></p>\n<blockquote>\n<p><strong>💡需要注意：</strong><br><code>python-dotenv</code>的作用是将<code>.env</code>文件中的变量<strong>注入</strong>到当前 Python 进程的环境中，这个注入的环境<strong>并不会覆盖</strong>系统或用户环境变量。<br><strong>例如：</strong><br>某个变量（如 <code>XXX_API_KEY</code>）已经在系统的环境变量中定义了，那么<code>python-dotenv</code>从文件读取到的同名值会被忽略。</p>\n</blockquote>\n",
            "tags": [
                "指南"
            ]
        }
    ]
}