{
    "version": "https://jsonfeed.org/version/1",
    "title": "Per aspera ad astra • All posts by \"指南\" tag",
    "description": "欢迎交流学习!",
    "home_page_url": "https://232akira.github.io",
    "items": [
        {
            "id": "https://232akira.github.io/2025/10/25/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE/",
            "url": "https://232akira.github.io/2025/10/25/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE/",
            "title": "指南🧭 ⋮ 开源贡献",
            "date_published": "2025-10-25T05:12:13.000Z",
            "content_html": "<pre><code class=\"language-bash\">git config --global user.name &quot;xxx&quot;\ngit config --global user.email &quot;xxx&quot;\n</code></pre>\n<hr>\n<blockquote>\n<p>先把gpt老师说的流程记录在这里，仅供参考。</p>\n</blockquote>\n<p><em><strong>”关键步骤能具体说说吗,比如一开始我新建分支,是在fork后的目录下?然后普我本地用编译器是不是也可以进行push,我还没整过这种,之前一直是在本地偷摸弄就没了“</strong></em></p>\n<p>做开源贡献时最容易卡住的地方。别担心，我一步步帮你理清整个流程——从 Fork 到 Push 到提 PR，每个环节我都写上具体命令和注意点，你直接照着做就能跑通。</p>\n<hr>\n<h2 id=\"🧩-一、Fork-项目（在-GitHub-网页上操作）\"><a href=\"#🧩-一、Fork-项目（在-GitHub-网页上操作）\" class=\"headerlink\" title=\"🧩 一、Fork 项目（在 GitHub 网页上操作）\"></a>🧩 一、Fork 项目（在 GitHub 网页上操作）</h2><ol>\n<li><p>打开目标项目的 GitHub 页面，比如：<br> 👉 <code>https://github.com/bowang-lab/MedRAX</code></p>\n</li>\n<li><p>点右上角的 <strong>“Fork”</strong> 按钮（通常在 ⭐ Star 按钮旁边）。</p>\n</li>\n<li><p>等几秒后，GitHub 会在你的账号下生成一个副本，比如：<br> 👉 <code>https://github.com/yourname/MedRAX</code></p>\n</li>\n</ol>\n<blockquote>\n<p>✅ 现在你在你自己的账户下有一份完整的拷贝，你可以随意改代码，不会影响原项目。</p>\n</blockquote>\n<hr>\n<h2 id=\"🧱-二、把-Fork-下来的项目克隆到本地\"><a href=\"#🧱-二、把-Fork-下来的项目克隆到本地\" class=\"headerlink\" title=\"🧱 二、把 Fork 下来的项目克隆到本地\"></a>🧱 二、把 Fork 下来的项目克隆到本地</h2><p>在终端执行（选一个文件夹，比如 D:\\Projects\\）：</p>\n<p><code>git clone https://github.com/yourname/MedRAX.git cd MedRAX</code></p>\n<blockquote>\n<p>🔍 确认命令中的链接是你自己账户下的那个仓库！</p>\n</blockquote>\n<hr>\n<h2 id=\"🌿-三、新建分支（非常重要）\"><a href=\"#🌿-三、新建分支（非常重要）\" class=\"headerlink\" title=\"🌿 三、新建分支（非常重要）\"></a>🌿 三、新建分支（非常重要）</h2><p>在本地克隆下来的仓库目录下执行：</p>\n<p><code>git checkout -b feature/giteeai-adapter</code></p>\n<p>解释：</p>\n<ul>\n<li><p><code>checkout -b</code>：新建并切换到该分支；</p>\n</li>\n<li><p><code>feature/giteeai-adapter</code>：分支名，代表“添加 GiteeAI 支持”。</p>\n</li>\n</ul>\n<blockquote>\n<p>✅ 所有修改都在这个分支上完成，避免动到 main 分支。</p>\n</blockquote>\n<hr>\n<h2 id=\"🧠-四、修改代码（在编译器中进行）\"><a href=\"#🧠-四、修改代码（在编译器中进行）\" class=\"headerlink\" title=\"🧠 四、修改代码（在编译器中进行）\"></a>🧠 四、修改代码（在编译器中进行）</h2><p>你可以用 <strong>VS Code &#x2F; PyCharm &#x2F; 任意 IDE</strong> 来编辑。<br>一般来说你要改的部分包括：</p>\n<ol>\n<li><p><strong>模型调用文件</strong>（比如 <code>model.py</code>、<code>agents/llm_utils.py</code> 等）；</p>\n<ul>\n<li><p>把 <code>openai.ChatCompletion.create(...)</code> 改成调用 Gitee.AI 接口；</p>\n</li>\n<li><p>或者新建一个独立模块 <code>giteeai_adapter.py</code>。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>配置文件</strong></p>\n<ul>\n<li>在 <code>.env</code> 或 <code>config.py</code> 里添加 <code>GITEEAI_API_KEY</code>。</li>\n</ul>\n</li>\n<li><p><strong>README 更新</strong></p>\n<ul>\n<li><p>增加使用 Gitee.AI 的说明：</p>\n<p>  <code>export GITEEAI_API_KEY=你的API密钥 python demo_giteeai.py</code></p>\n</li>\n</ul>\n</li>\n<li><p><strong>测试运行</strong></p>\n<ul>\n<li>本地确认能跑通（最好做个简单的demo）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"💾-五、提交修改到本地-Git\"><a href=\"#💾-五、提交修改到本地-Git\" class=\"headerlink\" title=\"💾 五、提交修改到本地 Git\"></a>💾 五、提交修改到本地 Git</h2><p>在终端（VS Code 的终端也行）输入：</p>\n<p><code>git add . git commit -m &quot;Add Gitee.AI model backend support&quot;</code></p>\n<p>解释：</p>\n<ul>\n<li><p><code>git add .</code> 把所有改动加入暂存区；</p>\n</li>\n<li><p><code>git commit</code> 生成一次提交记录。</p>\n</li>\n</ul>\n<blockquote>\n<p>💡 养成写清楚 commit message 的习惯。</p>\n</blockquote>\n<hr>\n<h2 id=\"🚀-六、Push-到你自己的远程仓库（Fork-的那个）\"><a href=\"#🚀-六、Push-到你自己的远程仓库（Fork-的那个）\" class=\"headerlink\" title=\"🚀 六、Push 到你自己的远程仓库（Fork 的那个）\"></a>🚀 六、Push 到你自己的远程仓库（Fork 的那个）</h2><p><code>git push origin feature/giteeai-adapter</code></p>\n<p>解释：</p>\n<ul>\n<li><p><code>origin</code> 是你自己的远程仓库；</p>\n</li>\n<li><p><code>feature/giteeai-adapter</code> 是刚才创建的分支；</p>\n</li>\n<li><p>这一步会把你本地的改动上传到 GitHub。</p>\n</li>\n</ul>\n<blockquote>\n<p>🧭 完成后，在你自己的仓库页面上就能看到这个新分支。</p>\n</blockquote>\n<hr>\n<h2 id=\"🔁-七、在-GitHub-上发起-Pull-Request（PR）\"><a href=\"#🔁-七、在-GitHub-上发起-Pull-Request（PR）\" class=\"headerlink\" title=\"🔁 七、在 GitHub 上发起 Pull Request（PR）\"></a>🔁 七、在 GitHub 上发起 Pull Request（PR）</h2><ol>\n<li><p>打开你自己的仓库页面，比如：</p>\n<p> <code>https://github.com/yourname/MedRAX</code></p>\n</li>\n<li><p>GitHub 通常会自动弹出提示：“Compare &amp; pull request”。</p>\n<ul>\n<li>如果没弹出，就点 “Pull requests” → “New pull request”。</li>\n</ul>\n</li>\n<li><p>选择：</p>\n<ul>\n<li><p><strong>base repository</strong>（目标仓库） → 原项目（如 <code>bowang-lab/MedRAX</code>）；</p>\n</li>\n<li><p><strong>compare</strong>（你的分支） → 你刚 push 的分支 <code>feature/giteeai-adapter</code>。</p>\n</li>\n</ul>\n</li>\n<li><p>填写标题和说明：</p>\n<p> <code>Title: Add support for Gitee.AI model API as backend option Description: This PR adds support for the Gitee.AI platform as a compatible LLM backend. It allows domestic users to run the agent without access to OpenAI API. Tested with Gitee.AI ChatCompletion.</code></p>\n</li>\n<li><p>点击 “Create pull request”。</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"✨-八、后续\"><a href=\"#✨-八、后续\" class=\"headerlink\" title=\"✨ 八、后续\"></a>✨ 八、后续</h2><ul>\n<li><p>你的 PR 会显示在原项目的 “Pull Requests” 列表里；</p>\n</li>\n<li><p>等维护者审核，他们可能：</p>\n<ul>\n<li><p>合并（🎉）；</p>\n</li>\n<li><p>提建议（你改下再提交）；</p>\n</li>\n<li><p>或者拒绝（但仍是有效贡献记录）。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"🧭-小结：操作顺序简化版\"><a href=\"#🧭-小结：操作顺序简化版\" class=\"headerlink\" title=\"🧭 小结：操作顺序简化版\"></a>🧭 小结：操作顺序简化版</h2><table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>操作</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Fork 项目</td>\n<td>网页操作</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Clone 到本地</td>\n<td><code>git clone &lt;你的fork&gt;</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td>创建分支</td>\n<td><code>git checkout -b feature/giteeai-adapter</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td>修改代码</td>\n<td>在 IDE 里改</td>\n</tr>\n<tr>\n<td>5</td>\n<td>提交修改</td>\n<td><code>git add . &amp;&amp; git commit -m &quot;...&quot;</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td>推送到远程</td>\n<td><code>git push origin feature/giteeai-adapter</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td>提 PR</td>\n<td>在 GitHub 上发起</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "指南"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20PKMer%20Market%E5%AE%89%E8%A3%85/",
            "url": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20PKMer%20Market%E5%AE%89%E8%A3%85/",
            "title": "指南🧭 ⋮ PKMer Market安装",
            "date_published": "2025-08-24T08:30:06.000Z",
            "content_html": "<blockquote>\n<p>最近在用Obsidian搭建自己的知识库。工作学习以来长时间接受各方面大量信息，光靠生物脑容量已经不够用了😫</p>\n</blockquote>\n<p>那么拓展Obsidian的更多功能，如编辑增强、交互优化、绘图工具和文献管理等等，大多都可以通过配置相应的插件来实现。</p>\n<p>国内用PKMer Market安装就很舒适（非广！），两步走即可👇</p>\n<ol>\n<li><p>访问<a href=\"https://pkmer.cn/products/market/\">PKMer_PKMer 插件主题市场</a></p>\n</li>\n<li><p>在其官网下载zip包后参考<a href=\"https://pkmer.cn/Pkmer-Docs/10-obsidian/obsidian%E7%A4%BE%E5%8C%BA%E6%8F%92%E4%BB%B6/pkmer-market/pkmer%E6%8F%92%E4%BB%B6%E7%94%B5%E8%84%91%E7%AB%AF%E5%AE%89%E8%A3%85%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/\">教程</a>进行手动安装</p>\n</li>\n</ol>\n<p>参考👉<a href=\"https://blog.csdn.net/sinat_32525917/article/details/149714238\">此链接</a></p>\n<p>我安装的第三方插件如下：(在<code>设置</code>-&gt;<code>选项</code>-&gt;<code>第三方插件</code>查看)</p>\n<ol>\n<li>Calendar(Beta)</li>\n<li>Dataview</li>\n<li>Diagrams</li>\n<li>Editing Toolbar</li>\n<li>Emoji Toolbar</li>\n<li>ExcaliBrain</li>\n<li>Excalidraw</li>\n<li>PKMer</li>\n</ol>\n",
            "tags": [
                "指南"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Obsidian%20Git%E5%90%8C%E6%AD%A5/",
            "url": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Obsidian%20Git%E5%90%8C%E6%AD%A5/",
            "title": "指南🧭 ⋮ Obsidian Git同步",
            "date_published": "2025-08-24T08:30:05.000Z",
            "content_html": "<p>这里假设你用<code>A设备</code>写Obsidian笔记，并想要在<code>B设备</code>上拉取笔记内容。<a href=\"https://zhuanlan.zhihu.com/p/657663584\">参考链接</a></p>\n<h2 id=\"在A设备上\"><a href=\"#在A设备上\" class=\"headerlink\" title=\"在A设备上\"></a>在A设备上</h2><h3 id=\"1️⃣初始化本地Git仓库\"><a href=\"#1️⃣初始化本地Git仓库\" class=\"headerlink\" title=\"1️⃣初始化本地Git仓库\"></a>1️⃣初始化本地Git仓库</h3><h4 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装<a href=\"https://git-scm.com/downloads\">Git</a></h4><ol>\n<li>官网下载</li>\n<li>默认配置安装</li>\n<li>打开命令行git bash here</li>\n</ol>\n<h4 id=\"在Obsidian仓库中初始化Git\"><a href=\"#在Obsidian仓库中初始化Git\" class=\"headerlink\" title=\"在Obsidian仓库中初始化Git\"></a>在Obsidian仓库中初始化Git</h4><p><strong>1. 进入你的本地Obsidian库文件夹</strong></p>\n<blockquote>\n<p>这里建议资源管理器跳转到对应目录，在地址栏直接输入cmd+回车打开终端即可。</p>\n</blockquote>\n<pre><code>cd /path/to/your/ObsidianVault\n</code></pre>\n<p><strong>2. 初始化Git仓库</strong></p>\n<pre><code>git init\n</code></pre>\n<h3 id=\"2️⃣连接远程Github仓库\"><a href=\"#2️⃣连接远程Github仓库\" class=\"headerlink\" title=\"2️⃣连接远程Github仓库\"></a>2️⃣连接远程Github仓库</h3><h4 id=\"在你的Github上创建新仓库\"><a href=\"#在你的Github上创建新仓库\" class=\"headerlink\" title=\"在你的Github上创建新仓库\"></a>在你的Github上创建新仓库</h4><p><strong>1. 登录</strong>你的Github账号</p>\n<p><strong>2. New Repository</strong></p>\n<ul>\n<li>设置仓库名，例如<code>MyObsidianVault</code></li>\n<li><code>Private</code></li>\n<li>不要勾选<code>Initialize with README</code></li>\n</ul>\n<h4 id=\"将本地仓库推送到Github\"><a href=\"#将本地仓库推送到Github\" class=\"headerlink\" title=\"将本地仓库推送到Github\"></a>将本地仓库推送到Github</h4><blockquote>\n<p>在上一个步骤的Obsidian笔记目录下（.git隐藏文件所在根目录）cmd进入终端</p>\n</blockquote>\n<ul>\n<li>关联你的远程仓库</li>\n</ul>\n<pre><code>git remote add origin https://github.com/你的用户名/你的仓库名.git\n</code></pre>\n<h4 id=\"添加所有文件并提交\"><a href=\"#添加所有文件并提交\" class=\"headerlink\" title=\"添加所有文件并提交\"></a>添加所有文件并提交</h4><blockquote>\n<p>日常同步仅用以下三步即可</p>\n</blockquote>\n<pre><code>git add .\ngit commit -m &quot;你的更新日志&quot;\ngit push\n</code></pre>\n<hr>\n<h2 id=\"在B设备上\"><a href=\"#在B设备上\" class=\"headerlink\" title=\"在B设备上\"></a>在B设备上</h2><h3 id=\"1️⃣克隆仓库\"><a href=\"#1️⃣克隆仓库\" class=\"headerlink\" title=\"1️⃣克隆仓库\"></a>1️⃣克隆仓库</h3><p>进入你想要放置笔记文件的目录下，依旧地址栏cmd打开终端</p>\n<pre><code>git clone https://github.com/你的用户名/你的仓库名.git\n</code></pre>\n<h3 id=\"2️⃣Obsidian打开克隆的文件夹\"><a href=\"#2️⃣Obsidian打开克隆的文件夹\" class=\"headerlink\" title=\"2️⃣Obsidian打开克隆的文件夹\"></a>2️⃣Obsidian打开克隆的文件夹</h3><ol>\n<li>左边栏点击<code>打开命令面板</code></li>\n<li>选择<code>打开其他仓库</code></li>\n<li>链接到刚刚Clone的目录即可</li>\n</ol>\n<h3 id=\"3️⃣同步更新\"><a href=\"#3️⃣同步更新\" class=\"headerlink\" title=\"3️⃣同步更新\"></a>3️⃣同步更新</h3><pre><code>git pull #拉取最新更改\ngit push # 推送本地更改\n</code></pre>\n<hr>\n<p>经过以上简易快速的手动同步方式，你已经完成了Obsidian在github仓库上的同步。<br>🆗可以在任何时候在Github官网登录账号，点击<code>Your repositories</code>进入你私有的仓库查看同步笔记内容。</p>\n",
            "tags": [
                "指南"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20API%20Key%E5%AF%BC%E5%85%A5/",
            "url": "https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20API%20Key%E5%AF%BC%E5%85%A5/",
            "title": "指南🧭 ⋮ API Key导入",
            "date_published": "2025-08-24T08:30:04.000Z",
            "content_html": "<blockquote>\n<p>在调用模型服务时需要配置对应平台的API Key，但直接将API Key硬编码在代码中是个非常危险且不推荐的行为！！！</p>\n<p>因此关于Python项目中API Key的几种导入方法，简单归个类👇<br><em><code>（Windows11）</code></em></p>\n</blockquote>\n<h3 id=\"系统环境变量-System-Environment-Variables\"><a href=\"#系统环境变量-System-Environment-Variables\" class=\"headerlink\" title=\"系统环境变量 (System Environment Variables)\"></a>系统环境变量 (System Environment Variables)</h3><ol>\n<li><strong>终端命令</strong></li>\n</ol>\n<pre><code># cmd（需要管理员权限）\nsetx XXX_API_KEY &quot;your_api_key_here&quot; /M\n\n# powershell（需要管理员权限）\n[Environment]::SetEnvironmentVariable(&quot;XXX_API_KEY&quot;, &quot;your_api_key_here&quot;, &quot;Machine&quot;)\n</code></pre>\n<ol start=\"2\">\n<li>Win+S搜索-&gt;<strong>编辑系统环境变量</strong>-&gt;手动添加变量&amp;值</li>\n</ol>\n<ul>\n<li>变量：XXX_API_KEY</li>\n<li>值：your_api_key_here</li>\n</ul>\n<p><em><strong>特点：</strong></em></p>\n<ul>\n<li>管理员权限</li>\n<li>全局生效（适用于所有用户）</li>\n<li>重启终端后生效</li>\n<li>适合生产环境或服务器部署</li>\n</ul>\n<h3 id=\"用户环境变量-User-Environment-Variables\"><a href=\"#用户环境变量-User-Environment-Variables\" class=\"headerlink\" title=\"用户环境变量 (User Environment Variables)\"></a>用户环境变量 (User Environment Variables)</h3><ol>\n<li><strong>终端命令</strong></li>\n</ol>\n<pre><code># cmd（无需管理员权限）\nsetx XXX_API_KEY &quot;your_api_key_here&quot;\n\n# powershell（无需管理员权限）\n[Environment]::SetEnvironmentVariable(&quot;XXX_API_KEY&quot;, &quot;your_api_key_here&quot;, &quot;User&quot;)\n</code></pre>\n<ol start=\"2\">\n<li>Win+S搜索-&gt;<strong>编辑账户的环境变量</strong>-&gt;手动添加变量&amp;值</li>\n</ol>\n<ul>\n<li>变量：XXX_API_KEY</li>\n<li>值：your_api_key_here</li>\n</ul>\n<p><em><strong>特点：</strong></em></p>\n<ul>\n<li>无需管理员权限</li>\n<li>只对当前用户生效</li>\n<li>重启终端后生效</li>\n<li>适合个人开发环境</li>\n</ul>\n<h3 id=\"会话环境变量-Session-Environment-Variables\"><a href=\"#会话环境变量-Session-Environment-Variables\" class=\"headerlink\" title=\"会话环境变量 (Session Environment Variables)\"></a>会话环境变量 (Session Environment Variables)</h3><p><strong>终端命令</strong></p>\n<pre><code># cmd\nset XXX_API_KEY=your_api_key_here\n\n# powershell\n$env:XXX_API_KEY=&quot;your_api_key_here&quot;\n</code></pre>\n<p><em><strong>特点：</strong></em></p>\n<ul>\n<li>只在当前终端会话中有效</li>\n<li>关闭终端后失效</li>\n<li>无需重启终端，立即生效</li>\n<li>适合临时测试</li>\n</ul>\n<h3 id=\"env-文件\"><a href=\"#env-文件\" class=\"headerlink\" title=\".env 文件\"></a>.env 文件</h3><p>项目根目录下创建名为<code>.env</code>的文件</p>\n<pre><code>XXX_API_KEY=your_api_key_here\n</code></pre>\n<p><em><strong>特点：</strong></em></p>\n<ul>\n<li>无需管理员权限</li>\n<li>项目级别隔离，不同项目可独立管理密钥</li>\n<li>支持多环境配置（如<code>.env.local</code>, <code>.env.production</code>等）</li>\n<li>通常被<code>.gitignore</code>排除，安全性好</li>\n</ul>\n<hr>\n<h3 id=\"环境变量优先级（Python-dotenv）\"><a href=\"#环境变量优先级（Python-dotenv）\" class=\"headerlink\" title=\"环境变量优先级（Python-dotenv）\"></a>环境变量优先级（Python-dotenv）</h3><p>当使用python-dotenv加载环境变量时，变量的生效优先级如下：（从高到低）</p>\n<ol>\n<li>系统环境变量 (最高优先级)</li>\n<li>用户环境变量</li>\n<li><code>env</code>文件中的变量</li>\n<li>默认值</li>\n</ol>\n<p><em>即：进程总是取用当前环境中已存在的最高优先级的那个值。</em></p>\n<blockquote>\n<p><strong>💡需要注意：</strong><br><code>python-dotenv</code>的作用是将<code>.env</code>文件中的变量<strong>注入</strong>到当前 Python 进程的环境中，这个注入的环境<strong>并不会覆盖</strong>系统或用户环境变量。<br><strong>例如：</strong><br>某个变量（如 <code>XXX_API_KEY</code>）已经在系统的环境变量中定义了，那么<code>python-dotenv</code>从文件读取到的同名值会被忽略。</p>\n</blockquote>\n",
            "tags": [
                "指南"
            ]
        }
    ]
}