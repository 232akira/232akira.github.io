<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Per aspera ad astra • Posts by &#34;指南&#34; tag</title>
        <link>https://232akira.github.io</link>
        <description>欢迎交流学习!</description>
        <language>zh-CN</language>
        <pubDate>Sat, 25 Oct 2025 13:12:14 +0800</pubDate>
        <lastBuildDate>Sat, 25 Oct 2025 13:12:14 +0800</lastBuildDate>
        <category>记录</category>
        <category>专题</category>
        <category>力扣</category>
        <category>算法</category>
        <category>TIPS</category>
        <category>指南</category>
        <category>案例</category>
        <category>AI</category>
        <category>备忘录</category>
        <category>笔记</category>
        <item>
            <guid isPermalink="true">https://232akira.github.io/2025/10/25/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Docker%20Desktop%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
            <title>指南🧭 ⋮ Docker Desktop使用方法</title>
            <link>https://232akira.github.io/2025/10/25/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Docker%20Desktop%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
            <category>指南</category>
            <pubDate>Sat, 25 Oct 2025 13:12:14 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;Docker Desktop是&lt;strong&gt;Docker&lt;/strong&gt;的可视化图形界面版。有了就不需要再额外装Linux虚拟机来运行容器力🤭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;官网下载&lt;br&gt;点击安装包无脑allow+下一步。&lt;br&gt;&lt;del&gt;电脑不出意外会重启。&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新WSL到最新版本&lt;br&gt;Docker Desktop在Windows上不是直接运行在系统里，而是通过WSL（Linux子系统）来运行容器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;管理员身份打开cmd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wsl --update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开Docker Desktop，刷新即可。&lt;br&gt;&lt;a href=&#34;https://imgchr.com/i/pVvIfqf&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s21.ax1x.com/2025/10/26/pVvIfqf.png&#34; alt=&#34;pVvIfqf.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;观察容器情况&lt;br&gt;更多情况下，&lt;strong&gt;终端&lt;/strong&gt;复制命令执行，跑项目；而Docker &lt;strong&gt;Desktop&lt;/strong&gt;用来观察容器变化（查看存在哪些images、volumes），点点看每个容器，查看实时日志输出。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;!你需要注意！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker Desktop默认把所有images、Containers、Volumes、Cache……都装到C盘😭我后知后觉C盘为什么突然多了10G爆红了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么为绝后患，把Docker整盘迁移走。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开Docker Desktop&lt;/li&gt;
&lt;li&gt;点击右上角齿轮 -&amp;gt; settings&lt;/li&gt;
&lt;li&gt;左边栏选择Resources -&amp;gt; Advanced&lt;/li&gt;
&lt;li&gt;Disk image location&lt;/li&gt;
&lt;li&gt;Browse -&amp;gt;选择你要迁移的文件路径&lt;/li&gt;
&lt;li&gt;apply&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://232akira.github.io/2025/10/25/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE/</guid>
            <title>指南🧭 ⋮ 开源贡献</title>
            <link>https://232akira.github.io/2025/10/25/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE/</link>
            <category>指南</category>
            <pubDate>Sat, 25 Oct 2025 13:12:13 +0800</pubDate>
            <description><![CDATA[ &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global user.name &amp;quot;xxx&amp;quot;
git config --global user.email &amp;quot;xxx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;先把gpt老师说的流程记录在这里，仅供参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;”关键步骤能具体说说吗,比如一开始我新建分支,是在fork后的目录下?然后普我本地用编译器是不是也可以进行push,我还没整过这种,之前一直是在本地偷摸弄就没了“&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;做开源贡献时最容易卡住的地方。别担心，我一步步帮你理清整个流程——从 Fork 到 Push 到提 PR，每个环节我都写上具体命令和注意点，你直接照着做就能跑通。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🧩-一、Fork-项目（在-GitHub-网页上操作）&#34;&gt;&lt;a href=&#34;#🧩-一、Fork-项目（在-GitHub-网页上操作）&#34; class=&#34;headerlink&#34; title=&#34;🧩 一、Fork 项目（在 GitHub 网页上操作）&#34;&gt;&lt;/a&gt;🧩 一、Fork 项目（在 GitHub 网页上操作）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开目标项目的 GitHub 页面，比如：&lt;br&gt; 👉 &lt;code&gt;https://github.com/bowang-lab/MedRAX&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点右上角的 &lt;strong&gt;“Fork”&lt;/strong&gt; 按钮（通常在 ⭐ Star 按钮旁边）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等几秒后，GitHub 会在你的账号下生成一个副本，比如：&lt;br&gt; 👉 &lt;code&gt;https://github.com/yourname/MedRAX&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;✅ 现在你在你自己的账户下有一份完整的拷贝，你可以随意改代码，不会影响原项目。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🧱-二、把-Fork-下来的项目克隆到本地&#34;&gt;&lt;a href=&#34;#🧱-二、把-Fork-下来的项目克隆到本地&#34; class=&#34;headerlink&#34; title=&#34;🧱 二、把 Fork 下来的项目克隆到本地&#34;&gt;&lt;/a&gt;🧱 二、把 Fork 下来的项目克隆到本地&lt;/h2&gt;&lt;p&gt;在终端执行（选一个文件夹，比如 D:\Projects\）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/yourname/MedRAX.git cd MedRAX&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍 确认命令中的链接是你自己账户下的那个仓库！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🌿-三、新建分支（非常重要）&#34;&gt;&lt;a href=&#34;#🌿-三、新建分支（非常重要）&#34; class=&#34;headerlink&#34; title=&#34;🌿 三、新建分支（非常重要）&#34;&gt;&lt;/a&gt;🌿 三、新建分支（非常重要）&lt;/h2&gt;&lt;p&gt;在本地克隆下来的仓库目录下执行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -b feature/giteeai-adapter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;checkout -b&lt;/code&gt;：新建并切换到该分支；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;feature/giteeai-adapter&lt;/code&gt;：分支名，代表“添加 GiteeAI 支持”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;✅ 所有修改都在这个分支上完成，避免动到 main 分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🧠-四、修改代码（在编译器中进行）&#34;&gt;&lt;a href=&#34;#🧠-四、修改代码（在编译器中进行）&#34; class=&#34;headerlink&#34; title=&#34;🧠 四、修改代码（在编译器中进行）&#34;&gt;&lt;/a&gt;🧠 四、修改代码（在编译器中进行）&lt;/h2&gt;&lt;p&gt;你可以用 &lt;strong&gt;VS Code &amp;#x2F; PyCharm &amp;#x2F; 任意 IDE&lt;/strong&gt; 来编辑。&lt;br&gt;一般来说你要改的部分包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;模型调用文件&lt;/strong&gt;（比如 &lt;code&gt;model.py&lt;/code&gt;、&lt;code&gt;agents/llm_utils.py&lt;/code&gt; 等）；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;把 &lt;code&gt;openai.ChatCompletion.create(...)&lt;/code&gt; 改成调用 Gitee.AI 接口；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;或者新建一个独立模块 &lt;code&gt;giteeai_adapter.py&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;.env&lt;/code&gt; 或 &lt;code&gt;config.py&lt;/code&gt; 里添加 &lt;code&gt;GITEEAI_API_KEY&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;README 更新&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;增加使用 Gitee.AI 的说明：&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;export GITEEAI_API_KEY=你的API密钥 python demo_giteeai.py&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;测试运行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地确认能跑通（最好做个简单的demo）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;💾-五、提交修改到本地-Git&#34;&gt;&lt;a href=&#34;#💾-五、提交修改到本地-Git&#34; class=&#34;headerlink&#34; title=&#34;💾 五、提交修改到本地 Git&#34;&gt;&lt;/a&gt;💾 五、提交修改到本地 Git&lt;/h2&gt;&lt;p&gt;在终端（VS Code 的终端也行）输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add . git commit -m &amp;quot;Add Gitee.AI model backend support&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt; 把所有改动加入暂存区；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; 生成一次提交记录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 养成写清楚 commit message 的习惯。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🚀-六、Push-到你自己的远程仓库（Fork-的那个）&#34;&gt;&lt;a href=&#34;#🚀-六、Push-到你自己的远程仓库（Fork-的那个）&#34; class=&#34;headerlink&#34; title=&#34;🚀 六、Push 到你自己的远程仓库（Fork 的那个）&#34;&gt;&lt;/a&gt;🚀 六、Push 到你自己的远程仓库（Fork 的那个）&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git push origin feature/giteeai-adapter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; 是你自己的远程仓库；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;feature/giteeai-adapter&lt;/code&gt; 是刚才创建的分支；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这一步会把你本地的改动上传到 GitHub。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;🧭 完成后，在你自己的仓库页面上就能看到这个新分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🔁-七、在-GitHub-上发起-Pull-Request（PR）&#34;&gt;&lt;a href=&#34;#🔁-七、在-GitHub-上发起-Pull-Request（PR）&#34; class=&#34;headerlink&#34; title=&#34;🔁 七、在 GitHub 上发起 Pull Request（PR）&#34;&gt;&lt;/a&gt;🔁 七、在 GitHub 上发起 Pull Request（PR）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开你自己的仓库页面，比如：&lt;/p&gt;
&lt;p&gt; &lt;code&gt;https://github.com/yourname/MedRAX&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub 通常会自动弹出提示：“Compare &amp;amp; pull request”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果没弹出，就点 “Pull requests” → “New pull request”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;base repository&lt;/strong&gt;（目标仓库） → 原项目（如 &lt;code&gt;bowang-lab/MedRAX&lt;/code&gt;）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;compare&lt;/strong&gt;（你的分支） → 你刚 push 的分支 &lt;code&gt;feature/giteeai-adapter&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;填写标题和说明：&lt;/p&gt;
&lt;p&gt; &lt;code&gt;Title: Add support for Gitee.AI model API as backend option Description: This PR adds support for the Gitee.AI platform as a compatible LLM backend. It allows domestic users to run the agent without access to OpenAI API. Tested with Gitee.AI ChatCompletion.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 “Create pull request”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;✨-八、后续&#34;&gt;&lt;a href=&#34;#✨-八、后续&#34; class=&#34;headerlink&#34; title=&#34;✨ 八、后续&#34;&gt;&lt;/a&gt;✨ 八、后续&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;你的 PR 会显示在原项目的 “Pull Requests” 列表里；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等维护者审核，他们可能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;合并（🎉）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提建议（你改下再提交）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;或者拒绝（但仍是有效贡献记录）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🧭-小结：操作顺序简化版&#34;&gt;&lt;a href=&#34;#🧭-小结：操作顺序简化版&#34; class=&#34;headerlink&#34; title=&#34;🧭 小结：操作顺序简化版&#34;&gt;&lt;/a&gt;🧭 小结：操作顺序简化版&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;步骤&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Fork 项目&lt;/td&gt;
&lt;td&gt;网页操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Clone 到本地&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git clone &amp;lt;你的fork&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;创建分支&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git checkout -b feature/giteeai-adapter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;修改代码&lt;/td&gt;
&lt;td&gt;在 IDE 里改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;提交修改&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git add . &amp;amp;&amp;amp; git commit -m &amp;quot;...&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;推送到远程&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git push origin feature/giteeai-adapter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;提 PR&lt;/td&gt;
&lt;td&gt;在 GitHub 上发起&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20PKMer%20Market%E5%AE%89%E8%A3%85/</guid>
            <title>指南🧭 ⋮ PKMer Market安装</title>
            <link>https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20PKMer%20Market%E5%AE%89%E8%A3%85/</link>
            <category>指南</category>
            <pubDate>Sun, 24 Aug 2025 16:30:06 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;最近在用Obsidian搭建自己的知识库。工作学习以来长时间接受各方面大量信息，光靠生物脑容量已经不够用了😫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么拓展Obsidian的更多功能，如编辑增强、交互优化、绘图工具和文献管理等等，大多都可以通过配置相应的插件来实现。&lt;/p&gt;
&lt;p&gt;国内用PKMer Market安装就很舒适（非广！），两步走即可👇&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;访问&lt;a href=&#34;https://pkmer.cn/products/market/&#34;&gt;PKMer_PKMer 插件主题市场&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在其官网下载zip包后参考&lt;a href=&#34;https://pkmer.cn/Pkmer-Docs/10-obsidian/obsidian%E7%A4%BE%E5%8C%BA%E6%8F%92%E4%BB%B6/pkmer-market/pkmer%E6%8F%92%E4%BB%B6%E7%94%B5%E8%84%91%E7%AB%AF%E5%AE%89%E8%A3%85%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/&#34;&gt;教程&lt;/a&gt;进行手动安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考👉&lt;a href=&#34;https://blog.csdn.net/sinat_32525917/article/details/149714238&#34;&gt;此链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我安装的第三方插件如下：(在&lt;code&gt;设置&lt;/code&gt;-&amp;gt;&lt;code&gt;选项&lt;/code&gt;-&amp;gt;&lt;code&gt;第三方插件&lt;/code&gt;查看)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calendar(Beta)&lt;/li&gt;
&lt;li&gt;Dataview&lt;/li&gt;
&lt;li&gt;Diagrams&lt;/li&gt;
&lt;li&gt;Editing Toolbar&lt;/li&gt;
&lt;li&gt;Emoji Toolbar&lt;/li&gt;
&lt;li&gt;ExcaliBrain&lt;/li&gt;
&lt;li&gt;Excalidraw&lt;/li&gt;
&lt;li&gt;PKMer&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Obsidian%20Git%E5%90%8C%E6%AD%A5/</guid>
            <title>指南🧭 ⋮ Obsidian Git同步</title>
            <link>https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20Obsidian%20Git%E5%90%8C%E6%AD%A5/</link>
            <category>指南</category>
            <pubDate>Sun, 24 Aug 2025 16:30:05 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;这里假设你用&lt;code&gt;A设备&lt;/code&gt;写Obsidian笔记，并想要在&lt;code&gt;B设备&lt;/code&gt;上拉取笔记内容。&lt;a href=&#34;https://zhuanlan.zhihu.com/p/657663584&#34;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;在A设备上&#34;&gt;&lt;a href=&#34;#在A设备上&#34; class=&#34;headerlink&#34; title=&#34;在A设备上&#34;&gt;&lt;/a&gt;在A设备上&lt;/h2&gt;&lt;h3 id=&#34;1️⃣初始化本地Git仓库&#34;&gt;&lt;a href=&#34;#1️⃣初始化本地Git仓库&#34; class=&#34;headerlink&#34; title=&#34;1️⃣初始化本地Git仓库&#34;&gt;&lt;/a&gt;1️⃣初始化本地Git仓库&lt;/h3&gt;&lt;h4 id=&#34;安装Git&#34;&gt;&lt;a href=&#34;#安装Git&#34; class=&#34;headerlink&#34; title=&#34;安装Git&#34;&gt;&lt;/a&gt;安装&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;官网下载&lt;/li&gt;
&lt;li&gt;默认配置安装&lt;/li&gt;
&lt;li&gt;打开命令行git bash here&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;在Obsidian仓库中初始化Git&#34;&gt;&lt;a href=&#34;#在Obsidian仓库中初始化Git&#34; class=&#34;headerlink&#34; title=&#34;在Obsidian仓库中初始化Git&#34;&gt;&lt;/a&gt;在Obsidian仓库中初始化Git&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1. 进入你的本地Obsidian库文件夹&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里建议资源管理器跳转到对应目录，在地址栏直接输入cmd+回车打开终端即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;cd /path/to/your/ObsidianVault
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. 初始化Git仓库&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2️⃣连接远程Github仓库&#34;&gt;&lt;a href=&#34;#2️⃣连接远程Github仓库&#34; class=&#34;headerlink&#34; title=&#34;2️⃣连接远程Github仓库&#34;&gt;&lt;/a&gt;2️⃣连接远程Github仓库&lt;/h3&gt;&lt;h4 id=&#34;在你的Github上创建新仓库&#34;&gt;&lt;a href=&#34;#在你的Github上创建新仓库&#34; class=&#34;headerlink&#34; title=&#34;在你的Github上创建新仓库&#34;&gt;&lt;/a&gt;在你的Github上创建新仓库&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1. 登录&lt;/strong&gt;你的Github账号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. New Repository&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置仓库名，例如&lt;code&gt;MyObsidianVault&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Private&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不要勾选&lt;code&gt;Initialize with README&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将本地仓库推送到Github&#34;&gt;&lt;a href=&#34;#将本地仓库推送到Github&#34; class=&#34;headerlink&#34; title=&#34;将本地仓库推送到Github&#34;&gt;&lt;/a&gt;将本地仓库推送到Github&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在上一个步骤的Obsidian笔记目录下（.git隐藏文件所在根目录）cmd进入终端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;关联你的远程仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/你的用户名/你的仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;添加所有文件并提交&#34;&gt;&lt;a href=&#34;#添加所有文件并提交&#34; class=&#34;headerlink&#34; title=&#34;添加所有文件并提交&#34;&gt;&lt;/a&gt;添加所有文件并提交&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;日常同步仅用以下三步即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;你的更新日志&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;在B设备上&#34;&gt;&lt;a href=&#34;#在B设备上&#34; class=&#34;headerlink&#34; title=&#34;在B设备上&#34;&gt;&lt;/a&gt;在B设备上&lt;/h2&gt;&lt;h3 id=&#34;1️⃣克隆仓库&#34;&gt;&lt;a href=&#34;#1️⃣克隆仓库&#34; class=&#34;headerlink&#34; title=&#34;1️⃣克隆仓库&#34;&gt;&lt;/a&gt;1️⃣克隆仓库&lt;/h3&gt;&lt;p&gt;进入你想要放置笔记文件的目录下，依旧地址栏cmd打开终端&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/你的用户名/你的仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2️⃣Obsidian打开克隆的文件夹&#34;&gt;&lt;a href=&#34;#2️⃣Obsidian打开克隆的文件夹&#34; class=&#34;headerlink&#34; title=&#34;2️⃣Obsidian打开克隆的文件夹&#34;&gt;&lt;/a&gt;2️⃣Obsidian打开克隆的文件夹&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;左边栏点击&lt;code&gt;打开命令面板&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;打开其他仓库&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;链接到刚刚Clone的目录即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3️⃣同步更新&#34;&gt;&lt;a href=&#34;#3️⃣同步更新&#34; class=&#34;headerlink&#34; title=&#34;3️⃣同步更新&#34;&gt;&lt;/a&gt;3️⃣同步更新&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git pull #拉取最新更改
git push # 推送本地更改
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;经过以上简易快速的手动同步方式，你已经完成了Obsidian在github仓库上的同步。&lt;br&gt;🆗可以在任何时候在Github官网登录账号，点击&lt;code&gt;Your repositories&lt;/code&gt;进入你私有的仓库查看同步笔记内容。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20API%20Key%E5%AF%BC%E5%85%A5/</guid>
            <title>指南🧭 ⋮ API Key导入</title>
            <link>https://232akira.github.io/2025/08/24/%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97%F0%9F%A7%AD%20%E2%8B%AE%20API%20Key%E5%AF%BC%E5%85%A5/</link>
            <category>指南</category>
            <pubDate>Sun, 24 Aug 2025 16:30:04 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;在调用模型服务时需要配置对应平台的API Key，但直接将API Key硬编码在代码中是个非常危险且不推荐的行为！！！&lt;/p&gt;
&lt;p&gt;因此关于Python项目中API Key的几种导入方法，简单归个类👇&lt;br&gt;&lt;em&gt;&lt;code&gt;（Windows11）&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;系统环境变量-System-Environment-Variables&#34;&gt;&lt;a href=&#34;#系统环境变量-System-Environment-Variables&#34; class=&#34;headerlink&#34; title=&#34;系统环境变量 (System Environment Variables)&#34;&gt;&lt;/a&gt;系统环境变量 (System Environment Variables)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;终端命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# cmd（需要管理员权限）
setx XXX_API_KEY &amp;quot;your_api_key_here&amp;quot; /M

# powershell（需要管理员权限）
[Environment]::SetEnvironmentVariable(&amp;quot;XXX_API_KEY&amp;quot;, &amp;quot;your_api_key_here&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Win+S搜索-&amp;gt;&lt;strong&gt;编辑系统环境变量&lt;/strong&gt;-&amp;gt;手动添加变量&amp;amp;值&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;变量：XXX_API_KEY&lt;/li&gt;
&lt;li&gt;值：your_api_key_here&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理员权限&lt;/li&gt;
&lt;li&gt;全局生效（适用于所有用户）&lt;/li&gt;
&lt;li&gt;重启终端后生效&lt;/li&gt;
&lt;li&gt;适合生产环境或服务器部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户环境变量-User-Environment-Variables&#34;&gt;&lt;a href=&#34;#用户环境变量-User-Environment-Variables&#34; class=&#34;headerlink&#34; title=&#34;用户环境变量 (User Environment Variables)&#34;&gt;&lt;/a&gt;用户环境变量 (User Environment Variables)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;终端命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# cmd（无需管理员权限）
setx XXX_API_KEY &amp;quot;your_api_key_here&amp;quot;

# powershell（无需管理员权限）
[Environment]::SetEnvironmentVariable(&amp;quot;XXX_API_KEY&amp;quot;, &amp;quot;your_api_key_here&amp;quot;, &amp;quot;User&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Win+S搜索-&amp;gt;&lt;strong&gt;编辑账户的环境变量&lt;/strong&gt;-&amp;gt;手动添加变量&amp;amp;值&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;变量：XXX_API_KEY&lt;/li&gt;
&lt;li&gt;值：your_api_key_here&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需管理员权限&lt;/li&gt;
&lt;li&gt;只对当前用户生效&lt;/li&gt;
&lt;li&gt;重启终端后生效&lt;/li&gt;
&lt;li&gt;适合个人开发环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;会话环境变量-Session-Environment-Variables&#34;&gt;&lt;a href=&#34;#会话环境变量-Session-Environment-Variables&#34; class=&#34;headerlink&#34; title=&#34;会话环境变量 (Session Environment Variables)&#34;&gt;&lt;/a&gt;会话环境变量 (Session Environment Variables)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;终端命令&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cmd
set XXX_API_KEY=your_api_key_here

# powershell
$env:XXX_API_KEY=&amp;quot;your_api_key_here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只在当前终端会话中有效&lt;/li&gt;
&lt;li&gt;关闭终端后失效&lt;/li&gt;
&lt;li&gt;无需重启终端，立即生效&lt;/li&gt;
&lt;li&gt;适合临时测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;env-文件&#34;&gt;&lt;a href=&#34;#env-文件&#34; class=&#34;headerlink&#34; title=&#34;.env 文件&#34;&gt;&lt;/a&gt;.env 文件&lt;/h3&gt;&lt;p&gt;项目根目录下创建名为&lt;code&gt;.env&lt;/code&gt;的文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;XXX_API_KEY=your_api_key_here
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需管理员权限&lt;/li&gt;
&lt;li&gt;项目级别隔离，不同项目可独立管理密钥&lt;/li&gt;
&lt;li&gt;支持多环境配置（如&lt;code&gt;.env.local&lt;/code&gt;, &lt;code&gt;.env.production&lt;/code&gt;等）&lt;/li&gt;
&lt;li&gt;通常被&lt;code&gt;.gitignore&lt;/code&gt;排除，安全性好&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;环境变量优先级（Python-dotenv）&#34;&gt;&lt;a href=&#34;#环境变量优先级（Python-dotenv）&#34; class=&#34;headerlink&#34; title=&#34;环境变量优先级（Python-dotenv）&#34;&gt;&lt;/a&gt;环境变量优先级（Python-dotenv）&lt;/h3&gt;&lt;p&gt;当使用python-dotenv加载环境变量时，变量的生效优先级如下：（从高到低）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统环境变量 (最高优先级)&lt;/li&gt;
&lt;li&gt;用户环境变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt;文件中的变量&lt;/li&gt;
&lt;li&gt;默认值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;即：进程总是取用当前环境中已存在的最高优先级的那个值。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;💡需要注意：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;python-dotenv&lt;/code&gt;的作用是将&lt;code&gt;.env&lt;/code&gt;文件中的变量&lt;strong&gt;注入&lt;/strong&gt;到当前 Python 进程的环境中，这个注入的环境&lt;strong&gt;并不会覆盖&lt;/strong&gt;系统或用户环境变量。&lt;br&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;br&gt;某个变量（如 &lt;code&gt;XXX_API_KEY&lt;/code&gt;）已经在系统的环境变量中定义了，那么&lt;code&gt;python-dotenv&lt;/code&gt;从文件读取到的同名值会被忽略。&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
    </channel>
</rss>
