{
    "version": "https://jsonfeed.org/version/1",
    "title": "Per aspera ad astra • All posts by \"字符串\" tag",
    "description": "欢迎交流学习!",
    "home_page_url": "https://232akira.github.io",
    "items": [
        {
            "id": "https://232akira.github.io/2025/03/05/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://232akira.github.io/2025/03/05/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "Leetcode字符串",
            "date_published": "2025-03-05T07:22:48.000Z",
            "content_html": "<h1 id=\"58-最后一个单词的长度\"><a href=\"#58-最后一个单词的长度\" class=\"headerlink\" title=\"58.最后一个单词的长度\"></a>58.最后一个单词的长度</h1><blockquote>\n<p><strong>给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。</strong></p>\n</blockquote>\n<p>KMP有点难理解了对我而言…看不懂就放两天继续钻，再多看看大佬博客的不同理解，效果会更好。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>参考链接：<br><a href=\"https://www.cnblogs.com/dusf/p/kmp.html\">1️⃣</a><br><a href=\"https://blog.csdn.net/yyzsir/article/details/89462339?ops_request_misc=%257B%2522request%255Fid%2522%253A%252292dce769a412320e26ef79eb85ca18cd%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=92dce769a412320e26ef79eb85ca18cd&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-89462339-null-null.142%5Ev101%5Epc_search_result_base5&utm_term=yyzsir%20kmp&spm=1018.2226.3001.4187\">2️⃣</a></li>\n</ul>\n<hr>\n<h3 id=\"朴素模式匹配BF\"><a href=\"#朴素模式匹配BF\" class=\"headerlink\" title=\"朴素模式匹配BF\"></a>朴素模式匹配<code>BF</code></h3><p>首先来个<strong>暴力</strong>方法：不匹配模式串就右挪一位。</p>\n<pre><code>//暴力模式匹配\nint 主串位置i；\nint 模式串位置j；\nint 主串长度；\nint 子串长度；\n\n当（主串位置 &lt;= 主串长度 &amp;&amp; 模式串位置&lt;模式串长度）:\n    如果（该主串位置的主串字符 == 该模式串位置的模式串字符）：\n        i++；\n        j++；\n    否则：\n        i后退至上一轮匹配开始位置的后一位；\n        j归零；\n如果（模式串位置 == 模式串长度）：\n    匹配成功，返回出现位置；\n否则\n    匹配失败，返回-1；\n</code></pre>\n<h3 id=\"优化模式匹配KMP\"><a href=\"#优化模式匹配KMP\" class=\"headerlink\" title=\"优化模式匹配KMP\"></a>优化模式匹配<code>KMP</code></h3><p>即利用<strong>已经部分匹配</strong>这个信息，保持<strong>i指针不回溯</strong>，并通过j指针让<strong>模式串</strong>尽可能移动到<strong>更有效的位置</strong>。</p>\n<p>那么有几个要点：</p>\n<ul>\n<li><p><em><strong>前缀(Prefix)和后缀（Suffix）</strong></em><br>举个🌰，给定一个字符串s:<code>“abcab”</code>,那么:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">s的子串</th>\n<th align=\"center\"><strong>前缀</strong></th>\n<th align=\"center\"><strong>后缀</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">ab</td>\n<td align=\"center\">a</td>\n<td align=\"center\">b</td>\n</tr>\n<tr>\n<td align=\"center\">abc</td>\n<td align=\"center\">a,ab</td>\n<td align=\"center\">c,bc</td>\n</tr>\n<tr>\n<td align=\"center\">abca</td>\n<td align=\"center\">a,ab,abc</td>\n<td align=\"center\">a,ca,bca</td>\n</tr>\n<tr>\n<td align=\"center\">abcab</td>\n<td align=\"center\">a,ab,abc,abca</td>\n<td align=\"center\">b,ab,cab,bcab</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><em><strong>公共前后缀最长长度</strong></em><br>从上面的前后缀不难看出，对于s的子串，存在部分前后缀重复的情况，我们需要的正是重复子串的最大长度。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">s的子串</th>\n<th align=\"center\">前缀</th>\n<th align=\"center\">后缀</th>\n<th align=\"center\"><strong>公共前后缀最长长度</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">ab</td>\n<td align=\"center\">a</td>\n<td align=\"center\">b</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">abc</td>\n<td align=\"center\">a,ab</td>\n<td align=\"center\">c,bc</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">abca</td>\n<td align=\"center\"><code>a</code>,ab,abc</td>\n<td align=\"center\"><code>a</code>,ca,bca</td>\n<td align=\"center\"><code>1</code></td>\n</tr>\n<tr>\n<td align=\"center\">abcab</td>\n<td align=\"center\">a,<code>ab</code>,abc,abca</td>\n<td align=\"center\">b,<code>ab</code>,cab,bcab</td>\n<td align=\"center\"><code>2</code></td>\n</tr>\n</tbody></table>\n</li>\n<li><p><em><strong>next数组（部分匹配表）</strong></em><br>KMP的next数组告诉我们：当模式串中的某个字符跟主串中的某个字符失配时，模式串下一步应该跳到哪个位置。</p>\n</li>\n</ul>\n<p>对于s的<strong>每个字符</strong>而言，当这个字符作为子串的最后一位时，公共前后缀最长长度为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字符（标红部分）</th>\n<th align=\"center\">公共前后缀最长长度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>a</code>bcab</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">a<code>b</code>cab</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">ab<code>c</code>ab</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">abc<code>a</code>b</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">abca<code>b</code></td>\n<td align=\"center\">2</td>\n</tr>\n</tbody></table>\n<p>那么全部右移一位，令next[0]&#x3D;-1：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字符</th>\n<th align=\"center\">i</th>\n<th align=\"center\">next[i]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">0</td>\n<td align=\"center\">-1</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">c</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td align=\"center\">3</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\">4</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<p><strong>实际匹配过程中，j移动到子串p的next[j]位置，p相对s向右移动j-next[j]位置。</strong></p>\n<ul>\n<li><strong>迭代法求p的next数组</strong><br>我们知道：</li>\n</ul>\n<pre><code class=\"language-cpp\">next[0]=-1;\nnext[1]=0;\n</code></pre>\n<p>并且<code>next[j]</code>代表p[0…j-1]的子串公共前后缀最长长度。<br>∴ 变量定义如下：<br><code>j</code>：当前子串指针<br><code>k</code>：当前匹配的前后缀长度（&#x3D;next[j-1]）<br><code>next[j]=k</code>：next[0]&#x3D;-1 即当p[0]都匹配失败时，只能回到j&#x3D;0重新匹配。</p>\n<pre><code class=\"language-cpp\">void GetNext(char p[], int next[])\n&#123;\n    int j = 0, k = -1;\n    next[j] = k;\n    while (p[j] != &#39;\\0&#39;)             //遍历整个子串p\n    &#123;\n        if (k == -1 || p[j] == p[k]) //匹配成功😀或者k=-1（刚匹配到字串的第一个）\n        &#123;\n            j++;                     //j指针后移\n            k++;\n            next[j] = k;             //记录当前前后缀匹配长度\n        &#125; \n        else \n        &#123;\n            k = next[k];             //匹配失败😭，回溯到next[k]寻找更短的前后缀\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<ul>\n<li>KMP主算法<br>得到next数组的方法<code>GetNext()</code>，就可以完整的写出KMP函数。这里写成一个函数：</li>\n</ul>\n<pre><code class=\"language-cpp\">int KMP(string s,string p)&#123;\n    int m=s.size();\n    int n=p.size();\n    if(m==0)&#123;\n        return 0;\n    &#125;\n    //⬇️计算next数组\n    vector&lt;int&gt;next;\n    int j=0;\n    for(int i=0;i&lt;n;i++)&#123;\n        while(j&gt;0 &amp;&amp; p[i]!=p[j])&#123;\n            j=next[j-1];\n        &#125;\n        if(p[i]==p[j])&#123;\n            j++;\n        &#125;\n        next[i]=j;\n    &#125;\n    //⬇️KMP搜索匹配\n    int j=0;\n    for(int i=0;i&lt;m;i++)&#123;\n        while(j&gt;0 &amp;&amp; s[i]!=p[j])&#123;\n            j=next[j-1];\n        &#125;\n        if(s[i]==p[j])&#123;\n            j++;\n        &#125;\n        if(j==n)&#123;\n            return i-n+1;\n        &#125;\n    &#125;\n    return -1;\n&#125;\n</code></pre>\n<p>说实话，后半部分现在不能完全理解，让我再多磕几天。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int lengthOfLastWord(string s) &#123;\n        int len=s.length();\n        int m=0,n=0;\n        for(int i=len-1;i&gt;0;i--)&#123;\n            if(s[i]!=&#39; &#39; &amp;&amp; (s[i+1]==&#39; &#39; || s[i+1]==&#39;\\0&#39;))&#123;\n                m=i;\n            &#125;\n            if((s[i-1]==&#39; &#39; || s[i-1]==&#39;\\0&#39;) &amp;&amp; s[i]!=&#39; &#39;)&#123;\n                n=i;\n                break;\n            &#125;\n        &#125;\n        return m-n+1;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"1021-删除最外层的括号\"><a href=\"#1021-删除最外层的括号\" class=\"headerlink\" title=\"1021.删除最外层的括号\"></a>1021.删除最外层的括号</h1><blockquote>\n<p>有效括号字符串为空 “”、”(“ + A + “)” 或 A + B ，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。<br>例如，””，”()”，”(())()” 和 “(()(()))” 都是有效的括号字符串。<br>如果有效字符串 s 非空，且不存在将其拆分为 s &#x3D; A + B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。<br>给出一个非空有效字符串 s，考虑将其进行原语化分解，使得：s &#x3D; P_1 + P_2 + … + P_k，其中 P_i 是有效括号字符串原语。<br>对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; s.length &lt;&#x3D; 105</li>\n<li>s[i] 为 ‘(‘ 或 ‘)’</li>\n<li>s 是一个有效括号字符串</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>引用<strong>官方题解</strong>的话：<br>遍历 s，并用一个栈来表示括号的深度。遇到 ‘(’ 则将字符入栈，遇到 ‘)’ 则将栈顶字符出栈。栈从空到下一次空的过程，则是扫描了一个原语的过程。</p>\n<h2 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    string removeOuterParentheses(string s) &#123;\n        string res;\n        int cnt=0;\n        for(char ch:s)&#123;\n            if(ch==&#39;)&#39;)&#123;\n                cnt--;\n            &#125;\n            if(cnt&gt;0)&#123;\n                res.push_back(ch);\n            &#125;\n            if(ch==&#39;(&#39;)&#123;\n                cnt++;\n            &#125;\n        &#125;\n        return res;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"859-亲密字符串\"><a href=\"#859-亲密字符串\" class=\"headerlink\" title=\"859.亲密字符串\"></a>859.亲密字符串</h1><blockquote>\n<p>给你两个字符串 s 和 goal ，只要我们可以通过交换 s 中的两个字母得到与 goal 相等的结果，就返回 true ；否则返回 false 。<br>交换字母的定义是：取两个下标 i 和 j （下标从 0 开始）且满足 i !&#x3D; j ，接着交换 s[i] 和 s[j] 处的字符。</p>\n<ul>\n<li>例如，在 “abcd” 中交换下标 0 和下标 2 的元素可以生成 “cbad” 。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; s.length, goal.length &lt;&#x3D; 2 * 104</li>\n<li>s 和 goal 由小写英文字母组成</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>都去给我关注<a href=\"https://leetcode.cn/u/ac_oier/\">三叶大佬</a>！<br>既然交换s中的两个字母&#x3D;&#x3D;goal，即为亲密。那么：</p>\n<ol>\n<li>不亲密<br><code>s</code>与<code>goal</code>长度不同 <strong>或</strong> 词频不同</li>\n<li>亲密</li>\n</ol>\n<ul>\n<li><code>s</code>与<code>goal</code>不同的的字符串数量为2<br><strong>或</strong></li>\n<li><code>s</code>与<code>goal</code>不同的字符串数量为0 并且 <code>s</code>中存在出现次数&gt;2的字符</li>\n</ul>\n<blockquote>\n<p>PS: 这里<a href=\"https://leetcode.cn/u/MiracleSNeko/\">评论区</a>特好玩😂“我真傻，真的，”我抬起我没有神采的眼睛来，接着说。“我单知道两个不同的字符互相交换，会生成一个亲密字符串；我不知道相同的字符也会互相换着玩。……” 我接着但是呜咽，说不出成句的话来。（</p>\n</blockquote>\n<blockquote>\n<p>所以注意：即使一开始s&#x3D;&#x3D;goal，但是s怎么交换2字符都不能再&#x3D;&#x3D;goal，也<strong>不算亲密</strong>。</p>\n</blockquote>\n<ol start=\"3\">\n<li>还有一个代码小细节：<strong>为什么是26？</strong><br>字符<code>&#39;a&#39;</code> - <code>&#39;z&#39;</code>共26个。因为题目限定了输入字符串只包含小写字母，所以最多只需要存储26个字符的频次。</li>\n</ol>\n<h2 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-CPP\">class Solution &#123;\npublic:\n    bool buddyStrings(string s, string goal) &#123;\n        if(s.size()!=goal.size())&#123;\n            return false;\n        &#125;\n        if(s==goal)&#123;\n            vector&lt;int&gt; cnt(26);\n            for(int i=0;i&lt;s.size();i++)&#123;\n                cnt[s[i]-&#39;a&#39;]++;\n                if(cnt[s[i]-&#39;a&#39;]&gt;1)&#123;\n                    return true;\n                &#125;\n            &#125;\n            return false;\n        &#125;\n        else&#123;//记录s和goal不相同的字符位置\n            int first,second;\n            first=-1;\n            second=-1;\n            for(int i=0;i&lt;s.size();i++)&#123;\n                if(s[i]!=goal[i])&#123;\n                    if(first==-1)&#123;\n                        first=i;\n                    &#125;\n                    else if(second==-1)&#123;\n                        second=i;\n                    &#125;\n                    else&#123;\n                        return false;\n                    &#125;\n                &#125;\n            &#125;\n        //检查是否可以交换\n        return (second!=-1 &amp;&amp; s[first]==goal[second] &amp;&amp; s[second]==goal[first]);\n        &#125;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"3304-找出第K个字符Ⅰ\"><a href=\"#3304-找出第K个字符Ⅰ\" class=\"headerlink\" title=\"3304.找出第K个字符Ⅰ\"></a>3304.找出第K个字符Ⅰ</h1><blockquote>\n<p>Alice 和 Bob 正在玩一个游戏。最初，Alice 有一个字符串 word &#x3D; “a”。<br>给定一个正整数 k。<br>现在 Bob 会要求 Alice 执行以下操作 无限次 :</p>\n<ul>\n<li>将 word 中的每个字符 更改 为英文字母表中的 下一个 字符来生成一个新字符串，并将其 追加 到原始的 word。<br>例如，对 “c” 进行操作生成 “cd”，对 “zb” 进行操作生成 “zbac”。<br>在执行足够多的操作后， word 中 至少 存在 k 个字符，此时返回 word 中第 k 个字符的值。<br>注意，在操作中字符 ‘z’ 可以变成 ‘a’。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; k &lt;&#x3D; 500</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>主打一个模拟：</p>\n<ol>\n<li>构造字符串<code>s</code></li>\n</ol>\n<ul>\n<li>初始值为<code>&quot;a&quot;</code></li>\n<li>每轮迭代，生成s的副本t，然后每个字符变成它的下一个字母：<code>((word[i]-&#39;a&#39;+1)%26+&#39;a&#39;)</code><blockquote>\n<p>这里用ASCII码运算，因为’a’<del>‘z’为98</del>233,所以<code>word[i]-&#39;a&#39;</code>计算word[i]相对与a的偏移量，即字符word[i]是字母表中的<strong>第<code>word[i]-&#39;a&#39;</code>个字母</strong>，<code>+1</code>即为后一个字符；<br><code>%26+&#39;a&#39;</code>的原因是：当word[i]为<code>&#39;z&#39;</code>时,让26变回0，所以%26取模。</p>\n</blockquote>\n</li>\n<li>将<code>t</code>拼接回<code>s</code></li>\n</ul>\n<ol start=\"2\">\n<li>终止条件</li>\n</ol>\n<ul>\n<li>当<code>s.size()&gt;=k</code>时，直接返回s[k-1]</li>\n</ul>\n<h2 id=\"完整代码-3\"><a href=\"#完整代码-3\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>c&#x3D;word[i]</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    char kthCharacter(int k) &#123;\n        string word=&quot;a&quot;;\n        while(word.size()&lt;k)&#123;\n            string t;\n            for(char c:word)&#123;\n                t.push_back((c-&#39;a&#39;+1)%26+&#39;a&#39;);\n            &#125;\n            word+=t;\n        &#125;\n        return word[k-1];\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"1544-整理字符串\"><a href=\"#1544-整理字符串\" class=\"headerlink\" title=\"1544.整理字符串\"></a>1544.整理字符串</h1><blockquote>\n<p>给你一个由大小写英文字母组成的字符串 s 。<br>一个整理好的字符串中，两个相邻字符 s[i] 和 s[i+1]，其中 0&lt;&#x3D; i &lt;&#x3D; s.length-2 ，要满足如下条件:</p>\n<ul>\n<li>若 s[i] 是小写字符，则 s[i+1] 不可以是相同的大写字符。</li>\n<li>若 s[i] 是大写字符，则 s[i+1] 不可以是相同的小写字符。<br>请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的 两个相邻 字符并删除，直到字符串整理好为止。<br>请返回整理好的 字符串 。题目保证在给出的约束条件下，测试样例对应的答案是唯一的。<br>注意：空字符串也属于整理好的字符串，尽管其中没有任何字符。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; s.length &lt;&#x3D; 100</li>\n<li>s 只包含小写和大写英文字母</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>一开始直接用erase删符合条件的字符，而且删除后索引没有回退，报错显示 <code>std::out_of_range</code>。<br>后来用<strong>栈</strong>来解决：</p>\n<ol>\n<li>迭代字符串s，删除互为大小写的字符，其他的正常压栈</li>\n<li><code>abs(stk.back() - ch) == 32</code> 栈顶字符和当前字符互为大小写（用abs确保大小写前后顺序都可）</li>\n</ol>\n<h2 id=\"完整代码-4\"><a href=\"#完整代码-4\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    string makeGood(string s) &#123;\n        string stk;\n        for(char ch:s)&#123;\n            if(!stk.empty() &amp;&amp; abs(stk.back()-ch)==32)&#123;\n                stk.pop_back();\n            &#125;\n            else&#123;\n                stk.push_back(ch);\n            &#125;\n        &#125;\n        return stk;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2116-判断一个括号字符串是否有效\"><a href=\"#2116-判断一个括号字符串是否有效\" class=\"headerlink\" title=\"2116.判断一个括号字符串是否有效\"></a>2116.判断一个括号字符串是否有效</h1><blockquote>\n<p>一个括号字符串是只由 ‘(‘ 和 ‘)’ 组成的 非空 字符串。如果一个字符串满足下面 任意一个条件，那么它就是有效的：</p>\n<ul>\n<li>字符串为 ().</li>\n<li>它可以表示为 AB（A 与 B 连接），其中A 和 B 都是有效括号字符串。</li>\n<li>它可以表示为 (A) ，其中 A 是一个有效括号字符串。<br>给你一个括号字符串 s 和一个字符串 locked ，两者长度都为 n 。locked &gt;是一个二进制字符串，只包含 ‘0’ 和 ‘1’ 。对于 locked 中 每一个 下标 i ：</li>\n<li>如果 locked[i] 是 ‘1’ ，你 不能 改变 s[i] 。</li>\n<li>如果 locked[i] 是 ‘0’ ，你 可以 将 s[i] 变为 ‘(‘ 或者 ‘)’ 。<br>如果你可以将s变为有效括号字符串，请你返回true，否则返回false。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>n &#x3D;&#x3D; s.length &#x3D;&#x3D; locked.length</li>\n<li>1 &lt;&#x3D; n &lt;&#x3D; 105</li>\n<li>s[i] 要么是 ‘(‘ 要么是 ‘)’ 。</li>\n<li>locked[i] 要么是 ‘0’ 要么是 ‘1’ 。</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-5\"><a href=\"#解题思路-5\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>做到好几个括号匹配问题了，浅总结一下：</p>\n<p><em><strong>👉️括号平衡的核心规则</strong></em><br>任何前缀都不能有多余的右括号 &amp; 任何后缀都不能有多余的左括号</p>\n<p><em><strong>❔️为什么要检查前&#x2F;后缀而不是整个括号字符串？</strong></em><br>因为括号是从左到右依次匹配的。一旦前面某个位置出现错误，后面就绝对无法补救。</p>\n<p><em><strong>✅️关键思路</strong></em></p>\n<ul>\n<li>前缀遍历判断防止提前失配；后缀遍历防止无法闭合</li>\n<li>两边遍历保证整体匹配</li>\n<li>最终判断是否可以调整<code>（locked[i])</code>使其符合匹配规则</li>\n<li>注意locked也是字符串不是int</li>\n</ul>\n<h2 id=\"完整代码-5\"><a href=\"#完整代码-5\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>用时21ms，还有优化空间。</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    bool canBeValid(string s, string locked) &#123;\n        if(s.size()%2!=0)&#123;\n            return false;\n        &#125;\n        int left,right;\n        left=right=0;\n        for(int i=0;i&lt;s.size();i++)&#123;\n            if(s[i]==&#39;(&#39; || locked[i]==&#39;0&#39;)&#123;\n                left++;\n            &#125;\n            else&#123;\n                right++;\n            &#125;\n            if(right&gt;left)&#123;\n                return false;\n            &#125;\n        &#125;\n        left=right=0;\n        for(int i=s.size()-1;i&gt;=0;i--)&#123;\n            if(s[i]==&#39;)&#39; || locked[i]==&#39;0&#39;)&#123;\n                right++;\n            &#125;\n            else&#123;\n                left++;\n            &#125;\n            if(left&gt;right)&#123;\n                return false;\n            &#125;\n        &#125;\n        return true;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2255-统计是给定字符串前缀的字符串数目\"><a href=\"#2255-统计是给定字符串前缀的字符串数目\" class=\"headerlink\" title=\"2255.统计是给定字符串前缀的字符串数目\"></a>2255.统计是给定字符串前缀的字符串数目</h1><blockquote>\n<p>给你一个字符串数组 words 和一个字符串 s ，其中 words[i] 和 s 只包含 小写英文字母 。<br>请你返回 words 中是字符串 s 前缀 的 字符串数目 。<br>一个字符串的 前缀 是出现在字符串开头的子字符串。子字符串 是一个字符串中的连续一段字符序列。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; words.length &lt;&#x3D; 1000</li>\n<li>1 &lt;&#x3D; words[i].length, s.length &lt;&#x3D; 10</li>\n<li>words[i] 和 s 只 包含小写英文字母。</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-6\"><a href=\"#解题思路-6\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>暴力双循环嵌套，第一个substr得子串，第二个判断子串是否与words[i]相等。</p>\n<h2 id=\"完整代码-6\"><a href=\"#完整代码-6\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int countPrefixes(vector&lt;string&gt;&amp; words, string s) &#123;\n        string ch;\n        int cnt=0;\n        for(int i=0;i&lt;=s.length();i++)&#123;\n            ch=s.substr(0,i);\n            for(int j=0;j&lt;words.size();j++)&#123;\n                if(words[j]==ch)&#123;\n                    cnt++;\n                &#125;\n            &#125;\n        &#125;\n        return cnt;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2716-最小化字符串长度\"><a href=\"#2716-最小化字符串长度\" class=\"headerlink\" title=\"2716.最小化字符串长度\"></a>2716.最小化字符串长度</h1><blockquote>\n<p>给你一个下标从 0 开始的字符串 s ，重复执行下述操作 任意 次：<br>给你一个下标从 0 开始的字符串 s ，重复执行下述操作 任意 次：</p>\n<ul>\n<li>在字符串中选出一个下标 i ，并使 c 为字符串下标 i 处的字符。并在 i 左侧（如果有）和 右侧（如果有）各 删除 一个距离 i 最近 的字符 c 。<br>请你通过执行上述操作任意次，使 s 的长度 最小化 。<br>返回一个表示 最小化 字符串的长度的整数。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; s.length &lt;&#x3D; 100</li>\n<li>s 仅由小写英文字母组成</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-7\"><a href=\"#解题思路-7\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>题目这么长，其实就是字符串<strong>去重</strong>😂</p>\n<h2 id=\"完整代码-7\"><a href=\"#完整代码-7\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><ol>\n<li>我的方法</li>\n</ol>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int minimizedStringLength(string s) &#123;\n        unordered_set&lt;int&gt; num;\n        for(char ch:s)&#123;\n            if(num.find(ch)==num.end())&#123;\n                num.insert(ch);\n            &#125;\n        &#125;\n        return num.size();\n    &#125;\n&#125;;\n</code></pre>\n<ol start=\"2\">\n<li>更简洁的方法<br>看到<a href=\"https://leetcode.cn/problems/minimize-string-length/solutions/2296066/o1-kong-jian-wei-yun-suan-xie-fa-pythonj-7t4p/?envType=daily-question&envId=2025-03-28\">题解</a>，发现也可以直接写成一行：</li>\n</ol>\n<ul>\n<li><code>unordered_set&lt;char&gt;(s.begin(), s.end())</code><br>直接用s.begin()和s.end()构造一个unordered_set<char>，会自动去重字符串中的字符</li>\n<li><code>.size()</code><br>计算去重后的字符个数</li>\n</ul>\n<pre><code class=\"language-cpp\">return unoredered_set(s.begin(),s.end().size());\n</code></pre>\n<h1 id=\"2109-最小化字符串长度\"><a href=\"#2109-最小化字符串长度\" class=\"headerlink\" title=\"2109.最小化字符串长度\"></a>2109.最小化字符串长度</h1><blockquote>\n<p>给你一个下标从 0 开始的字符串 s ，以及一个下标从 0 开始的整数数组 spaces 。<br>数组 spaces 描述原字符串中需要添加空格的下标。每个空格都应该插入到给定索引处的字符值 之前 。</p>\n<ul>\n<li>例如，s &#x3D; “EnjoyYourCoffee” 且 spaces &#x3D; [5, 9] ，那么我们需要在 ‘Y’ 和 ‘C’ 之前添加空格，这两个字符分别位于下标 5 和下标 9 。因此，最终得到 “Enjoy Your Coffee” 。<br>请你添加空格，并返回修改后的字符串。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; s.length &lt;&#x3D; 3 * 105</li>\n<li>s 仅由大小写英文字母组成</li>\n<li>1 &lt;&#x3D; spaces.length &lt;&#x3D; 3 * 105</li>\n<li>0 &lt;&#x3D; spaces[i] &lt;&#x3D; s.length - 1</li>\n<li>spaces 中的所有值严格递增</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-8\"><a href=\"#解题思路-8\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>咳咳，虽然用时击败5%，但是自己写出来中等题而且没超时已经很棒了！夸夸自己😂</p>\n<h2 id=\"完整代码-8\"><a href=\"#完整代码-8\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    string addSpaces(string s, vector&lt;int&gt;&amp; spaces) &#123;\n        int idx=0,cnt=0;\n        for(int i=0;i&lt;s.size();i++)&#123;\n            while(idx&lt;spaces.size())&#123;\n                s.insert(spaces[idx]+cnt,&quot; &quot;);\n                idx++;\n                cnt++;\n            &#125;\n        &#125;\n        return s;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2278-字母在字符串中的百分比\"><a href=\"#2278-字母在字符串中的百分比\" class=\"headerlink\" title=\"2278.字母在字符串中的百分比\"></a>2278.字母在字符串中的百分比</h1><blockquote>\n<p>给你一个字符串s和一个字符 letter，返回在s中等于letter字符所占的百分比，向下取整到最接近的百分比。</p>\n</blockquote>\n<h2 id=\"解题思路-9\"><a href=\"#解题思路-9\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>我写的时候还很疑惑为什么返回的全是0😅然后意识到：<br><code>return (cnt/s.size())*100</code>这样合乎逻辑的写法实际上在这里是错误的。因为cnt&#x2F;s.size()是整数除法（会直接去掉小数部分），那就必&#x3D;0，然后0*100还是0，返回的也是0😂</p>\n<h2 id=\"完整代码-9\"><a href=\"#完整代码-9\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int percentageLetter(string s, char letter) &#123;\n        int cnt = 0;\n        for (char ch : s) &#123;\n            if (ch == letter) &#123;\n                cnt++;\n            &#125;\n        &#125;\n        return (cnt * 100) / s.size();  // 先乘 100 再除，确保整数除法不会丢失精度\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"168-Execl表列名称\"><a href=\"#168-Execl表列名称\" class=\"headerlink\" title=\"168.Execl表列名称\"></a>168.Execl表列名称</h1><blockquote>\n<p>给你一个整数 columnNumber ，返回它在 Excel 表中相对应的列名称。</p>\n</blockquote>\n<h2 id=\"解题思路-10\"><a href=\"#解题思路-10\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>上来看不明白这题，于是跑去看<a href=\"https://leetcode.cn/problems/excel-sheet-column-title/solutions/849680/gong-shui-san-xie-cong-1-kai-shi-de-26-j-g2ur/\">题解</a>。</p>\n<p>这道题其实是一道类似于<strong>26进制</strong>的数字系统模拟。</p>\n<ol>\n<li><p>列名的构成<br>每个列名由字母组成，并且字母的排列规则类似于进制。比如 A 对应 1，B 对应 2，…，Z 对应 26。接着，列名会继续循环，例如 AA 对应 27，AB 对应 28，…</p>\n</li>\n<li><p>对应关系</p>\n</li>\n</ol>\n<ul>\n<li>第 1 列是 A（即 1）</li>\n<li>第 2 列是 B（即 2）</li>\n<li>…</li>\n<li>第 26 列是 Z（即 26）</li>\n<li>第 27 列是 AA（即 27），可以看做是从 A（1）到 Z（26）循环一次</li>\n</ul>\n<ol start=\"3\">\n<li>解题思路</li>\n</ol>\n<ul>\n<li>每次从最右边的字符开始计算</li>\n<li><strong>注意</strong> Excel 列名从A开始（1），而不是从0开始。所以每次取余的时-1。<br>1️⃣模拟进制转换</li>\n<li>每次对26取余，然后将结果映射到 A-Z</li>\n<li>然后columnNumber-1，类似于进制中的进位操作<br>2️⃣构建列名</li>\n<li>每次获得一个字符，将其加入列名的最前面，直到 columnNumber&#x3D;0</li>\n</ul>\n<h2 id=\"完整代码-10\"><a href=\"#完整代码-10\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    string convertToTitle(int columnNumber) &#123;\n        string res=&quot;&quot;;\n        while(columnNumber&gt;0)&#123;\n            columnNumber--;\n            res=char(columnNumber%26+&#39;A&#39;)+res;\n            columnNumber/=26;\n        &#125;\n        return res;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"3396-使数组元素互不相同所需的最少操作次数\"><a href=\"#3396-使数组元素互不相同所需的最少操作次数\" class=\"headerlink\" title=\"3396.使数组元素互不相同所需的最少操作次数\"></a>3396.使数组元素互不相同所需的最少操作次数</h1><blockquote>\n<p>给你一个整数数组 nums，你需要确保数组中的元素 互不相同 。为此，你可以执行以下操作任意次：<br>从数组的开头移除 3 个元素。如果数组中元素少于 3 个，则移除所有剩余元素。<br>注意：空数组也视作为数组元素互不相同。返回使数组元素互不相同所需的 最少操作次数 。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 100</li>\n<li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 100</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-11\"><a href=\"#解题思路-11\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>说实话这道题真难到我了，虽然是道简单题。</p>\n<p>1️⃣<del>错误解法注意</del>一开始for循环遍历的同时修改容器：<br><code>for(int num:nums)</code>是range-based for loop（基于拷贝值的遍历），是基于nums的快照。但是我在遍历里用了<code>nums.erase(nums.begin(),nums.begin()+3)</code>会导致迭代器失效😂</p>\n<p>2️⃣修改方案：</p>\n<ol>\n<li><p>使用无限循环<br>直到剩下的数组已经互不相同（flag&#x3D;false）时跳出。</p>\n</li>\n<li><p>bool flag<br>表示当前数组是否有重复元素，初始值为false。</p>\n</li>\n<li><p>遍历nums<br>unordered_set<int>一个arr用来判断重复元素。这部分老操作了，上面有几道也是类似的做法。</p>\n<blockquote>\n<p>额外的就是要记得有重复元素时flag置为true</p>\n</blockquote>\n</li>\n<li><p>进行一次移除操作，计数器加一</p>\n</li>\n</ol>\n<ul>\n<li>剩余元素不足三个，直接清空nums</li>\n<li>否则删除begin()~begin()+3</li>\n</ul>\n<ol start=\"5\">\n<li>返回cnt</li>\n</ol>\n<h2 id=\"完整代码-11\"><a href=\"#完整代码-11\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int minimumOperations(vector&lt;int&gt;&amp; nums) &#123;\n        int cnt=0;\n        while(true)&#123;\n            unordered_set&lt;int&gt; arr;\n            bool flag=false;\n            for(int num:nums)&#123;\n                if(arr.find(num)!=arr.end())&#123;\n                    flag=true;\n                    break;\n                &#125;\n                arr.insert(num);\n            &#125;\n            if(flag==false)&#123;\n                break;\n            &#125;\n            if(nums.size()&lt;=3)&#123;\n                nums.clear();\n            &#125;\n            else&#123;\n                nums.erase(nums.begin(),nums.begin()+3);\n            &#125;\n            cnt++;\n        &#125;\n        return cnt;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"594-最长和谐子序列\"><a href=\"#594-最长和谐子序列\" class=\"headerlink\" title=\"594.最长和谐子序列\"></a>594.最长和谐子序列</h1><blockquote>\n<p>和谐数组是指一个数组里元素的最大值和最小值之间的差别 正好是 1 。<br>给你一个整数数组nums，请你在所有可能的子序列中找到最长的和谐子序列的长度。<br>数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 2 * 104</li>\n<li>109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-12\"><a href=\"#解题思路-12\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>思路非原创。因为我一开始不知道子序列怎么得，所以跑去看<a href=\"https://leetcode.cn/problems/longest-harmonious-subsequence/solutions/1110137/zui-chang-he-xie-zi-xu-lie-by-leetcode-s-8cyr/\">题解</a>了，官方这里讲的很明了👍</p>\n<ol>\n<li>从小到大排序（直接sort即可）</li>\n<li>begin&#x2F;end控制头尾元素下标（我这里用的head&#x2F;tail）</li>\n<li>子序列长度end-begin+1</li>\n</ol>\n<h2 id=\"完整代码-12\"><a href=\"#完整代码-12\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int findLHS(vector&lt;int&gt;&amp; nums) &#123;\n        sort(nums.begin(),nums.end());\n        int head=0,tail=0,ans=0;\n        while(tail&lt;nums.size())&#123;\n            while(nums[tail]-nums[head]&gt;1)&#123;\n                head++;\n            &#125;\n            if(nums[tail]-nums[head]==1)&#123;\n                ans=max(ans,tail-head+1);\n            &#125;\n            tail++;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "算法",
                "字符串",
                "滑动窗口"
            ]
        }
    ]
}