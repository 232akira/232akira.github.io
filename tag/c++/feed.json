{
    "version": "https://jsonfeed.org/version/1",
    "title": "Per aspera ad astra • All posts by \"c++\" tag",
    "description": "欢迎交流学习!",
    "home_page_url": "https://232akira.github.io",
    "items": [
        {
            "id": "https://232akira.github.io/2025/03/04/Leetcode%E6%95%B0%E7%BB%84/",
            "url": "https://232akira.github.io/2025/03/04/Leetcode%E6%95%B0%E7%BB%84/",
            "title": "Leetcode数组",
            "date_published": "2025-03-04T11:15:05.000Z",
            "content_html": "<p>本来想一道题一篇文，但是做的大多是简单题所以按模块归类好复习一点。</p>\n<h1 id=\"1232-缀点成线\"><a href=\"#1232-缀点成线\" class=\"headerlink\" title=\"1232.缀点成线\"></a>1232.缀点成线</h1><blockquote>\n<p>给定一个数组 coordinates ，其中 coordinates[i] &#x3D; [x, y] ， [x, y] 表示横坐标为 x、纵坐标为 y 的点。请你来判断，这些点是否在该坐标系中属于同一条直线上。</p>\n<ul>\n<li>2 &lt;&#x3D; coordinates.length &lt;&#x3D; 1000</li>\n<li>coordinates[i].length &#x3D;&#x3D; 2</li>\n<li>-10^4 &lt;&#x3D; coordinates[i][0], coordinates[i][1] &lt;&#x3D; 10^4</li>\n<li>coordinates 中不含重复的点</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>我本来是想着soeasy，用y&#x2F;x对比斜率就行了，然后发现部分样例通不过。定睛一看，发现直线不一定过原点…</p>\n<p>那么就不使用斜率，而是使用<strong>斜率交叉乘法</strong>：如果所有点都在同一条直线上，那么<strong>对于任意两点P1(x1,y1)、P2(x2,y2)、P3(x3,y3)之间的斜率必须相等</strong>。也就是<code>(y2-y1)/(x2-x1)=(y3-y1)/(x3-x1)</code>。为避免除法带来的浮点误差，用<strong>交叉相乘</strong>验证更好。<br><em><strong>并且注意！</strong></em><br>因为我的验证方法需要三个点，但是这道题有可<code>coordinates,length=2</code>的情况，那就直接返回true，因为<strong>两点确定一条直线</strong>。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    bool checkStraightLine(vector&lt;vector&lt;int&gt;&gt;&amp; coordinates) &#123;\n        int x1,y1,x2,y2;\n        x1=coordinates[0][0];\n        y1=coordinates[0][1];\n        x2=coordinates[1][0];\n        y2=coordinates[1][1];\n        if(coordinates.size()==2)&#123;\n            return true;\n        &#125;\n        for(int i=2;i&lt;coordinates.size();i++)&#123;\n            int x3=coordinates[i][0];\n            int y3=coordinates[i][1];\n            if((y2-y1)*(x3-x1)!=(x2-x1)*(y3-y1))&#123;\n                return false;\n            &#125;\n        &#125;\n        return true;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2597-美丽子集的数目\"><a href=\"#2597-美丽子集的数目\" class=\"headerlink\" title=\"2597.美丽子集的数目\"></a>2597.美丽子集的数目</h1><blockquote>\n<p>给你一个由正整数组成的数组 nums 和一个 正 整数 k 。<br>如果 nums 的子集中，任意两个整数的绝对差均不等于 k ，则认为该子数组是一个 美丽 子集。<br>返回数组 nums 中 非空 且 美丽 的子集数目。<br>nums 的子集定义为：可以经由 nums 删除某些元素（也可能不删除）得到的一个数组。只有在删除元素时选择的索引不同的情况下，两个子集才会被视作是不同的子集。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 18</li>\n<li>1 &lt;&#x3D; nums[i], k &lt;&#x3D; 1000</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>涉及<strong>子集</strong>相关问题，一般有两种方法：</p>\n<ul>\n<li>回溯</li>\n<li>位运算<br>本题选择<strong>回溯</strong>算法。因为该方法可在生成子集时<strong>剪枝</strong>。</li>\n</ul>\n<p>假设 nums &#x3D; [2, 4, 6]，我们希望生成所有子集,那么回溯的选择路径如下：</p>\n<pre><code>          dfs(0)\n        /        \\\n    不选2        选2\n     / \\         /  \\\n  不选4  选4   不选4  选4\n  ...\n</code></pre>\n<h2 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int ans=0;\n    void dfs(int index,vector&lt;int&gt;&amp; nums,unordered_map&lt;int,int&gt;&amp; freq,int k)&#123;\n        if(index==nums.size())&#123;\n            ans++;\n            return;\n        &#125;\n        dfs(index+1,nums,freq,k);\n        if(freq[nums[index]-k]==0 &amp;&amp; freq[nums[index]+k]==0)&#123;\n            freq[nums[index]]++;\n            dfs(index+1,nums,freq,k);\n            freq[nums[index]]--;\n        &#125;\n    &#125;\n    int beautifulSubsets(vector&lt;int&gt;&amp; nums, int k) &#123;\n        unordered_map&lt;int,int&gt; freq;\n        dfs(0,nums,freq,k);\n        return ans-1;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2070-每一个查询的最大美丽值\"><a href=\"#2070-每一个查询的最大美丽值\" class=\"headerlink\" title=\"2070.每一个查询的最大美丽值\"></a>2070.每一个查询的最大美丽值</h1><p>又美丽了家人们🤣</p>\n<blockquote>\n<p>给你一个二维整数数组 items ，其中 items[i] &#x3D; [pricei, beautyi] 分别表示每一个物品的价格和美丽值 。<br>同时给你一个下标从 0 开始的整数数组 queries 。对于每个查询 queries[j] ，你想求出价格小于等于 queries[j] 的物品中，最大的美丽值 是多少。如果不存在符合条件的物品，那么查询的结果为 0 。<br>请你返回一个长度与 queries 相同的数组 answer，其中 answer[j]是第 j 个查询的答案。</p>\n</blockquote>\n<blockquote>\n<p>提示：<br>-1 &lt;&#x3D; items.length, queries.length &lt;&#x3D; 105<br>-items[i].length &#x3D;&#x3D; 2<br>-1 &lt;&#x3D; pricei, beautyi, queries[j] &lt;&#x3D; 109</p>\n</blockquote>\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h3><p>首先复习一下二分查找，我又忘了咋写。<a href=\"https://232akira.github.io/2025/03/02/%E5%8A%9B%E6%89%A3%E5%A4%87%E5%BF%98%E5%BD%95/\">另一篇</a>copy来的</p>\n<blockquote>\n<ul>\n<li>要查找的目标<code>target</code></li>\n<li>索引<code>index</code></li>\n<li>左、右指示符<code>left</code>、<code>right</code></li>\n<li>中间指示符<code>mid</code><br>主要思路就是计算<code>mid</code>的位置：<br>1️⃣<code>nums[mid] == target</code> 🤭找到了<br>2️⃣<code>nums[mid] &lt; target</code> → target在left的右边 → left右移 👉️left&#x3D;mid+1;<br>3️⃣<code>nums[mid] &gt; target</code> → target在right的左边 → right左移 👉️right&#x3D;mid-1;</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-cpp\">//形参：vector&lt;int&gt;nums,int target\nint left=0;\nint right=nums.size()-1;\nwhile(left&lt;=right)&#123;\n    int mid=left+(right-left)/2;\n    if(nums[mid]=target)&#123;\n        return mid;\n    &#125;\n    else if(nums[mid]&lt;target)&#123;\n        left=mid+1;\n    &#125;\n    else&#123;\n        right=mid-1;\n    &#125;\n    return index;\n&#125;\n</code></pre>\n<h3 id=\"本题思路\"><a href=\"#本题思路\" class=\"headerlink\" title=\"本题思路\"></a>本题思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a><em><strong>方法一</strong></em></h4><p>完球，力扣的急速判题卡死了😂第一个方法直观而且没用二分，美美超时。</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    vector&lt;int&gt; maximumBeauty(vector&lt;vector&lt;int&gt;&gt;&amp; items, vector&lt;int&gt;&amp; queries) &#123;\n        vector&lt;int&gt; answer(queries.size(),0);\n        for(int j=0;j&lt;queries.size();j++)&#123;\n            int target=queries[j];\n            int maxnum=0;\n            for(int i=0;i&lt;items.size();i++)&#123;\n                if(items[i][0]&lt;=target)&#123;\n                    maxnum=max(maxnum,items[i][1]);\n                &#125;\n            &#125;\n            answer[j]=maxnum;\n        &#125;\n        return answer;\n    &#125;\n&#125;;\n</code></pre>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a><em><strong>方法二</strong></em></h4><p>老老实实用二分。注意：二分查找的前提是<strong>有序</strong>。</p>\n<ul>\n<li>先按照price递增排序;</li>\n<li>定义美丽数组;</li>\n<li>遍历items:<strong>存储当前遍历到的最大美丽值</strong>;</li>\n<li>定义答案数组;</li>\n<li>遍历querties：<strong>二分查找</strong></li>\n</ul>\n<p>二分查找目标🤟<code>items[i][0] &lt;= queries[j]</code> 的最大 i<br>有点绕了，兄弟兄弟…</p>\n<h2 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    vector&lt;int&gt; maximumBeauty(vector&lt;vector&lt;int&gt;&gt;&amp; items, vector&lt;int&gt;&amp; queries) &#123;\n        sort(items.begin(),items.end());\n        vector&lt;int&gt;maxbeauty(items.size());\n        maxbeauty[0]=items[0][1];\n        for(int i=1;i&lt;items.size();i++)&#123;\n            maxbeauty[i]=max(maxbeauty[i-1],items[i][1]);\n        &#125;\n        vector&lt;int&gt;answer(queries.size(),0);\n        for(int j=0;j&lt;queries.size();j++)&#123;\n            int target=queries[j];\n            int left=0;\n            int right=items.size()-1;\n            int index=-1;\n            while(left&lt;=right)&#123;\n                int mid=left+(right-left)/2;\n                if(items[mid][0]&lt;=target)&#123;\n                    index=mid;\n                    left=mid+1;\n                &#125;\n                else&#123;\n                    right=mid-1;\n                &#125;\n            &#125;\n            if(index!=-1)&#123;\n                answer[j]=maxbeauty[index];\n            &#125;\n        &#125;\n        return answer;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2269-找到一个数字的-K-美丽值\"><a href=\"#2269-找到一个数字的-K-美丽值\" class=\"headerlink\" title=\"2269.找到一个数字的 K 美丽值\"></a>2269.找到一个数字的 K 美丽值</h1><blockquote>\n<p>给你一个下标从0开始的整数数组nums。对于每个下标i（1 &lt;&#x3D; i &lt;&#x3D; nums.length - 2），nums[i] 的美丽值等于：<br>2，对于所有 0 &lt;&#x3D; j &lt; i 且 i &lt; k &lt;&#x3D; nums.length - 1 ，满足 nums[j] &lt; nums[i] &lt; nums[k]<br>1，如果满足 nums[i - 1] &lt; nums[i] &lt; nums[i + 1] ，且不满足前面的条件<br>0，如果上述条件全部不满足<br>返回符合 1 &lt;&#x3D; i &lt;&#x3D; nums.length - 2 的所有 nums[i] 的美丽值的总和。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>3 &lt;&#x3D; nums.length &lt;&#x3D; 105</li>\n<li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 105</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><strong>难点在于nums[i]的美丽值为2的情况：</strong><br>突然想起来高中数学老师的口头禅：“大于大的，小于小的”。<br>nums[i]需要满足：比其左侧所有的nums[j]更大，以及<em>比其右侧所有的nums</em>[k]更小。<br>即<strong>大于左侧最大值，小于右侧最小值</strong>。</p>\n<ul>\n<li><code>*max_element(arr.begin(),arr.end())</code>求数组最大值</li>\n<li><code>*min_element(arr.begin(),arr.end())</code>求数组最小值</li>\n</ul>\n<p>？超时了😇我还说想清楚了不难呢…</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int sumOfBeauties(vector&lt;int&gt;&amp; nums) &#123;\n        int maxval,minval,ans=0;\n        for(int i=1;i&lt;nums.size()-1;i++)&#123;\n            maxval=*max_element(nums.begin(),nums.begin()+i);\n            minval=*min_element(nums.begin()+i+1,nums.end());\n            if(maxval&lt;nums[i] &amp;&amp; minval&gt;nums[i])&#123;\n                ans+=2;\n            &#125;\n            else if(nums[i-1]&lt;nums[i] &amp;&amp; nums[i+1]&gt;nums[i])&#123;\n                ans+=1;\n            &#125;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<p>改进方法就是：左侧最大值和右侧最小值各自都用一个数组存起来所有i的情况，再进行条件判断。同时可以存一个，另一个随每次判断进行更新就好。</p>\n<pre><code>定义左侧最大int数组leftMax;\n遍历i从1到nums.size()：\n    leftMax[i]=max(左侧最大数组[i-1],原数组[i-1]);\nint 美丽值;\n定义右侧最小int变量rightMin并初始化为原数组[length()-1];\n遍历i从length()-2到0:\n    如果（条件一）：\n        美丽值+=2;\n    否则如果（条件2）：\n        美丽值+=1;\n    更新右侧最小值=min（右侧最小值，原数组[i]）;\n返回美丽值\n</code></pre>\n<h2 id=\"完整代码-3\"><a href=\"#完整代码-3\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int sumOfBeauties(vector&lt;int&gt;&amp; nums) &#123;\n        vector&lt;int&gt; leftMax(nums.size(),0);\n        for(int i=1;i&lt;nums.size();i++)&#123;\n            leftMax[i]=max(leftMax[i-1],nums[i-1]);\n        &#125;\n        int ans=0;\n        int rightMin=nums[nums.size()-1];\n        for(int i=nums.size()-2;i&gt;0;i--)&#123;\n            if(leftMax[i]&lt;nums[i] &amp;&amp; nums[i]&lt;rightMin)&#123;\n                ans+=2;\n            &#125;\n            else if(nums[i-1]&lt;nums[i] &amp;&amp; nums[i]&lt;nums[i+1])&#123;\n                ans+=1;\n            &#125;\n            rightMin=min(rightMin,nums[i]);\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"杨辉三角（一维数组版）\"><a href=\"#杨辉三角（一维数组版）\" class=\"headerlink\" title=\"杨辉三角（一维数组版）\"></a>杨辉三角（一维数组版）</h1><h2 id=\"完整代码-4\"><a href=\"#完整代码-4\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-c\">void Print_TR(int n)&#123;\n    int arr[n]=&#123;1&#125;;\n    for(int i=0;i&lt;n;i++)&#123;\n        for(int j=i;j&gt;0;j--)&#123;\n            arr[j]+=arr[j-1];\n        &#125;\n        //打印\n        for(int j=0;j&lt;=i;j++)&#123;\n            printf(&quot;%d &quot;,arr[j]);\n        &#125;\n        printf(&quot;\\n&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"53-最大子数组和\"><a href=\"#53-最大子数组和\" class=\"headerlink\" title=\"53.最大子数组和\"></a>53.最大子数组和</h1><blockquote>\n<p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>子数组是数组中的一个连续部分。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 105</li>\n<li>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p><strong>经典解法：Kadane算法</strong>。核心思路是动态规划，通过遍历数组维护当前最大子数组和。整体思路如下：<br>1️⃣<strong>维护两个变量：</strong></p>\n<ul>\n<li><code>sum</code>当前最大子数组和</li>\n<li><code>maxsum</code>全局最大子数组和<br>2️⃣<strong>遍历数组，每次决定是否扩展当前子数组</strong></li>\n<li>如果<code>sum+nums[i] &lt; nums[i]</code> 从nums[i]重新开始（之前的子数组必定与最大和无关</li>\n<li>否则继续累加nums[i]<br>3️⃣<strong>每次更新<code>maxsum</code></strong></li>\n</ul>\n<h2 id=\"完整代码-5\"><a href=\"#完整代码-5\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) &#123;\n        int sum=nums[0];\n        int maxsum=nums[0];\n        for(int i=1;i&lt;nums.size();i++)&#123;\n            sum=max(nums[i],sum+nums[i]);\n            maxsum=max(sum,maxsum);\n        &#125;\n        return maxsum;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"53-最大子数组和-1\"><a href=\"#53-最大子数组和-1\" class=\"headerlink\" title=\"53.最大子数组和\"></a>53.最大子数组和</h1><blockquote>\n<p>给你一个整数数组 nums 。请你创建一个满足以下条件的二维数组：</p>\n<ul>\n<li>二维数组应该 只 包含数组 nums 中的元素。</li>\n<li>二维数组中的每一行都包含 不同 的整数。</li>\n<li>二维数组的行数应尽可能 少 。<br>返回结果数组。如果存在多种答案，则返回其中任何一种。<br>请注意，二维数组的每一行上可以存在不同数量的元素。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 200</li>\n<li>1 &lt;&#x3D; nums[i] &lt;&#x3D; nums.length</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-5\"><a href=\"#解题思路-5\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>用<strong>哈希表</strong>！😎统计元素出现次数，定义一个一维数组存每行元素。每用一个元素。哈希表中该元素次数–（当次数为0时）从表中删除该元素。</p>\n<p>这里看题解 涉及到stl<strong>迭代器</strong><code>it</code>的用法：对于定义一个哈希表:<code>unordered_map&lt;int,int&gt;cnt</code></p>\n<ul>\n<li>当用<code>auto:it</code>遍历<code>cnt.begin()</code>到<code>!=cnt.end()</code>时</li>\n<li><code>it-&gt;first</code>即为哈希表键值对(key,value)中的<code>key</code>。本题中即为<strong>元素本身</strong></li>\n<li><code>it-&gt;second</code>即为哈希表键值对(key,value)中的<code>value</code>。本题中即为元素的<strong>出现次数</strong></li>\n</ul>\n<h2 id=\"完整代码-6\"><a href=\"#完整代码-6\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>感谢<a href=\"https://leetcode.cn/u/endlesscheng/\">灵神</a>题解，教会我很多</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    vector&lt;vector&lt;int&gt;&gt; findMatrix(vector&lt;int&gt;&amp; nums) &#123;\n        unordered_map&lt;int,int&gt; cnt;\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        for(int x:nums)&#123;\n            cnt[x]++;\n        &#125;\n        while(!cnt.empty())&#123;\n            vector&lt;int&gt;row;\n            for(auto it=cnt.begin();it!=cnt.end();)&#123;\n                row.push_back(it-&gt;first);\n                if(--it-&gt;second==0)&#123;\n                    it=cnt.erase(it);\n                &#125;\n                else&#123;\n                    it++;\n                &#125;\n            &#125;\n            ans.push_back(row);\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2643-一最多的行\"><a href=\"#2643-一最多的行\" class=\"headerlink\" title=\"2643.一最多的行\"></a>2643.一最多的行</h1><blockquote>\n<p>给你一个大小为 m x n 的二进制矩阵 mat ，请你找出包含最多 1 的行的下标（从 0 开始）以及这一行中 1 的数目。<br>如果有多行包含最多的 1 ，只需要选择 行下标最小 的那一行。<br>返回一个由行下标和该行中 1 的数量组成的数组。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>m &#x3D;&#x3D; mat.length </li>\n<li>n &#x3D;&#x3D; mat[i].length </li>\n<li>1 &lt;&#x3D; m, n &lt;&#x3D; 100 </li>\n<li>mat[i][j] 为 0 或 1</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-6\"><a href=\"#解题思路-6\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>最轻松的一集😂但是我写的代码略史山，还有优化空间。</p>\n<h2 id=\"完整代码-7\"><a href=\"#完整代码-7\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>这里直接用<code>int ones = count(mat[i].begin(), mat[i].end(), 1); </code>统计1的个数可以减少一次遍历。</p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    vector&lt;int&gt; rowAndMaximumOnes(vector&lt;vector&lt;int&gt;&gt;&amp; mat) &#123;\n        vector&lt;int&gt; cnt(100,0),ans;\n        int index=0;\n        for(int i=0;i&lt;mat.size();i++)&#123;\n            for(int j=0;j&lt;mat[i].size();j++)&#123;\n                if(mat[i][j]==1)&#123;\n                    cnt[i]++;\n                &#125;\n            &#125;\n        &#125;\n        int maxnum=cnt[0];\n        for(int i=0;i&lt;cnt.size();i++)&#123;\n            if(cnt[i]&gt;maxnum)&#123;\n                maxnum=cnt[i];\n                index=i;\n            &#125;\n        &#125;\n        ans.push_back(index);\n        ans.push_back(cnt[index]);\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "力扣",
                "哈希表",
                "数组",
                "C++",
                "动态规划",
                "二分查找"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/03/04/%E4%B8%93%E9%A2%982-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/",
            "url": "https://232akira.github.io/2025/03/04/%E4%B8%93%E9%A2%982-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/",
            "title": "专题2️⃣ 贪心算法",
            "date_published": "2025-03-04T05:41:46.000Z",
            "content_html": "<p>力扣连着刷到了几个贪心，而且另一篇笔记字数要爆了，决定先按大类慢慢分一下。<br>🤟<a href=\"https://zhuanlan.zhihu.com/p/180104885\">参考链接</a><br>规律特征就是更加注重当前的状态,通常用于组合优化问题。即每一次都做出<strong>当前</strong>看起来<strong>最好的</strong>选择。每次只需要考虑一个问题，并通常是自底向上求解。即<strong>局部最优→全局最优</strong>。</p>\n<h1 id=\"455-分发饼干\"><a href=\"#455-分发饼干\" class=\"headerlink\" title=\"455.分发饼干\"></a>455.分发饼干</h1><h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><h1 id=\"976-三角形的最大周长\"><a href=\"#976-三角形的最大周长\" class=\"headerlink\" title=\"976.三角形的最大周长\"></a>976.三角形的最大周长</h1><blockquote>\n<p>给定由一些正数（代表长度）组成的数组 nums ，返回 由其中三个长度组成的、面积不为零的三角形的最大周长 。如果不能形成任何面积不为零的三角形，返回 0。</p>\n<ul>\n<li><code>3 &lt;= nums.length &lt;= 104</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 106</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>因为题目需要的是最大的三角形周长，所以不需要暴力列举所有的情况再一一对比，而是直接奔着“最大”这个目标求解就行:<br>三条边a,b,c（假设从小到大已排好），当a+b&gt;c时满足三角形。<strong>如果不满足，必须换更大的a,b</strong>。<br>贪心优化策略：</p>\n<ul>\n<li>nums排序</li>\n<li>从最大的三个数开始 尝试是否满足</li>\n<li>若无法满足，往前找更小的a,b</li>\n<li>一旦找到符合条件的三边，直接返回</li>\n</ul>\n<h2 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int largestPerimeter(vector&lt;int&gt;&amp; nums) &#123;\n        sort(nums.begin(),nums.end());\n        for(int i=nums.size()-1;i&gt;=2;i++)&#123;\n            if(nums[i-1]+nums[i-2]&gt;nums[i])\n        &#125;\n        return 0;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"860-柠檬水找零\"><a href=\"#860-柠檬水找零\" class=\"headerlink\" title=\"860.柠檬水找零\"></a>860.柠檬水找零</h1><blockquote>\n<p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。<br>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。<br>注意，一开始你手头没有任何零钱。<br>给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p>\n<ul>\n<li><code>1 &lt;= bills.length &lt;= 105</code></li>\n<li><code>bills[i] 不是 5 就是 10 或是 20 </code></li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>**找零时，尽量先用大额。**并且只记录5美元、10美元的数量（因为这题目的情况不可能找20块）那么</p>\n<ul>\n<li>收到5美元  直接收 </li>\n<li>收到10美元 <code>10-5=5</code> 找5美元（如果有）</li>\n<li>收到20美元 <strong>贪心来了~</strong><code>20-5=15</code>优先使用10+5找零，否则用5+5+5（如果有）</li>\n</ul>\n<h2 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    bool lemonadeChange(vector&lt;int&gt;&amp; bills) &#123;\n        int five=0,ten=0;\n        for(int bill:bills)&#123;\n            if(bill==5)&#123;\n                five++;\n            &#125;\n            else if(bill==10)&#123;\n                if(five!=0)&#123;\n                    five--;\n                    ten++;\n                &#125;\n                else&#123;\n                    return false;\n                &#125;\n            &#125;\n            else if(bill==20)&#123;\n                if(ten&gt;0 &amp;&amp; five&gt;0)&#123;\n                    ten--;\n                    five--;\n                &#125;\n                else if(five&gt;=3)&#123;\n                    five-=3;\n                &#125;\n                else&#123;\n                    return false;\n                &#125;\n                \n            &#125;\n        &#125;\n        return true;\n    &#125;\n&#125;;\n</code></pre>\n<h1 id=\"2680-最大或值\"><a href=\"#2680-最大或值\" class=\"headerlink\" title=\"2680.最大或值\"></a>2680.最大或值</h1><blockquote>\n<p>给你一个下标从 0 开始长度为 n 的整数数组 nums 和一个整数 k 。每一次操作中，你可以选择一个数并将它乘 2 。<br>你最多可以进行 k 次操作，请你返回 nums[0] | nums[1] | … | nums[n - 1] 的最大值。<br>a | b 表示两个整数 a 和 b 的 按位或 运算。</p>\n</blockquote>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 105</li>\n<li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li>\n<li>1 &lt;&#x3D; k &lt;&#x3D; 15</li>\n</ul>\n</blockquote>\n<h2 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>做了这么几道中等题，发现很多难就难在变量大的时候怎么才能不超时的问题上😂</p>\n<p>因此要注意：<br><em><strong>👉️按位或（|）的特性</strong></em>（二进制数）某一位只要有一个是1，按位或的结果该位就是1。<br>题目需要按位或的最大值，那么也就意味着尽量让高位变成1。</p>\n<p><em><strong>👉️不能直接暴力枚举</strong></em>否则会超时。</p>\n<p><em><strong>🔍️按位运算总结</strong></em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算</th>\n<th align=\"center\">运算符</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">按位与</td>\n<td align=\"center\"><code>&amp;</code></td>\n<td align=\"center\">两位都是1，结果才是1</td>\n<td align=\"center\"><code>5 &amp; 3 = 1</code></td>\n</tr>\n<tr>\n<td align=\"center\">按位或</td>\n<td align=\"center\"><code>一竖杠</code></td>\n<td align=\"center\">只要有一个是1，结果就是1</td>\n<td align=\"center\"><code>5 或 3 = 7</code></td>\n</tr>\n<tr>\n<td align=\"center\">按位异或</td>\n<td align=\"center\"><code>^</code></td>\n<td align=\"center\">相同为0，不同为1</td>\n<td align=\"center\"><code>5 ^ 3 = 6</code></td>\n</tr>\n<tr>\n<td align=\"center\">按位取反</td>\n<td align=\"center\"><code>~</code></td>\n<td align=\"center\">0变1，1变0</td>\n<td align=\"center\"><code>~5 = -6</code>（补码）</td>\n</tr>\n<tr>\n<td align=\"center\">左移</td>\n<td align=\"center\"><code>&lt;&lt;</code></td>\n<td align=\"center\">乘2^k</td>\n<td align=\"center\"><code>5 &lt;&lt; 1 = 10</code></td>\n</tr>\n<tr>\n<td align=\"center\">右移</td>\n<td align=\"center\"><code>&gt;&gt;</code></td>\n<td align=\"center\">除2^k</td>\n<td align=\"center\"><code>5 &gt;&gt; 1 = 2</code></td>\n</tr>\n</tbody></table>\n<p>解决方案：<br><strong>1️⃣预计算最初的或值</strong></p>\n<ul>\n<li><code>orsum|=num</code></li>\n</ul>\n<p><strong>2️⃣按位或最大化</strong></p>\n<ul>\n<li>遍历nums，对每个num[i]进行优化</li>\n<li>假设nums[i]被选中，*2^k，计算新的或值</li>\n<li>对于已经选定的nums[i]，<code>0~i-1</code>的或值设为<code>leftor</code>;<code>i+1~n-1</code>的或值设为<code>rightor</code>。那么新的或值只需要让<code>leftor | nums[i]*2^k | rightor</code>即可。</li>\n<li>nums[i]*2^k用<code>nums[i] * (1LL &lt;&lt; k)</code>。表示位运算中的左移操作，让nums[i]的二进制向左移动k位右侧补零，等价于<code>*2^k</code>（这里可以自己试一试：<code>5&lt;&lt;3</code>等价于<code>40=5*8</code>。）；LL防止溢出。</li>\n</ul>\n<p><strong>🆗其他问题</strong></p>\n<ul>\n<li>为什么 <code>left[i+1] = left[i] | nums[i]</code>，<code>right[i] = right[i+1] | nums[i]</code>？<br>按位或计算有个特点：计算或值具有单调性，也就是a|b|c的结果一定不会比a|b小。<br><code>left[i]</code>存的是nums[0]~nums[1]的或值，又因为left[i+1]相比left[i]需要加入nums[i]进行或值运算，所以<code>left[i+1] = left[i] | nums[i]</code>；<code>right[i]</code>同理。</li>\n</ul>\n<h2 id=\"完整代码-3\"><a href=\"#完整代码-3\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    long long maximumOr(vector&lt;int&gt;&amp; nums, int k) &#123;\n        int n=nums.size();\n        vector&lt;long long&gt; left(n+1,0),right(n+1,0);\n        for(int i=0;i&lt;n;i++)&#123;\n            left[i+1]=left[i]|nums[i];\n        &#125;\n        for(int i=n-1;i&gt;=0;i--)&#123;\n            right[i]=right[i+1]|nums[i];\n        &#125;\n        long long maxor=0;\n        for(int i=0;i&lt;n;i++)&#123;\n            long long newor;\n            newor=left[i]|(nums[i]*(1LL&lt;&lt;k))|right[i+1];\n            maxor=max(maxor,newor);\n        &#125;\n        return maxor;\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "算法",
                "C++"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/03/02/%E5%8A%9B%E6%89%A3%E5%A4%87%E5%BF%98%E5%BD%95/",
            "url": "https://232akira.github.io/2025/03/02/%E5%8A%9B%E6%89%A3%E5%A4%87%E5%BF%98%E5%BD%95/",
            "title": "力扣备忘录",
            "date_published": "2025-03-02T11:55:55.000Z",
            "content_html": "<h1 id=\"简单题\"><a href=\"#简单题\" class=\"headerlink\" title=\"简单题\"></a>简单题</h1><h2 id=\"283-移动零\"><a href=\"#283-移动零\" class=\"headerlink\" title=\"283.移动零\"></a>283.移动零</h2><blockquote>\n<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<strong>请注意</strong>，必须在不复制数组的情况下原地对数组进行操作。</p>\n</blockquote>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>一开始看到这道题就觉得不就是交换嘛。但是发现题目中的：“保持非零元素的相对顺序”我就懵了。于是开始暴力穷举循环一层套一层…后来被拉回正道。<br>核心思想不变，仍是“交换”。<br>但是交换的条件是<strong>将非零元素全部移到数组头部</strong>，虽然直观看来与题目所引导的“0全部移到末尾”完全反着来，但是我发现这样做比把0移到末尾再对非零元素进行某种交换排序要来的简单得多。题目作者居心叵测啊（不是</p>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    void swap(vector&lt;int&gt;&amp; nums,int i,int j)&#123;\n        int t;\n        t=nums[i];\n        nums[i]=nums[j];\n        nums[j]=t;\n        \n    &#125;\n    void moveZeroes(vector&lt;int&gt;&amp; nums) &#123;\n        int i=0; \n        for(int j=0;j&lt;nums.size();j++)&#123;\n            if(nums[j]!=0)&#123;\n                swap(nums,i,j);\n                i++;\n            &#125;\n        &#125;\n\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"66-加一\"><a href=\"#66-加一\" class=\"headerlink\" title=\"66.加一\"></a>66.加一</h2><blockquote>\n<p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。<br>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。<br>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>\n</blockquote>\n<h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>判断数组末尾是否有9：\n    无9：末尾数字+1;\n    有9：\n        是否全为9：\n            是全9：\n                构造长度=size+1的数组，首位=1，其余全置0;\n            非全9：\n                找到倒着数第一个不是9的元素,\n                该元素加1,\n                末尾所有的9置0;\n</code></pre>\n<h3 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    vector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) &#123;\n        int len=digits.size();\n        if(digits[len-1]!=9)&#123;\n            digits[len-1]+=1;\n        &#125;\n        else&#123;\n            int cnt=0;//记录9出现的次数，第一个非9元素的下标即为len-cnt-1\n            for(int i=len-1;i&gt;=0;i--)&#123;\n                if(digits[i]==9)&#123;\n                    cnt++;\n                &#125;\n                else&#123;\n                    break;\n                &#125;\n            &#125;\n            if(cnt==len)&#123;\n                digits.insert(digits.begin(),1);\n                for(int i=1;i&lt;len+1;i++)&#123;\n                    digits[i]=0;\n                &#125;\n            &#125;\n            else&#123;\n                int index=len-cnt-1;\n                digits[index]+=1;\n                for(int i=index+1;i&lt;len;i++)&#123;\n                    digits[i]=0;\n                &#125;\n            &#125;\n        &#125;\n        return digits;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"896-单调数列\"><a href=\"#896-单调数列\" class=\"headerlink\" title=\"896.单调数列\"></a>896.单调数列</h2><blockquote>\n<p>如果数组是单调递增或单调递减的，那么它是<strong>单调</strong>的。<br>如果对于所有 i &lt;&#x3D; j，nums[i] &lt;&#x3D; nums[j]，那么数组 nums 是单调递增的。 如果对于所有 i &lt;&#x3D; j，nums[i] &gt;&#x3D; nums[j]，那么数组 nums 是单调递减的。<br>当给定的数组 nums 是单调数组时返回 true，否则返回 false。</p>\n</blockquote>\n<h3 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>bool 递增变量=真，递减变量=真；\n遍历数组：\n    如果该元素+1 大于 该元素：\n        标记递减变量=假；\n    如果该元素+1 小于 该元素：\n        标记递增变量=假；\n如果递增or递减=真，返回真；\n</code></pre>\n<h3 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    bool isMonotonic(vector&lt;int&gt;&amp; nums) &#123;\n        bool increase=true,decrease=true;\n        for(int i=0;i&lt;nums.size()-1;i++)&#123;\n            if(nums[i+1] &gt; nums[i])&#123;\n                decrease=false;\n            &#125;\n            if(nums[i+1] &lt; nums[i])&#123;\n                increase=false;\n            &#125;\n        &#125;\n        return decrease || increase;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"896-罗马数字转整数\"><a href=\"#896-罗马数字转整数\" class=\"headerlink\" title=\"896.罗马数字转整数\"></a>896.罗马数字转整数</h2><blockquote>\n<p><strong>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</strong><br>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</li>\n<li>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：<br>①I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>②X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>③C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>给定一个罗马数字，将其转换成整数。</strong></p>\n</blockquote>\n<h3 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这题一开始我无从下手，直接跑去翻题解了。</p>\n<p><strong>C++ <a href=\"https://www.w3cschool.cn/cpp/cpp-fu8l2ppt.html\">map</a>用法</strong><br>想起来python的字典。同样cpp stl中的map提供的是一种键值对（key-value）容器，其中的数据成对出现。</p>\n<ul>\n<li>初始化：<code>map类型 &lt;数据类型1，数据类型2&gt; 容器名</code></li>\n</ul>\n<p>对于map类型：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">键值对容器</th>\n<th align=\"center\">实现方式</th>\n<th align=\"center\">键值</th>\n<th align=\"center\">时间复杂度</th>\n<th align=\"center\">是否有序</th>\n<th align=\"center\">使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>unordered_map</code></td>\n<td align=\"center\">哈希表</td>\n<td align=\"center\">键-值对</td>\n<td align=\"center\">平均O(1)</td>\n<td align=\"center\">无序</td>\n<td align=\"center\">快速查找键对应的值</td>\n</tr>\n<tr>\n<td align=\"center\"><code>map</code></td>\n<td align=\"center\">红黑树</td>\n<td align=\"center\">键-值对</td>\n<td align=\"center\">O(logn)</td>\n<td align=\"center\">有序</td>\n<td align=\"center\">需要有序键值对</td>\n</tr>\n<tr>\n<td align=\"center\"><code>unordered_set</code></td>\n<td align=\"center\">哈希表</td>\n<td align=\"center\">键</td>\n<td align=\"center\">平均O(1)</td>\n<td align=\"center\">无序</td>\n<td align=\"center\">快速查找元素是否存在</td>\n</tr>\n<tr>\n<td align=\"center\"><code>set</code></td>\n<td align=\"center\">红黑树</td>\n<td align=\"center\">键</td>\n<td align=\"center\">O(logn)</td>\n<td align=\"center\">有序</td>\n<td align=\"center\">需要排序的集合</td>\n</tr>\n<tr>\n<td align=\"center\"><code>unordered_multimap</code></td>\n<td align=\"center\">哈希表</td>\n<td align=\"center\">键-值</td>\n<td align=\"center\">平均O(1)</td>\n<td align=\"center\">无序</td>\n<td align=\"center\">有重复键且不关心顺序</td>\n</tr>\n</tbody></table>\n<p><strong>对于本题</strong><br>引用评论区<a href=\"https://leetcode.cn/u/hust_wei/\">大佬</a>的解释：当前位置的元素比下个位置的元素小，就减去当前值，否则加上当前值。</p>\n<pre><code>定义键值对容器 &lt;字符，整型&gt; \n    分别对应罗马数字的字符和数值(注意字符变量加单引号);\n\nint 结果变量；\nint 罗马数字长度；\n遍历罗马数字：\n    如果元素 当前位置&lt;下一个位置：（注意使用值时加方括号[]）\n        结果变量-=值变量；\n    否则：\n        结果变量+=值变量；\n返回结果；\n</code></pre>\n<h3 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    unordered_map&lt;char,int&gt;mymap=&#123;\n        &#123;&#39;I&#39;,1&#125;,\n        &#123;&#39;V&#39;,5&#125;,\n        &#123;&#39;X&#39;,10&#125;,\n        &#123;&#39;L&#39;,50&#125;,\n        &#123;&#39;C&#39;,100&#125;,\n        &#123;&#39;D&#39;,500&#125;,\n        &#123;&#39;M&#39;,1000&#125;,\n    &#125;;\n    int romanToInt(string s) &#123;\n        int ans=0;\n        int len=s.length();\n        for(int i=0;i&lt;len;i++)&#123;\n            if(mymap[s[i]]&lt;mymap[s[i+1]])&#123;\n                ans-=mymap[s[i]];\n            &#125;\n            else&#123;\n                ans+=mymap[s[i]];\n            &#125;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"58-最后一个单词的长度\"><a href=\"#58-最后一个单词的长度\" class=\"headerlink\" title=\"58.最后一个单词的长度\"></a>58.最后一个单词的长度</h2><blockquote>\n<p>给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。<br><strong>单词</strong>是指仅由字母组成、不包含任何空格字符的最大子字符串。</p>\n</blockquote>\n<h3 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p><strong>【方法一】</strong><br>我的思路是<strong>从后向前</strong>遍历字符串时：如果它的后一个是空格或空，自己不是空格，意味着句尾有空格，该下标是倒着数第一个不为空格的字母；如果前一个是空格或空，自己不是空格，代表这是词的开头，记录下标直接退出循环。最后长度就是二者相减。<br>但是这样写大多数样例不通过（悲</p>\n<p>（二编）卧槽我改对了！！！</p>\n<p><strong>【方法二】</strong><br>不对那就改呗：直接从字符串的尾部开始遍历，<strong>跳过所有尾部空格</strong>，直到遇到<strong>第一个非空格字符</strong>，并计算其长度。能够更好的处理边界情况。</p>\n<pre><code>int 长度=字符串长度;\nint i=长度-1;\nint 结果长度=0\n当i大于等于0并且s的第i个字符为空格时：\n    i--；（倒着循环遍历）\n*本题设定s不为空，若无此条件需在此判断：当i&lt;0时直接返回（s为空）\n当i大于等于0并且s的第i个字符不为空格时：\n    结果长度++；\n    i--；\n返回结果长度;\n</code></pre>\n<h3 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p><strong>【方法一】</strong></p>\n<pre><code>class Solution &#123;\npublic:\n    int lengthOfLastWord(string s) &#123;\n        int len=s.length();\n        int m=0,n=0;\n        for(int i=len-1;i&gt;0;i--)&#123;\n            if(s[i]!=&#39; &#39; &amp;&amp; (s[i+1]==&#39; &#39; || s[i+1]==&#39;\\0&#39;))&#123;\n                m=i;\n            &#125;\n            if((s[i-1]==&#39; &#39; || s[i-1]==&#39;\\0&#39;) &amp;&amp; s[i]!=&#39; &#39;)&#123;\n                n=i;\n                break;\n            &#125;\n        &#125;\n        return m-n+1;\n    &#125;\n&#125;;\n</code></pre>\n<p><strong>【方法二】</strong></p>\n<pre><code class=\"language-cpp\">class Solution &#123;\npublic:\n    int lengthOfLastWord(string s) &#123;\n        int len=s.length();\n        int ans=0;\n        int i=len-1;\n        while(i&gt;=0 &amp;&amp; s[i]==&#39; &#39;)&#123;\n            i--;\n        &#125;\n        while(i&gt;=0 &amp;&amp; s[i]!=&#39; &#39;)&#123;\n            ans++;\n            i--;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"9-回文数\"><a href=\"#9-回文数\" class=\"headerlink\" title=\"9.回文数\"></a>9.回文数</h2><blockquote>\n<p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。<br>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>例如，121 是回文，而 123 不是。</p>\n</blockquote>\n<h3 id=\"解题思路-5\"><a href=\"#解题思路-5\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p><strong>关键点</strong></p>\n<ul>\n<li>回文数是正整数</li>\n<li>负数不是回文数</li>\n<li>一个数的最后一位是0且这个数不为0，不是回文数</li>\n</ul>\n<p>将数字的后半部分反转，用<code>反转数字</code>存储。最后的反转数字包含原始x的后半部分，x包含原始x的前半部分。<br>最后返回时：若<strong>原始x是偶数</strong>，那么对于回文数，<strong>x一定&#x3D;反转数字</strong>。若<strong>原始x是奇数</strong>，那么反转数字会比x多一位，这一位是反转数字的个位并且是原始x的中位数，不影响回文数判断。所以<strong>先去掉个位</strong>再与当前的x比较。</p>\n<pre><code>如果（x小于0，或者x的个位不等于0且x不等于0）：\n    不是回文数；\n定义反转数字=0；\n当（x &gt; 反转数字）：\n    反转数字=反转数字*10+x%10；\n    x/=10；\nx = 反转数字\n返回x = 反转数字 或者 x = 去掉个位的反转数字；\n</code></pre>\n<h3 id=\"AC代码-5\"><a href=\"#AC代码-5\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    bool isPalindrome(int x) &#123;\n        if(x&lt;0 || (x%10==0 &amp;&amp; x!=0))&#123;\n            return false;\n        &#125;\n        int num=0;\n        while(x&gt;num)&#123;\n            num=num*10+x%10;\n            x/=10;\n        &#125;\n        return x==num || x==num/10;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"14-最长公共前缀\"><a href=\"#14-最长公共前缀\" class=\"headerlink\" title=\"14.最长公共前缀\"></a>14.最长公共前缀</h2><blockquote>\n<p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</p>\n</blockquote>\n<h3 id=\"解题思路-6\"><a href=\"#解题思路-6\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>区区小简单，真是难倒我了。<br>这里总结力扣官方题解的纵向扫描方法。我一开始想的也是类似思路，奈何憋不出来代码。<br><strong>关键点</strong></p>\n<ul>\n<li>最长公共前缀的长度不可能超过任何一个字符串的长度</li>\n<li>数组strs的大小即为字符串的总个数</li>\n<li><strong>二维数组形式</strong>可以直接表示第i个字符的第j位</li>\n<li>如果 <strong><code>i</code>超出某个字符串的长度</strong>或**第<code>j</code>个字符串的第<code>i</code>个字符不等于<code>c</code>**时，直接返回当前的公共前缀。</li>\n<li>循环结束说明所有字符串的所有字符都匹配，那么第一个字符串本身就是最长公共前缀，返回第一个字符串<code>strs[0]</code>。</li>\n</ul>\n<pre><code>如果数组为空：\n    返回&quot;&quot;；\nint 长度变量=数组第一个字符串元素的长度；\nint 计数变量=数组大小；\n遍历i，从0到长度变量：\n    char 字符变量=第一个字符串的第i个字符；\n    遍历j，从1到计数变量：\n        如果（i==第j个字符串的大小 || 第j个字符串的第i个字符 ！= 字符变量）：\n            返回 第一个字符串的第一个字符~第i个字符；\n返回 第一个字符；\n</code></pre>\n<h3 id=\"AC代码-6\"><a href=\"#AC代码-6\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>class Solution &#123;\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) &#123;\n        if(!strs.size())&#123;\n            return &quot;&quot;;\n        &#125;\n        int len=strs[0].size();\n        int cnt=strs.size();\n        for(int i=0;i&lt;len;i++)&#123;\n            char c=strs[0][i];\n            for(int j=1;j&lt;cnt;j++)&#123;\n                if(i==strs[j].size() || strs[j][i]!=c)&#123;\n                    return strs[0].substr(0,i);\n                &#125;\n            &#125;\n        &#125;\n        return strs[0];\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"20-有效的括号\"><a href=\"#20-有效的括号\" class=\"headerlink\" title=\"20.有效的括号\"></a>20.有效的括号</h2><blockquote>\n<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>\n</blockquote>\n<blockquote>\n<p>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p>\n</blockquote>\n<h3 id=\"解题思路-7\"><a href=\"#解题思路-7\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>定义栈的括号匹配规则；() [] &#123;&#125;\n\n初始化一个栈;\n当遇到左括号时：\n    左括号压栈；\n当遇到右括号时:\n    如果（栈空）:\n        ×；\n    否则：\n        char 栈顶元素；\n        弹出栈顶元素；\n        如果栈顶元素与当前右括号不匹配：\n            ×；\n字符串遍历完后：\n    如果（栈空）：\n        √；\n</code></pre>\n<ul>\n<li>这里的for循环可以直接用for(char ch:s)，表示<strong>对于字符串<code>s</code>中的每一个字符<code>ch</code>,执行循环内容</strong>。</li>\n</ul>\n<h3 id=\"AC代码-7\"><a href=\"#AC代码-7\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code>\n</code></pre>\n<h2 id=\"682-棒球比赛\"><a href=\"#682-棒球比赛\" class=\"headerlink\" title=\"682.棒球比赛\"></a>682.棒球比赛</h2><blockquote>\n<p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p>\n</blockquote>\n<blockquote>\n<p>比赛开始时，记录是空白的。你会得到一个记录操作的<strong>字符串列表</strong> ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：</p>\n<ul>\n<li>整数 x - 表示本回合新获得分数 x</li>\n<li>“+” - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。</li>\n<li>“D” - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。</li>\n<li>“C” - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>请你返回记录中所有得分的总和。</li>\n</ul>\n</blockquote>\n<h3 id=\"解题思路-8\"><a href=\"#解题思路-8\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>用int动态数组ans记录得分，但是不用i做索引来查询，而是用begin、end、size、back等方法来防止发生越界访问。</p>\n<ul>\n<li>注意<code>string</code>类型为字符串，用双引号””括起来，<code>char</code>类型为字符，用单引号’’。</li>\n</ul>\n<pre><code>前两次得分之和：size-1 +size-2\n前一次得分：back\n最近一次得分移除-&gt;出栈-&gt;pop_back\n加入得分：压栈-&gt;push_back\n字符串转整型：stoi\n计算动态数组的和：accumulate\n</code></pre>\n<p>另外，我一开始想用<code>unordered_map</code>，做题做迷了。后来发现动态数组完全可以解决：C++ 标准库中的 vector 支持动态调整大小，可以方便地模拟栈的行为。而unordered_map 是用来存储键值对（key-value pairs）的哈希表。<br>本问题中不需要映射关系，所以并不需要用到 unordered_map。<br>还有，<strong>stack<int><strong>的<code>.push()</code>和<code>.pop()</code>也可，但是</strong>vector</strong>的<code>.push_back()</code>和<code>.pop_back()</code>也同样可以。那就选更常用的vector，何乐而不为呢？</p>\n<h3 id=\"AC代码-8\"><a href=\"#AC代码-8\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p>用时击败7%，悲。之后滚回来优化算法。</p>\n<pre><code>class Solution &#123;\npublic:\n    int calPoints(vector&lt;string&gt;&amp; operations) &#123;\n        vector&lt;int&gt;ans;\n        for(string ch:operations)&#123;\n            if(ch==&quot;+&quot;)&#123;\n                ans.push_back(ans[ans.size()-1]+ans[ans.size()-2]);\n            &#125;\n            else if(ch==&quot;D&quot;)&#123;\n                ans.push_back(ans.back()*2);\n            &#125;\n            else if(ch==&quot;C&quot;)&#123;\n                ans.pop_back();\n            &#125;\n            else&#123;\n                ans.push_back(stoi(ch));\n            &#125;\n        &#125;\n        return accumulate(ans.begin(),ans.end(),0);\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"26-删除有序数组中的重复项\"><a href=\"#26-删除有序数组中的重复项\" class=\"headerlink\" title=\"26.删除有序数组中的重复项\"></a>26.删除有序数组中的重复项</h2><blockquote>\n<p>给你一个非严格递增排列的数组nums,请你原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回nums中唯一元素的个数。</p>\n</blockquote>\n<blockquote>\n<p>考虑nums的唯一元素的数量为k，你需要做以下事情确保你的题解可以被通过：</p>\n<ul>\n<li>更改数组nums，使nums的前k个元素包含唯一元素，并按照它们最初在nums中出现的顺序排列。nums的其余元素与nums的大小不重要。</li>\n<li>返回 k 。</li>\n</ul>\n</blockquote>\n<h3 id=\"解题思路-9\"><a href=\"#解题思路-9\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><pre><code>int 最终数组长度=1;\n遍历nums：\n    如果第i个元素不等于第i-1个元素：\n        nums[最终数组长度]=nums[i]；\n        最终数组长度++；\n返回最终数组长度；\n</code></pre>\n<h3 id=\"AC代码-9\"><a href=\"#AC代码-9\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p>妈呀这题一提交发现每ms都有解法…密密麻麻(ΩДΩ)</p>\n<pre><code>class Solution &#123;\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;\n        int ans=1;\n        for(int i=1;i&lt;nums.size();i++)&#123;\n            if(nums[i]!=nums[i-1])&#123;\n                nums[ans]=nums[i];\n                ans++;\n            &#125;\n        &#125;\n        return ans;\n    &#125;\n&#125;;\n</code></pre>\n<hr>\n<h2 id=\"35-搜索插入位置\"><a href=\"#35-搜索插入位置\" class=\"headerlink\" title=\"35.搜索插入位置\"></a>35.搜索插入位置</h2><blockquote>\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。<br><strong>请必须使用时间复杂度为<code>O(logn)</code>的算法。</strong></p>\n</blockquote>\n<h3 id=\"解题思路-10\"><a href=\"#解题思路-10\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>我一开始用的暴力穷举，如下。</p>\n<pre><code>class Solution &#123;\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;\n        while(nums.size()!=1)&#123;\n            if(target&lt;nums[0])&#123;\n                return 0;\n            &#125;\n            for(int i=0;i&lt;nums.size()-1;i++)&#123;\n                if(nums[i]==target)&#123;\n                    return i;\n                &#125;\n                else if(nums[i]&lt;target &amp;&amp; nums[i+1]&gt;=target)&#123;\n                    return i+1;\n                &#125;\n            &#125;\n            return nums.size();\n        &#125;\n        return (target&lt;=nums[0])? 0:1;\n    &#125;\n&#125;;\n</code></pre>\n<p>然后提交之后意识到不符合题意，于是再来换个思路：<strong>二分查找</strong><br>我前几天刚记的二分查找笔记 今天竟然没意识到这道题有多直白地明示我要用!!!∑(ﾟДﾟノ)ノ</p>\n<blockquote>\n<p><strong>二分查找</strong>：在有序集合中搜索特定值。</p>\n</blockquote>\n<p><strong>使用术语</strong>：</p>\n<ul>\n<li>目标 <code>target</code></li>\n<li>索引 <code>index</code></li>\n<li>左、右指示符 <code>left</code>、<code>right</code></li>\n<li>中间指示符 <code>mid</code></li>\n</ul>\n<p><strong>计算 <code>mid</code> 位置</strong>：<br>如果 <code>nums[mid] == target</code>，直接返回索引。<br>如果 <code>nums[mid] &lt; target</code>，说明 target 应该在右半部分，所以left向右移动（left &#x3D; mid + 1）。<br>如果 <code>nums[mid] &gt; target</code>，说明 target 应该在左半部分，所以right向左移动（ right &#x3D; mid - 1）。</p>\n<p>循环结束后，left 就是 target 应该插入的位置。</p>\n<h3 id=\"AC代码-10\"><a href=\"#AC代码-10\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p>二分查找最基础的方法。</p>\n<pre><code>class Solution &#123;\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;\n        int left,right;\n        left=0;\n        right=nums.size()-1;\n        while(left&lt;=right)&#123;\n            int mid=left+(right-left)/2;\n            if(nums[mid]==target)&#123;\n                return mid;\n            &#125;\n            else if(nums[mid]&lt;target)&#123;\n                left=mid+1;\n            &#125;\n            else&#123;\n                right=mid-1;\n            &#125;\n        &#125;\n        return left;\n    &#125;\n&#125;;\n</code></pre>\n<h2 id=\"35-搜索插入位置-1\"><a href=\"#35-搜索插入位置-1\" class=\"headerlink\" title=\"35.搜索插入位置\"></a>35.搜索插入位置</h2><blockquote>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n</blockquote>\n<h3 id=\"解题思路-11\"><a href=\"#解题思路-11\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>试图暴力然后失败。然后查看题解：竟然是<strong>动态规划</strong>~</p>\n<p>重点理解部分：</p>\n<ul>\n<li><strong>逆向思维</strong>：如果要到第<code>n</code>个台阶，就必须从第<code>n-1</code>阶走1步，或者从第<code>n-2</code>阶走2步。</li>\n<li>dp[n]&#x3D;dp[n-1]+dp[n-2]</li>\n</ul>\n<p><em><strong>为什么这样递推？</strong></em><br>动态规划的核心是<strong>拆分子问题,然后找到递推关系</strong>。本质根据题目限制条件，建立递推关系，然后用代码实现。<br>👉 因为你每次只能走 1 级或 2 级，所以你到 n 级的方式只能来自 n-1 和 n-2，而不能来自 n-3、n-4 等。</p>\n<pre><code>//先处理边界情况\n如果n&lt;=2：返回n；\n//动规\n定义a=1,b=2；（对应能上的楼梯阶数）和当前阶梯的方案数量temp;\n遍历n（从3开始）：\n    temp=a+b； //dp[i]=dp[i-2]+dp[i-1]\n    a=b;      //a=dp[i-1]\n    b=temp;   //b=dp[i];\n返回 b;\n</code></pre>\n",
            "tags": [
                "算法",
                "C++",
                "记录"
            ]
        }
    ]
}