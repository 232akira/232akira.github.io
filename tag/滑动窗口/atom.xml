<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://232akira.github.io</id>
    <title>Per aspera ad astra • Posts by &#34;滑动窗口&#34; tag</title>
    <link href="https://232akira.github.io" />
    <updated>2025-03-12T10:20:15.000Z</updated>
    <category term="力扣" />
    <category term="数组" />
    <category term="C++" />
    <category term="哈希表" />
    <category term="动态规划" />
    <category term="二分查找" />
    <category term="算法" />
    <category term="字符串" />
    <category term="滑动窗口" />
    <category term="链表" />
    <category term="记录" />
    <category term="Markdown" />
    <entry>
        <id>https://232akira.github.io/2025/03/12/%E4%B8%93%E9%A2%981-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
        <title>专题1️⃣ 滑动窗口</title>
        <link rel="alternate" href="https://232akira.github.io/2025/03/12/%E4%B8%93%E9%A2%981-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
        <content type="html">&lt;p&gt;今天照例每日一题，然后麻溜的看题解，发现又是一道滑动窗口题。所以开个专题归类一下。&lt;/p&gt;
&lt;h1 id=&#34;2269-找到一个数字的-K-美丽值&#34;&gt;&lt;a href=&#34;#2269-找到一个数字的-K-美丽值&#34; class=&#34;headerlink&#34; title=&#34;2269.找到一个数字的 K 美丽值&#34;&gt;&lt;/a&gt;2269.找到一个数字的 K 美丽值&lt;/h1&gt;&lt;p&gt;今天字符串也要美丽了🆘&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个整数num的k美丽值定义为num中符合以下条件的子字符串数目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子字符串长度为k。&lt;/li&gt;
&lt;li&gt;子字符串能整除num。&lt;br&gt;给你整数num和k，请你返回num的k美丽值。&lt;br&gt;注意：&lt;br&gt;允许有前缀0。&lt;br&gt;0不能整除任何值。&lt;br&gt;一个子字符串是一个字符串里的连续一段字符序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= num &amp;lt;= 109&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= num.length&lt;/code&gt; （将 num 视为字符串）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;我觉得这道的要点就是子串怎么得，剩下的就好判断了。偏偏我就栽在这儿了😅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;int转string&lt;/strong&gt; &lt;code&gt;to_string()&lt;/code&gt;注意此函数需要赋给个string变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;string转int&lt;/strong&gt; &lt;code&gt;stoi()&lt;/code&gt;同样，需要赋给个int变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取长度为k的字符串&lt;/strong&gt; &lt;code&gt;substr(i,k)&lt;/code&gt;距离c++学这个函数已经过了一两年了，忘的一干二净，趁此好机会来总结一下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;获取子串&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;substr(pos,len)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;从pos开始，提取长度为len的子串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;查找字符串&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;find(str,pos)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;在pos之后查找str的位置，找不到返回string::pos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;rfind(str,pos)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;逆向查找str,从pos开始向前找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;find_first_of(chars,pos)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查找chars中的任意字符的第一次出现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;find_last_of(chars,pos)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查找chars中的任意字符的最后一次出现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;替换字符串&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;replace(pos,len,str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;从pos开始，用str替换len个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;erase(pos,len)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;删除从pos开始的len个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;insert(pos,str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;在pos位置插入str&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;大小写转换&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;toupper(c)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;将字符c转换为大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;tolower(c)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;将字符c转换为小写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;👇️ &lt;em&gt;&lt;strong&gt;数字与字符串转换&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;to_string(num)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;把num转换为字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;stoi(str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;把str转换为int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;stol(str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;把str转换为long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;stod(str)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;把str转换为double&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int divisorSubstrings(int num, int k) &amp;#123;
        int cnt=0;
        string str=to_string(num);
        for(int i=0;i&amp;lt;=str.size()-k;i++)&amp;#123;
            string ans=str.substr(i,k);
            int answer=stoi(ans);
            if(answer!=0 &amp;amp;&amp;amp; num%answer==0)&amp;#123;
                cnt++;
            &amp;#125;
        &amp;#125;
        return cnt;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3305-元音辅音字符串计数Ⅰ&#34;&gt;&lt;a href=&#34;#3305-元音辅音字符串计数Ⅰ&#34; class=&#34;headerlink&#34; title=&#34;3305.元音辅音字符串计数Ⅰ&#34;&gt;&lt;/a&gt;3305.元音辅音字符串计数Ⅰ&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个字符串word和一个非负整数 k。&lt;br&gt;返回word的子字符串中，每个元音字母（’a’、’e’、’i’、’o’、’u’）至少出现一次，并且恰好包含k个辅音字母的子字符串的总数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 &amp;lt;&amp;#x3D; word.length &amp;lt;&amp;#x3D; 250&lt;/li&gt;
&lt;li&gt;word 仅由小写英文字母组成。&lt;/li&gt;
&lt;li&gt;0 &amp;lt;&amp;#x3D; k &amp;lt;&amp;#x3D; word.length - 5&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-1&#34;&gt;&lt;a href=&#34;#解题思路-1&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;先试了试暴力😤循环套三层观感太差，不放上来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正经解法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑动窗口代替暴力循环&lt;/li&gt;
&lt;li&gt;哈希表统计元音出现次数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意几个用法&lt;/strong&gt;&lt;br&gt;&lt;em&gt;&lt;strong&gt;1️⃣ 几个键值对容器&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;键值对容器&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;实现方式&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;键值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;时间复杂度&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;是否有序&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;使用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;哈希表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键-值对&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;快速查找键对应的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;红黑树&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键-值对&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(logn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;有序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;需要有序键值对&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;unordered_set&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;哈希表&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均O(1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;快速查找元素是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;红黑树&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;键&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O(logn)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;有序&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;需要排序的集合&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;2️⃣ 键值对容器+函数求的是什么？&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_map.size()&lt;/code&gt;返回unordered_map中&lt;strong&gt;键值对的数量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unordered_set.count(x)&lt;/code&gt;unordered_set中&lt;strong&gt;某个元素是否存在&lt;/strong&gt;，返回1表示在，0表示不在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码思路如下。这个方法时间空间上并非最优，后续需要调整思路。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;定义n：word长度;
定义unordered_map类型的vowel_cnt:元音出现次数;
定义consonant_cnt:辅音个数;
定义ans：统计最终答案;
定义unordered_set类型的vowels:所有元音字母;
定义左指针j=0;
遍历word从下标0~word.size():
    定义右元素right=word[i];
    统计元音出现次数：
        进行元/辅音计数;
    当辅音数量超过k://收缩窗口左边界
        定义左元素left=word[左指针];//取左边界字符
        如果left是元音：
            该元音出现次数--;
            当元音的计数减少到0时：
                将它从vowel_cnt中删除；
        否则：
            辅音个数--;
        左指针右移;
    如果包含所有元音且辅音个数为k:
        //避免修改原窗口状态,思路整体与上半部分相同☝️
        定义临时变量temp_vowel=vowel_cnt;
        定义临时变量temp_consonant=consonant_cnt;
        定义临时变量temp_j=j;
        定义计数cnt=0;
        当临时左下标&amp;lt;=右下标:
            如果包含所有临时元音且临时辅音个数为k:
                cnt++;
            否则:
                退出该层循环;
            定义c:word[临时左指针];
            如果c是元音：
                临时该元音出现次数--;
                当临时元音的计数减少到0时：
                    将它从临时vowel_cnt中删除;
            否则:
                临时辅音个数--;
            临时左指针j右移;
        ans+=cnt;
返回ans;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整代码-1&#34;&gt;&lt;a href=&#34;#完整代码-1&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int countOfSubstrings(string word, int k) &amp;#123;
        int len=word.size();
        unordered_map&amp;lt;char,int&amp;gt;vowel_cnt;
        int consonant_cnt=0;
        int ans=0;
        unordered_set&amp;lt;int&amp;gt;vowels=&amp;#123;&amp;#39;a&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;i&amp;#39;,&amp;#39;o&amp;#39;,&amp;#39;u&amp;#39;&amp;#125;;
        int j=0;
        for(int i=0;i&amp;lt;len;i++)&amp;#123;
            char right=word[i];
            if(vowels.count(right))&amp;#123;
                vowel_cnt[right]++;
            &amp;#125;
            else&amp;#123;
                consonant_cnt++;
            &amp;#125;
            while(consonant_cnt&amp;gt;k)&amp;#123;
                char left=word[j];
                if(vowels.count(left))&amp;#123;
                    vowel_cnt[left]--;
                    if(vowel_cnt[left]==0)&amp;#123;
                        vowel_cnt.erase(left);
                    &amp;#125;
                &amp;#125;
                else&amp;#123;
                    consonant_cnt--;
                &amp;#125;
                j++;
            &amp;#125;
            if(vowel_cnt.size()==5 &amp;amp;&amp;amp; consonant_cnt==k)&amp;#123;
                unordered_map&amp;lt;char,int&amp;gt;temp_vowel=vowel_cnt;
                int temp_consonant=consonant_cnt;
                int temp_j=j;
                int cnt=0;
                while(temp_j&amp;lt;=i)&amp;#123;
                    if(temp_vowel.size()==5 &amp;amp;&amp;amp; temp_consonant==k)&amp;#123;
                        cnt++;
                    &amp;#125;
                    else&amp;#123;
                        break;
                    &amp;#125;
                    int c=word[temp_j];
                    if(vowels.count(c))&amp;#123;
                        temp_vowel[c]--;
                        if(temp_vowel[c]==0)&amp;#123;
                            temp_vowel.erase(c);
                        &amp;#125;
                    &amp;#125;
                    else&amp;#123;
                        temp_consonant--;
                    &amp;#125;
                    temp_j++;
                &amp;#125;
                ans+=cnt;
            &amp;#125;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3306-元音辅音字符串计数Ⅱ&#34;&gt;&lt;a href=&#34;#3306-元音辅音字符串计数Ⅱ&#34; class=&#34;headerlink&#34; title=&#34;3306.元音辅音字符串计数Ⅱ&#34;&gt;&lt;/a&gt;3306.元音辅音字符串计数Ⅱ&lt;/h1&gt;&lt;p&gt;不行，彻底懵了脑子转不动做梦都是元辅音😫先把copy的官方题解放这，过两天我再苟回来看。&lt;/p&gt;
&lt;h2 id=&#34;解题思路-2&#34;&gt;&lt;a href=&#34;#解题思路-2&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;h2 id=&#34;完整代码-2&#34;&gt;&lt;a href=&#34;#完整代码-2&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    long long countOfSubstrings(string word, int k) &amp;#123;
        set&amp;lt;char&amp;gt; vowels = &amp;#123;&amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;&amp;#125;;
        auto count = [&amp;amp;](int m) -&amp;gt; long long &amp;#123;
            int n = word.size(), consonants = 0;
            long long res = 0;
            map&amp;lt;char, int&amp;gt; occur;
            for (int i = 0, j = 0; i &amp;lt; n; i++) &amp;#123;
                while (j &amp;lt; n &amp;amp;&amp;amp; (consonants &amp;lt; m || occur.size() &amp;lt; vowels.size())) &amp;#123;
                    if (vowels.count(word[j])) &amp;#123;
                        occur[word[j]]++;
                    &amp;#125; else &amp;#123;
                        consonants++;
                    &amp;#125;
                    j++;
                &amp;#125;
                if (consonants &amp;gt;= m &amp;amp;&amp;amp; occur.size() == vowels.size()) &amp;#123;
                    res += n - j + 1;
                &amp;#125;
                if (vowels.count(word[i])) &amp;#123;
                    occur[word[i]]--;
                    if (occur[word[i]] == 0) &amp;#123;
                        occur.erase(word[i]);
                    &amp;#125;
                &amp;#125; else &amp;#123;
                    consonants--;
                &amp;#125;
            &amp;#125;
            return res;
        &amp;#125;;
        return count(k) - count(k + 1);
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="力扣" />
        <category term="哈希表" />
        <category term="算法" />
        <category term="字符串" />
        <category term="滑动窗口" />
        <updated>2025-03-12T10:20:15.000Z</updated>
    </entry>
    <entry>
        <id>https://232akira.github.io/2025/03/05/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
        <title>Leetcode字符串</title>
        <link rel="alternate" href="https://232akira.github.io/2025/03/05/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
        <content type="html">&lt;h1 id=&#34;58-最后一个单词的长度&#34;&gt;&lt;a href=&#34;#58-最后一个单词的长度&#34; class=&#34;headerlink&#34; title=&#34;58.最后一个单词的长度&#34;&gt;&lt;/a&gt;58.最后一个单词的长度&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;KMP有点难理解了对我而言…看不懂就放两天继续钻，再多看看大佬博客的不同理解，效果会更好。&lt;/p&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参考链接：&lt;br&gt;&lt;a href=&#34;https://www.cnblogs.com/dusf/p/kmp.html&#34;&gt;1️⃣&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://blog.csdn.net/yyzsir/article/details/89462339?ops_request_misc=%257B%2522request%255Fid%2522%253A%252292dce769a412320e26ef79eb85ca18cd%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=92dce769a412320e26ef79eb85ca18cd&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-89462339-null-null.142%5Ev101%5Epc_search_result_base5&amp;utm_term=yyzsir%20kmp&amp;spm=1018.2226.3001.4187&#34;&gt;2️⃣&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;朴素模式匹配BF&#34;&gt;&lt;a href=&#34;#朴素模式匹配BF&#34; class=&#34;headerlink&#34; title=&#34;朴素模式匹配BF&#34;&gt;&lt;/a&gt;朴素模式匹配&lt;code&gt;BF&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;首先来个&lt;strong&gt;暴力&lt;/strong&gt;方法：不匹配模式串就右挪一位。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//暴力模式匹配
int 主串位置i；
int 模式串位置j；
int 主串长度；
int 子串长度；

当（主串位置 &amp;lt;= 主串长度 &amp;amp;&amp;amp; 模式串位置&amp;lt;模式串长度）:
    如果（该主串位置的主串字符 == 该模式串位置的模式串字符）：
        i++；
        j++；
    否则：
        i后退至上一轮匹配开始位置的后一位；
        j归零；
如果（模式串位置 == 模式串长度）：
    匹配成功，返回出现位置；
否则
    匹配失败，返回-1；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;优化模式匹配KMP&#34;&gt;&lt;a href=&#34;#优化模式匹配KMP&#34; class=&#34;headerlink&#34; title=&#34;优化模式匹配KMP&#34;&gt;&lt;/a&gt;优化模式匹配&lt;code&gt;KMP&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;即利用&lt;strong&gt;已经部分匹配&lt;/strong&gt;这个信息，保持&lt;strong&gt;i指针不回溯&lt;/strong&gt;，并通过j指针让&lt;strong&gt;模式串&lt;/strong&gt;尽可能移动到&lt;strong&gt;更有效的位置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么有几个要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;前缀(Prefix)和后缀（Suffix）&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;举个🌰，给定一个字符串s:&lt;code&gt;“abcab”&lt;/code&gt;,那么:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;s的子串&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;前缀&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;后缀&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;c,bc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ab,abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ca,bca&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abcab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ab,abc,abca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b,ab,cab,bcab&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;公共前后缀最长长度&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;从上面的前后缀不难看出，对于s的子串，存在部分前后缀重复的情况，我们需要的正是重复子串的最大长度。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;s的子串&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;前缀&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;后缀&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;公共前后缀最长长度&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;c,bc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;a&lt;/code&gt;,ab,abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;a&lt;/code&gt;,ca,bca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abcab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a,&lt;code&gt;ab&lt;/code&gt;,abc,abca&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b,&lt;code&gt;ab&lt;/code&gt;,cab,bcab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;next数组（部分匹配表）&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;KMP的next数组告诉我们：当模式串中的某个字符跟主串中的某个字符失配时，模式串下一步应该跳到哪个位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于s的&lt;strong&gt;每个字符&lt;/strong&gt;而言，当这个字符作为子串的最后一位时，公共前后缀最长长度为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;字符（标红部分）&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;公共前后缀最长长度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;a&lt;/code&gt;bcab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;code&gt;b&lt;/code&gt;cab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ab&lt;code&gt;c&lt;/code&gt;ab&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abc&lt;code&gt;a&lt;/code&gt;b&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abca&lt;code&gt;b&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;那么全部右移一位，令next[0]&amp;#x3D;-1：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;字符&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;i&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;next[i]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;实际匹配过程中，j移动到子串p的next[j]位置，p相对s向右移动j-next[j]位置。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;迭代法求p的next数组&lt;/strong&gt;&lt;br&gt;我们知道：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;next[0]=-1;
next[1]=0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;并且&lt;code&gt;next[j]&lt;/code&gt;代表p[0…j-1]的子串公共前后缀最长长度。&lt;br&gt;∴ 变量定义如下：&lt;br&gt;&lt;code&gt;j&lt;/code&gt;：当前子串指针&lt;br&gt;&lt;code&gt;k&lt;/code&gt;：当前匹配的前后缀长度（&amp;#x3D;next[j-1]）&lt;br&gt;&lt;code&gt;next[j]=k&lt;/code&gt;：next[0]&amp;#x3D;-1 即当p[0]都匹配失败时，只能回到j&amp;#x3D;0重新匹配。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void GetNext(char p[], int next[])
&amp;#123;
    int j = 0, k = -1;
    next[j] = k;
    while (p[j] != &amp;#39;\0&amp;#39;)             //遍历整个子串p
    &amp;#123;
        if (k == -1 || p[j] == p[k]) //匹配成功😀或者k=-1（刚匹配到字串的第一个）
        &amp;#123;
            j++;                     //j指针后移
            k++;
            next[j] = k;             //记录当前前后缀匹配长度
        &amp;#125; 
        else 
        &amp;#123;
            k = next[k];             //匹配失败😭，回溯到next[k]寻找更短的前后缀
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;KMP主算法&lt;br&gt;得到next数组的方法&lt;code&gt;GetNext()&lt;/code&gt;，就可以完整的写出KMP函数。这里写成一个函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int KMP(string s,string p)&amp;#123;
    int m=s.size();
    int n=p.size();
    if(m==0)&amp;#123;
        return 0;
    &amp;#125;
    //⬇️计算next数组
    vector&amp;lt;int&amp;gt;next;
    int j=0;
    for(int i=0;i&amp;lt;n;i++)&amp;#123;
        while(j&amp;gt;0 &amp;amp;&amp;amp; p[i]!=p[j])&amp;#123;
            j=next[j-1];
        &amp;#125;
        if(p[i]==p[j])&amp;#123;
            j++;
        &amp;#125;
        next[i]=j;
    &amp;#125;
    //⬇️KMP搜索匹配
    int j=0;
    for(int i=0;i&amp;lt;m;i++)&amp;#123;
        while(j&amp;gt;0 &amp;amp;&amp;amp; s[i]!=p[j])&amp;#123;
            j=next[j-1];
        &amp;#125;
        if(s[i]==p[j])&amp;#123;
            j++;
        &amp;#125;
        if(j==n)&amp;#123;
            return i-n+1;
        &amp;#125;
    &amp;#125;
    return -1;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说实话，后半部分现在不能完全理解，让我再多磕几天。&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    int lengthOfLastWord(string s) &amp;#123;
        int len=s.length();
        int m=0,n=0;
        for(int i=len-1;i&amp;gt;0;i--)&amp;#123;
            if(s[i]!=&amp;#39; &amp;#39; &amp;amp;&amp;amp; (s[i+1]==&amp;#39; &amp;#39; || s[i+1]==&amp;#39;\0&amp;#39;))&amp;#123;
                m=i;
            &amp;#125;
            if((s[i-1]==&amp;#39; &amp;#39; || s[i-1]==&amp;#39;\0&amp;#39;) &amp;amp;&amp;amp; s[i]!=&amp;#39; &amp;#39;)&amp;#123;
                n=i;
                break;
            &amp;#125;
        &amp;#125;
        return m-n+1;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;1021-删除最外层的括号&#34;&gt;&lt;a href=&#34;#1021-删除最外层的括号&#34; class=&#34;headerlink&#34; title=&#34;1021.删除最外层的括号&#34;&gt;&lt;/a&gt;1021.删除最外层的括号&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;有效括号字符串为空 “”、”(“ + A + “)” 或 A + B ，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。&lt;br&gt;例如，””，”()”，”(())()” 和 “(()(()))” 都是有效的括号字符串。&lt;br&gt;如果有效字符串 s 非空，且不存在将其拆分为 s &amp;#x3D; A + B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。&lt;br&gt;给出一个非空有效字符串 s，考虑将其进行原语化分解，使得：s &amp;#x3D; P_1 + P_2 + … + P_k，其中 P_i 是有效括号字符串原语。&lt;br&gt;对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; s.length &amp;lt;&amp;#x3D; 105&lt;/li&gt;
&lt;li&gt;s[i] 为 ‘(‘ 或 ‘)’&lt;/li&gt;
&lt;li&gt;s 是一个有效括号字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-1&#34;&gt;&lt;a href=&#34;#解题思路-1&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;引用官方题解的话：&lt;strong&gt;遍历 s，并用一个栈来表示括号的深度。遇到 ‘(’ 则将字符入栈，遇到 ‘)’ 则将栈顶字符出栈。栈从空到下一次空的过程，则是扫描了一个原语的过程。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码-1&#34;&gt;&lt;a href=&#34;#完整代码-1&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    string removeOuterParentheses(string s) &amp;#123;
        string res;
        int cnt=0;
        for(char ch:s)&amp;#123;
            if(ch==&amp;#39;)&amp;#39;)&amp;#123;
                cnt--;
            &amp;#125;
            if(cnt&amp;gt;0)&amp;#123;
                res.push_back(ch);
            &amp;#125;
            if(ch==&amp;#39;(&amp;#39;)&amp;#123;
                cnt++;
            &amp;#125;
        &amp;#125;
        return res;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;859-亲密字符串&#34;&gt;&lt;a href=&#34;#859-亲密字符串&#34; class=&#34;headerlink&#34; title=&#34;859.亲密字符串&#34;&gt;&lt;/a&gt;859.亲密字符串&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你两个字符串 s 和 goal ，只要我们可以通过交换 s 中的两个字母得到与 goal 相等的结果，就返回 true ；否则返回 false 。&lt;br&gt;交换字母的定义是：取两个下标 i 和 j （下标从 0 开始）且满足 i !&amp;#x3D; j ，接着交换 s[i] 和 s[j] 处的字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，在 “abcd” 中交换下标 0 和下标 2 的元素可以生成 “cbad” 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; s.length, goal.length &amp;lt;&amp;#x3D; 2 * 104&lt;/li&gt;
&lt;li&gt;s 和 goal 由小写英文字母组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-2&#34;&gt;&lt;a href=&#34;#解题思路-2&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;都去给我关注&lt;a href=&#34;https://leetcode.cn/u/ac_oier/&#34;&gt;三叶大佬&lt;/a&gt;！&lt;br&gt;属于&lt;strong&gt;模拟&lt;/strong&gt;类型的题目&lt;br&gt;既然交换s中的两个字母&amp;#x3D;&amp;#x3D;goal，即为亲密。那么：&lt;br&gt;&lt;em&gt;&lt;strong&gt;1️⃣不亲密&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;&lt;code&gt;s&lt;/code&gt;与&lt;code&gt;goal&lt;/code&gt;长度不同 &lt;strong&gt;或&lt;/strong&gt; 词频不同&lt;br&gt;&lt;em&gt;&lt;strong&gt;2️⃣亲密&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;与&lt;code&gt;goal&lt;/code&gt;不同的的字符串数量为2&lt;br&gt;&lt;strong&gt;或&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;与&lt;code&gt;goal&lt;/code&gt;不同的字符串数量为0 并且 &lt;code&gt;s&lt;/code&gt;中存在出现次数&amp;gt;2的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; PS: 这里&lt;a href=&#34;https://leetcode.cn/u/MiracleSNeko/&#34;&gt;评论区&lt;/a&gt;特好玩😂“我真傻，真的，”我抬起我没有神采的眼睛来，接着说。“我单知道两个不同的字符互相交换，会生成一个亲密字符串；我不知道相同的字符也会互相换着玩。……” 我接着但是呜咽，说不出成句的话来。（&lt;/p&gt;
&lt;p&gt;所以注意：即使一开始s&amp;#x3D;&amp;#x3D;goal，但是s怎么交换2字符都不能再&amp;#x3D;&amp;#x3D;goal，也&lt;strong&gt;不算亲密&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;还有一个代码小细节：&lt;strong&gt;为什么是26？&lt;/strong&gt;&lt;br&gt;字符&lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt; - &lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt;共26个：&lt;br&gt;题目限定了输入字符串只包含小写字母，所以最多只需要存储26个字符的频次。&lt;/p&gt;
&lt;h2 id=&#34;完整代码-2&#34;&gt;&lt;a href=&#34;#完整代码-2&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-CPP&#34;&gt;class Solution &amp;#123;
public:
    bool buddyStrings(string s, string goal) &amp;#123;
        if(s.size()!=goal.size())&amp;#123;
            return false;
        &amp;#125;
        if(s==goal)&amp;#123;
            vector&amp;lt;int&amp;gt; cnt(26);
            for(int i=0;i&amp;lt;s.size();i++)&amp;#123;
                cnt[s[i]-&amp;#39;a&amp;#39;]++;
                if(cnt[s[i]-&amp;#39;a&amp;#39;]&amp;gt;1)&amp;#123;
                    return true;
                &amp;#125;
            &amp;#125;
            return false;
        &amp;#125;
        else&amp;#123;//记录s和goal不相同的字符位置
            int first,second;
            first=-1;
            second=-1;
            for(int i=0;i&amp;lt;s.size();i++)&amp;#123;
                if(s[i]!=goal[i])&amp;#123;
                    if(first==-1)&amp;#123;
                        first=i;
                    &amp;#125;
                    else if(second==-1)&amp;#123;
                        second=i;
                    &amp;#125;
                    else&amp;#123;
                        return false;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        //检查是否可以交换
        return (second!=-1 &amp;amp;&amp;amp; s[first]==goal[second] &amp;amp;&amp;amp; s[second]==goal[first]);
        &amp;#125;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3304-找出第K个字符Ⅰ&#34;&gt;&lt;a href=&#34;#3304-找出第K个字符Ⅰ&#34; class=&#34;headerlink&#34; title=&#34;3304.找出第K个字符Ⅰ&#34;&gt;&lt;/a&gt;3304.找出第K个字符Ⅰ&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Alice 和 Bob 正在玩一个游戏。最初，Alice 有一个字符串 word &amp;#x3D; “a”。&lt;br&gt;给定一个正整数 k。&lt;br&gt;现在 Bob 会要求 Alice 执行以下操作 无限次 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 word 中的每个字符 更改 为英文字母表中的 下一个 字符来生成一个新字符串，并将其 追加 到原始的 word。&lt;br&gt;例如，对 “c” 进行操作生成 “cd”，对 “zb” 进行操作生成 “zbac”。&lt;br&gt;在执行足够多的操作后， word 中 至少 存在 k 个字符，此时返回 word 中第 k 个字符的值。&lt;br&gt;注意，在操作中字符 ‘z’ 可以变成 ‘a’。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;&amp;#x3D; k &amp;lt;&amp;#x3D; 500&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路-3&#34;&gt;&lt;a href=&#34;#解题思路-3&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;主打一个模拟：&lt;br&gt;&lt;em&gt;&lt;strong&gt;1️⃣构造字符串&lt;code&gt;s&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初始值为&lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每轮迭代，生成s的副本t，然后每个字符变成它的下一个字母：&lt;code&gt;((word[i]-&amp;#39;a&amp;#39;+1)%26+&amp;#39;a&amp;#39;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里用ASCII码运算，因为’a’&lt;del&gt;‘z’为98&lt;/del&gt;233,所以&lt;code&gt;word[i]-&amp;#39;a&amp;#39;&lt;/code&gt;计算word[i]相对与a的偏移量，即字符word[i]是字母表中的&lt;strong&gt;第&lt;code&gt;word[i]-&amp;#39;a&amp;#39;&lt;/code&gt;个字母&lt;/strong&gt;，&lt;code&gt;+1&lt;/code&gt;即为后一个字符；&lt;br&gt;&lt;code&gt;%26+&amp;#39;a&amp;#39;&lt;/code&gt;的原因是：当word[i]为&lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt;时,让26变回0，所以%26取模。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将&lt;code&gt;t&lt;/code&gt;拼接回&lt;code&gt;s&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;2️⃣终止条件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当&lt;code&gt;s.size()&amp;gt;=k&lt;/code&gt;时，直接返回s[k-1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整代码-3&#34;&gt;&lt;a href=&#34;#完整代码-3&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;c&amp;#x3D;word[i]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution &amp;#123;
public:
    char kthCharacter(int k) &amp;#123;
        string word=&amp;quot;a&amp;quot;;
        while(word.size()&amp;lt;k)&amp;#123;
            string t;
            for(char c:word)&amp;#123;
                t.push_back((c-&amp;#39;a&amp;#39;+1)%26+&amp;#39;a&amp;#39;);
            &amp;#125;
            word+=t;
        &amp;#125;
        return word[k-1];
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="算法" />
        <category term="字符串" />
        <category term="滑动窗口" />
        <updated>2025-03-05T07:22:48.000Z</updated>
    </entry>
</feed>
