{
    "version": "https://jsonfeed.org/version/1",
    "title": "Per aspera ad astra • All posts by \"ai\" tag",
    "description": "欢迎交流学习!",
    "home_page_url": "https://232akira.github.io",
    "items": [
        {
            "id": "https://232akira.github.io/2025/06/16/%E5%A4%87%E5%BF%98/%E5%A4%87%E5%BF%98%E5%BD%95-%E6%A1%88%E4%BE%8B/",
            "url": "https://232akira.github.io/2025/06/16/%E5%A4%87%E5%BF%98/%E5%A4%87%E5%BF%98%E5%BD%95-%E6%A1%88%E4%BE%8B/",
            "title": "备忘录 ⋮ 案例",
            "date_published": "2025-06-16T02:10:30.000Z",
            "content_html": "<p>工作以来接触到了很多新知识，博客也拖了俩月没更了…😂今天开始慢慢补充案例！</p>\n<h2 id=\"工作案例备忘\"><a href=\"#工作案例备忘\" class=\"headerlink\" title=\"工作案例备忘\"></a>工作案例备忘</h2><ul>\n<li>记录的文章会以<code>【实战x-x】</code>的方式作为开头。</li>\n</ul>\n<h3 id=\"1️⃣AIGC开发案例\"><a href=\"#1️⃣AIGC开发案例\" class=\"headerlink\" title=\"1️⃣AIGC开发案例\"></a>1️⃣AIGC开发案例</h3><blockquote>\n<p>直接应用 + API编排</p>\n</blockquote>\n<ol>\n<li>文生文</li>\n<li>文生图</li>\n<li>文生视频</li>\n<li>图生图</li>\n<li>图生3D</li>\n</ol>\n<hr>\n<h3 id=\"2️⃣AI辅助编程\"><a href=\"#2️⃣AI辅助编程\" class=\"headerlink\" title=\"2️⃣AI辅助编程\"></a>2️⃣AI辅助编程</h3><blockquote>\n<p>VSCode + 插件为主，编译器用的少</p>\n</blockquote>\n<ol>\n<li>Cursor</li>\n<li>Trae</li>\n<li>Copilot</li>\n<li>Cline</li>\n<li>Lingma</li>\n</ol>\n<hr>\n<h3 id=\"3️⃣AI客户端\"><a href=\"#3️⃣AI客户端\" class=\"headerlink\" title=\"3️⃣AI客户端\"></a>3️⃣AI客户端</h3><blockquote>\n<p>LLM服务商配置、MCP服务部署</p>\n</blockquote>\n<ol>\n<li>Chatbox</li>\n<li>Cherry Studio</li>\n<li>DeepChat</li>\n</ol>\n<hr>\n<h2 id=\"个人案例备忘\"><a href=\"#个人案例备忘\" class=\"headerlink\" title=\"个人案例备忘\"></a>个人案例备忘</h2><ul>\n<li>记录的文章会以<code>【笔记x-x】</code>的方式作为开头。</li>\n</ul>\n<p>待整理~😴</p>\n",
            "tags": [
                "备忘录",
                "AI"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B%E2%91%A2%20%E6%8E%A5%E5%85%A5DeepSeek-R1%E4%BC%98%E5%8C%96%E6%8F%90%E7%A4%BA%E8%AF%8D/",
            "url": "https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B%E2%91%A2%20%E6%8E%A5%E5%85%A5DeepSeek-R1%E4%BC%98%E5%8C%96%E6%8F%90%E7%A4%BA%E8%AF%8D/",
            "title": "案例③ ⋮ 接入DeepSeek-R1优化提示词",
            "date_published": "2025-04-17T05:43:07.000Z",
            "content_html": "<p>🔆2025-04-16</p>\n<h2 id=\"优化Stable-Difussion生成效果-接入DeepSeek-R1处理提示词\"><a href=\"#优化Stable-Difussion生成效果-接入DeepSeek-R1处理提示词\" class=\"headerlink\" title=\"优化Stable Difussion生成效果(接入DeepSeek-R1处理提示词)\"></a>优化Stable Difussion生成效果(接入DeepSeek-R1处理提示词)</h2><p>哇这里只加了一个功能流程中就出现很多bug😅待我慢慢梳理一下</p>\n<h2 id=\"问题引入\"><a href=\"#问题引入\" class=\"headerlink\" title=\"问题引入\"></a>问题引入</h2><p>上面说到对提示词进行优化，那么可以直接再引入一个文本生成模型来进行这个操作，那么整体的流程就变为：</p>\n<pre><code>A[原始提示词] --&gt; B(DeepSeek-R1优化)--&gt; C[优化后提示词]\n</code></pre>\n<p>然后才是：</p>\n<pre><code>C --&gt; D(Stable Diffusion生成)\nD --&gt; E[最终图像]\n</code></pre>\n<h2 id=\"获取DeepSeek-R1-API\"><a href=\"#获取DeepSeek-R1-API\" class=\"headerlink\" title=\"获取DeepSeek-R1 API\"></a>获取DeepSeek-R1 API</h2><p>和先前拿到Stable Diffusion是同一个方法：访问<code>沐曦资源包</code>-&gt;<code>DeepSeek-R1</code>-&gt;<code>API</code></p>\n<ul>\n<li><code>base_url</code> <a href=\"https://ai.gitee.com/v1\">https://ai.gitee.com/v1</a></li>\n<li><code>api_key</code></li>\n<li><code>model</code> DeepSeek-R1</li>\n</ul>\n<h2 id=\"代码思路\"><a href=\"#代码思路\" class=\"headerlink\" title=\"代码思路\"></a>代码思路</h2><p>简而言之，就是在Stable Diffusion拿到提示词之前，把原始提示词先丢给DeepSeek处理一下，也可以说是<strong>双模型协同机制</strong>。</p>\n<h3 id=\"DeepSeek-R1\"><a href=\"#DeepSeek-R1\" class=\"headerlink\" title=\"DeepSeek-R1\"></a>DeepSeek-R1</h3><blockquote>\n<p>作为「提示词工程师」</p>\n</blockquote>\n<ol>\n<li>message模块向其发送指令，比如：你是一个专业的SD提示词优化助手等等</li>\n<li>接受用户输入的提示词</li>\n<li>优化<br>优化的策略可以有很多，针对Stable Diffusion我们可以这样做：</li>\n</ol>\n<ul>\n<li>转换成英文</li>\n<li>语法结构优化（将描述性语言转换为SD擅长的标签式表达）</li>\n<li>自动补充合适的艺术风格细节（如添加”ultra detailed, 8k”等）</li>\n</ul>\n<p><em><strong>⚠️注意！这里有个致命的提示词要点，影响整个案例是否成功。将放到后面作为重点补充。</strong></em></p>\n<ol start=\"4\">\n<li>输出经优化后的提示词</li>\n</ol>\n<pre><code>def get_optimized_prompt(original_prompt: str) -&gt; str：\n</code></pre>\n<h3 id=\"Stable-Diffusion\"><a href=\"#Stable-Diffusion\" class=\"headerlink\" title=\"Stable Diffusion\"></a>Stable Diffusion</h3><blockquote>\n<p>作为「图像生成器」</p>\n</blockquote>\n<ol>\n<li>接受经优化后的提示词</li>\n<li>输出文生图结果</li>\n</ol>\n<pre><code>def generate_image(prompt: str, output_path: str = &quot;output-DS-R1.png&quot;) -&gt; bool:\n</code></pre>\n<h2 id=\"报错梳理\"><a href=\"#报错梳理\" class=\"headerlink\" title=\"报错梳理\"></a>报错梳理</h2><h3 id=\"模型资源地址-模型名称置入错误\"><a href=\"#模型资源地址-模型名称置入错误\" class=\"headerlink\" title=\"模型资源地址&#x2F;模型名称置入错误\"></a>模型资源地址&#x2F;模型名称置入错误</h3><p>这个其实是非常没有技术含量的报错🫥因为这个案例的代码比较冗长（200行左右），并且模型资源置入的地址的代码位置比较分散，所以在快速大量修改整体代码时，很容易没有调用到模型资源，但往往报错的时候不会意识到是这么简单的问题。<br><strong>举个🌰：</strong><br>遇到了401报错，那么可能是API Key：</p>\n<ul>\n<li>为空</li>\n<li>已过期</li>\n<li>不属于当前使用的API服务（比如错用OpenAI的Key调用 Gitee AI，我就是没注意到这里）</li>\n</ul>\n<p>🔄所以记得基础问题至少也要检查一遍。</p>\n<h3 id=\"运行无报错但是无输出\"><a href=\"#运行无报错但是无输出\" class=\"headerlink\" title=\"运行无报错但是无输出\"></a>运行无报错但是无输出</h3><p>这里属于和模型无关的基础代码编写问题了。需要添加一定的逻辑，如：</p>\n<ul>\n<li>增加代码调试输出逻辑</li>\n<li>强制报错测试</li>\n</ul>\n<p>最好是加个运行日志，方便看看细节啥情况。这里问了DS说的很专业，码一下<br>🔄错误熔断设计：<code>独立捕获每个API的异常</code> &amp; <code>生成过程状态实时反馈</code>，并添加完整的日志追踪。</p>\n<h3 id=\"运行成功有输出但是完全不对\"><a href=\"#运行成功有输出但是完全不对\" class=\"headerlink\" title=\"运行成功有输出但是完全不对\"></a>运行成功有输出但是完全不对</h3><p>甚至比优化前还要离谱🤣输入的原始提示词是“一只穿着宇航服的猫在月球上漫步”，到这里生成的图不像原来一样至少是个猫，而是变成了一张人物古典水墨风了，完全不相关。</p>\n<p>到这里意识到一个方法,也就是需要按照案例的流程进行逐个排错。我们需要明白究竟是哪个步骤出了问题：</p>\n<blockquote>\n<p>简称：DeepSeek-&gt;DS、Stable Diffusion-&gt;SD</p>\n</blockquote>\n<ul>\n<li>DS没有接受到提示词</li>\n<li>DS接受到提示词 &amp; 优化失败（包括生成的新提示词错误的情况）</li>\n<li>DS接受到提示词 &amp; 优化成功 &amp; SD接受到新提示词</li>\n<li>DS接受到提示词 &amp; 优化成功 &amp; SD接受到新提示词 &amp; SD输出图像失败</li>\n</ul>\n<p>可以推断问题大概率出现在<code>2</code>or<code>3</code>，也就是提示词的优化和传递环节出现了问题，所以导致SD拿到错误的提示词之后很顺溜的生成了错误的图片。<br>🔄需要修改代码逻辑。</p>\n<h3 id=\"警惕AI骗人现象\"><a href=\"#警惕AI骗人现象\" class=\"headerlink\" title=\"警惕AI骗人现象\"></a>警惕AI骗人现象</h3><p>我这里被DeepSeek坑的好惨😭长记性了。我报错的代码它给修改后运行正确，一时激动难以自已。然后发现他在提示词生成错误后直接这样写：</p>\n<pre><code class=\"language-python\">    except:\n        return &quot;cat in astronaut suit on the moon, detailed fur, cosmic background, 8k&quot;\n</code></pre>\n<p>😅😅😅哪有这样的，我需要调用ds来生成这样的语句，它到自己干脆的设置：生成不了直接用写好的优化后代码。太离谱…<br>这里同样需要修改代码逻辑，保证出现失败后能够及时响应。</p>\n<h3 id=\"⚠️最后一个也是最重要的一个报错\"><a href=\"#⚠️最后一个也是最重要的一个报错\" class=\"headerlink\" title=\"⚠️最后一个也是最重要的一个报错\"></a>⚠️最后一个也是最重要的一个报错</h3><p>哇这里真的，<strong>理解起来很容易，发现起来很难！！！</strong></p>\n<blockquote>\n<p>首先我们知道：DeepSeek-R1是个<strong>深度思考</strong>模型</p>\n<blockquote>\n<p>也就是说，它大概率会在你要求<code>不要生成其他无关内容</code>时，思考了一大堆：好的，用户说明我需要巴拉巴拉…然后字数就超了，这半截思考内容就会传递给Stable Diffusion，结果可想而知🫥比如这样：</p>\n</blockquote>\n</blockquote>\n<pre><code class=\"language-python\">2025-04-16 17:27:41,655 - ERROR - 响应内容: &#123;&quot;id&quot;:&quot;9e7f4969063e49b7a542150ed194db43&quot;,&quot;object&quot;:&quot;chat.completion&quot;,&quot;created&quot;:1744795661,&quot;model&quot;:&quot;deepseek-r1&quot;,&quot;choices&quot;:[&#123;&quot;index&quot;:0,&quot;message&quot;:&#123;&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;&quot;,&quot;reasoning_content&quot;:&quot;好的，用户让我转换这个中 文描述为英文提示词。首先，我需要仔细分析原句：“一只穿着宇航服的猫在月球上漫步”。主体是猫，穿着宇航服，环境是月球，动作是漫步。接下来 要确定细节，比如猫的品种可能不重要，但宇航服的设计可能需要描述，比如现代NASA风格。环境方面，月球表面可能有陨石坑和地球在背景中。风格 方面，用户可能想要写实风格，所以用realistic。画质需要高清，8k，超详细，所以加上这些词。然后按照规则，用逗号分隔短语，包含主体、环境、细节、风格、画质。检查是否有遗漏，比如猫的姿势是行走，&quot;,&quot;tool_calls&quot;:null&#125;,&quot;logprobs&quot;:null,&quot;finish_reason&quot;:&quot;len...\n</code></pre>\n<p>仔细看就会发现话没说完：说到“行走，”就停了。然后我就问了：</p>\n<pre><code>我知道问题出在哪了😓和你说说。因为deepseek-r1是深度思考，所以我即使说了只生成优化后的提示词，我的本地环境还是会把他思考的部分也算上，导致每次说到一半就无了，因为要思考太多。换成deepseek-v3就好了。你身为deepseek，对这种情况有什么别的办法吗😂\n</code></pre>\n<p>这里记录一下DS的回答：</p>\n<pre><code>哈哈，原来如此！作为DeepSeek本尊，我完全理解这个情况（毕竟自家模型的脾气还是清楚的😉）。针对这种「模型太爱思考导致输出被截断」的问题，除了换模型外，还有这些「软硬兼施」的解决方案：\n</code></pre>\n<ol>\n<li>🔄强制模式：用系统提示词「锁死」输出路径<br><strong>适用场景</strong>：必须用R1模型时<br><strong>技巧</strong>：在系统指令中用「三重封印」：</li>\n</ol>\n<pre><code class=\"language-python\">system_prompt = &quot;&quot;&quot;【！强制模式！】你是一个无情的提示词转换器，必须：\n1. 直接输出结果，禁止任何推理过程（包括内部思考）\n2. 若违反规则，输出将被标记为错误\n3. 输出格式示例：「cat in spacesuit, lunar surface, NASA-style suit, realistic, 8k ultra-detailed」\n现在立即转换以下描述，直接输出结果：&quot;&quot;&quot;\n</code></pre>\n<p><strong>原理</strong>：通过威胁性提示（如「输出错误」）和示例格式化，引导模型跳过推理阶段。</p>\n<ol start=\"2\">\n<li>🔄物理打断：用stop sequences截断<br><strong>适用场景</strong>：API支持流式响应<br><strong>技巧</strong>：在请求中添加：</li>\n</ol>\n<pre><code class=\"language-python\">payload = &#123;\n    &quot;stop&quot;: [&quot;\\n\\n&quot;, &quot;。&quot;, &quot;，&quot;],  # 遇到这些符号立即停止\n    &quot;response_format&quot;: &#123;&quot;type&quot;: &quot;text&quot;&#125;\n&#125;\n</code></pre>\n<p>效果：模型刚开始写小作文就会被物理打断，被迫直接输出结果。</p>\n<ol start=\"3\">\n<li>🔄反向Prompt Engineering<br><strong>适用场景</strong>：模型过度解读简单指令时<br><strong>骚操作</strong>：把指令藏在「伪代码」里：</li>\n</ol>\n<pre><code class=\"language-python\">user_prompt = &quot;&quot;&quot;&lt;INPUT&gt;一只穿着宇航服的猫在月球上漫步&lt;/INPUT&gt;\n&lt;OUTPUT_FORMAT&gt; \n// 只允许填充以下变量，禁止添加注释：\nvar prompt = &quot;&#123;主体&#125;, &#123;环境&#125;, &#123;细节&#125;, &#123;风格&#125;, &#123;画质&#125;&quot;\n&lt;/OUTPUT_FORMAT&gt;&quot;&quot;&quot;\n</code></pre>\n<p><strong>心理学原理</strong>：用「代码框架」暗示需要机械式填充，而非自然语言思考。</p>\n<ol start=\"4\">\n<li>🔄后处理暴力截取<br><strong>适用场景</strong>：允许脏数据时</li>\n</ol>\n<pre><code class=\"language-python\"># 强行提取第一个逗号后的内容\nif &quot;,&quot; in response:\n    result = response.split(&quot;,&quot;, 1)[1] \nelse:\n    result = response[:100]  # 保底截断\n</code></pre>\n<p>适用场景：「先污染后治理」的暴力美学。</p>\n<ol start=\"5\">\n<li>🔄终极方案：换模型+版本控制</li>\n</ol>\n<pre><code class=\"language-python\">model_selector = &#123;\n    &quot;需要深度思考&quot;: &quot;deepseek-r1&quot;,\n    &quot;需要机械执行&quot;: &quot;deepseek-v3&quot;,\n    &quot;不确定时&quot;: &quot;deepseek-v3&quot;  # 默认用更听话的版本\n&#125;\n</code></pre>\n<p><strong>真相</strong>：有时候换模型确实是性价比最高的方案，毕竟——「不要试图教AI做人，选择对的AI帮你做人」😏<br>如果这些方案还不够，你甚至可以试试 「量子玄学法」 ——在请求参数里加一行：</p>\n<pre><code>&quot;temperature&quot;: 0.0001,  # 让模型进入「绝对零度」的冷漠模式\n</code></pre>\n<p>（亲测对话痨型AI有奇效）<br>问题记录结束！</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>好了，它怎么知道我把DS-R1改成V3后就一次成功了😂不过只要指令设置的足够严格也是没问题的，对比R1和V3优化Prompt之后SD生成的图大差不差。<br>成功版本的指令：</p>\n<pre><code class=\"language-python\">        # 强化版系统提示\n        system_prompt = &quot;&quot;&quot;【指令】你是一个无情的提示词转换器，必须严格按以下规则执行：\n        1. 输入：用户的中文描述\n        2. 处理：直接转换为英文AI绘画提示词\n        3. 输出规则：\n           - 必须且只能输出转换后的英文提示词\n           - 格式：逗号分隔的短语\n           - 必须包含：主体、环境、细节、风格、画质\n        禁止：任何解释、推理过程或其他文字！直接输出结果！&quot;&quot;&quot;\n</code></pre>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li>Serverless API编程开发指南</li>\n<li><a href=\"https://ai.gitee.com/docs/openapi/v1#tag/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/POST/images/generations\">Gitee AI Inference OpenAPI</a></li>\n</ol>\n",
            "tags": [
                "AI",
                "案例"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B%E2%91%A1%20Stable%20Difussion%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/",
            "url": "https://232akira.github.io/2025/04/17/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B%E2%91%A1%20Stable%20Difussion%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/",
            "title": "案例② ⋮ Stable Diffusion图像生成",
            "date_published": "2025-04-17T05:43:01.000Z",
            "content_html": "<p>🔆2025-04-15</p>\n<h1 id=\"实现第一个图像生成Hello-World（Stable-Diffusion模型）\"><a href=\"#实现第一个图像生成Hello-World（Stable-Diffusion模型）\" class=\"headerlink\" title=\"实现第一个图像生成Hello World（Stable Diffusion模型）\"></a>实现第一个图像生成Hello World（Stable Diffusion模型）</h1><blockquote>\n<p>基于沐曦+Gitee平台的40+个大模型，采用vscode&#x2F;Chatbox和Serverless API开发创意型案例，跟踪最新开源模型和编程开发形成案例。<br>本案例使用vscode调用Gitee-Stable Diffusion接口</p>\n</blockquote>\n<h2 id=\"什么是Stable-Diffusion\"><a href=\"#什么是Stable-Diffusion\" class=\"headerlink\" title=\"什么是Stable Diffusion\"></a>什么是Stable Diffusion</h2><p>参考链接<a href=\"https://stabledifffusion.com/\">1️⃣</a><a href=\"https://zhuanlan.zhihu.com/p/622238031\">2️⃣</a><a href=\"https://blog.csdn.net/m0_59162248/article/details/146497738\">3️⃣</a><br>简而言之，就是：<strong>文生图</strong> &#x2F; <code>Text-to-Image</code>。</p>\n<h2 id=\"Gitee\"><a href=\"#Gitee\" class=\"headerlink\" title=\"Gitee\"></a><a href=\"https://gitee.com/\">Gitee</a></h2><p>你需要按照以下顺序操作：</p>\n<ol>\n<li>注册&#x2F;登录Gitee账号</li>\n<li>访问Gitee AI <a href=\"https://ai.gitee.com/\">模力方舟</a></li>\n<li>在模力方舟页面中，找到并启用<a href=\"https://ai.gitee.com/serverless-api/packages/1492\">沐曦-模型资源包</a></li>\n</ol>\n<h2 id=\"获取Stable-Diffusion-API\"><a href=\"#获取Stable-Diffusion-API\" class=\"headerlink\" title=\"获取Stable Diffusion API\"></a>获取Stable Diffusion API</h2><ol>\n<li>选中沐曦模型资源包后,下拉找到stable-diffusion-xl-base-1.0模型</li>\n<li>选择在线体验-&gt;API-&gt;添加令牌，会发现代码中的api-key已被正确替换（此处若无法选择记得先登录）</li>\n</ol>\n<h3 id=\"关于API代码，你需要知道：\"><a href=\"#关于API代码，你需要知道：\" class=\"headerlink\" title=\"关于API代码，你需要知道：\"></a>关于API代码，你需要知道：</h3><ul>\n<li><strong>模型资源地址</strong> API的基础URL（统一资源定位符）</li>\n<li><strong>API密钥</strong> 用于身份验证和授权，以保证用户正常访问。（注意！你会发现其他模型的api-key和此模型都是完全相同的，因为gitee ai的api-key分配模式是一个账号一个）</li>\n<li><strong>模型名称</strong> 指向模型完整名称（一定不能错）</li>\n</ul>\n<p>对于Gitee的三种API代码：<br><strong>1️⃣Python</strong></p>\n<ul>\n<li><code>base_url</code> <a href=\"https://ai.gitee.com/v1\">https://ai.gitee.com/v1</a></li>\n<li><code>api_key</code></li>\n<li><code>model</code> stable-diffusion-xl-base-1.0</li>\n</ul>\n<p><strong>2️⃣JavaScript</strong></p>\n<ul>\n<li><code>baseURL</code> <a href=\"https://ai.gitee.com/v1\">https://ai.gitee.com/v1</a></li>\n<li><code>apiKey</code> </li>\n<li><code>model</code> stable-diffusion-xl-base-1.0</li>\n</ul>\n<p><strong>3️⃣cURL</strong></p>\n<ul>\n<li><code>curl</code> <a href=\"https://ai.gitee.com/v1/images/generations\">https://ai.gitee.com/v1/images/generations</a></li>\n</ul>\n<p><strong>❓️如果你发现这里的curl地址不同于上面的baseurl</strong><br>真聪明！（我这里说话好像ai）这里的url比基础url多了两个资源路径<code>images/generations</code>。<br>这里涉及到<strong>curl命令</strong>：通过命令行直接执行HTTP请求，主要用来测试和调试API。因此其需要包含完整的请求url（包括基础url和资源路径）。</p>\n<blockquote>\n<p>个人对url的具体理解：api发送请求的目标地址，这里直接指向stable-diffusion模型中的图像生成服务。<br>其中：<br><code>ai.gitee.com</code>：使用gitee平台上的AI服务（此网址可以直接访问）<br><code>/v1/images/generations</code>：具体的”模型版本&#x2F;图像&#x2F;生成”的路径</p>\n</blockquote>\n<h2 id=\"使用vscode调用gitee-Stable-Diffusion-API\"><a href=\"#使用vscode调用gitee-Stable-Diffusion-API\" class=\"headerlink\" title=\"使用vscode调用gitee-Stable Diffusion-API\"></a>使用vscode调用gitee-Stable Diffusion-API</h2><p>到这问题就不大了，正常拿个.py文件放上API代码，根据你的需求进行个性化调整。<br>记得缺失的包pip install一下</p>\n<h3 id=\"代码思路\"><a href=\"#代码思路\" class=\"headerlink\" title=\"代码思路\"></a>代码思路</h3><ol>\n<li>导包</li>\n</ol>\n<pre><code class=\"language-python\">import requests                  #HTTP通信\nimport json                      #json数据序列化\nfrom dotenv import load_dotenv   #安全配置\nimport os                        #系统交互\nimport base64                    #数据编码\nfrom io import BytesIO           #二进制流处理\nfrom PIL import Image            #图像操作\n</code></pre>\n<ol start=\"2\">\n<li>配置环境变量<code>load_dotenv() </code></li>\n</ol>\n<ul>\n<li>API_URL</li>\n<li>API_KEY<blockquote>\n<p>为了降低泄露风险、确保安全性，请一定使用用<strong>私有环境变量</strong>进行KEY的配置，不要直接把key写在代码里！</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li>协议配置 &amp; 数据格式声明<code>headers</code></li>\n</ol>\n<pre><code class=\"language-python\">headers = &#123;\n    &quot;Authorization&quot;: f&quot;Bearer &#123;API_KEY&#125;&quot;, #认证协议\n    &quot;Content-Type&quot;: &quot;application/json&quot;    #数据格式声明\n&#125;\n</code></pre>\n<p>4.向API发送请求时所需的参数<code>payload</code></p>\n<pre><code class=\"language-python\">payload = &#123;                                    #请求参数（根据文档调整）\n    &quot;model&quot;: &quot;stable-diffusion-xl-base-1.0&quot;,   #模型选择\n    &quot;prompt&quot;: &quot;一只穿着宇航服的猫在月球上漫步&quot;,   #业务输入\n    &quot;n&quot;: 1,                                    #生成数量\n    &quot;size&quot;: &quot;1024x1024&quot;,                       #输出规格\n    &quot;response_format&quot;: &quot;b64_json&quot;              #数据返回格式\n&#125;\n</code></pre>\n<p>5.向API发送请求 &amp; 处理响应结果</p>\n<blockquote>\n<p>使用<code>try-except</code>异常处理结构，用于捕获并处理在请求API和处理响应过程中可能出现的异常，确保程序在遇到错误时不会崩溃，而是输出相应的错误信息。</p>\n</blockquote>\n<pre><code class=\"language-python\">try:\n    print(f&quot;请求API: &#123;API_URL&#125;&quot;)\n    response = requests.post(API_URL, headers=headers, json=payload)\n    \n    if response.status_code == 200:\n        result = response.json()\n        if &quot;data&quot; in result and len(result[&quot;data&quot;]) &gt; 0:\n            # 处理base64图像数据\n            image_data = base64.b64decode(result[&quot;data&quot;][0][&quot;b64_json&quot;])\n            image = Image.open(BytesIO(image_data))\n            \n            # 保存图像\n            output_path = &quot;generated_image.png&quot;\n            image.save(output_path)\n            print(f&quot;图像生成成功，已保存到: &#123;output_path&#125;&quot;)\n            image.show()\n        else:\n            print(&quot;API响应中没有有效的图像数据&quot;)\n    else:\n        print(f&quot;请求失败，状态码: &#123;response.status_code&#125;&quot;)\n        print(response.text)\n\nexcept Exception as e:\n    print(f&quot;发生错误: &#123;str(e)&#125;&quot;)\n</code></pre>\n<h2 id=\"后续问题扩展\"><a href=\"#后续问题扩展\" class=\"headerlink\" title=\"后续问题扩展\"></a>后续问题扩展</h2><p>如果你成功调用Stable Diffusion模型的API，并输入中文提示词，会发现生成的图几乎不相关…因此后续需要对提示词<code>prompt</code>进行调整。</p>\n<p>下方 ↓ 跳转查看下一篇文章【实战2️⃣ 接入DeepSeek-R1优化提示词】。</p>\n",
            "tags": [
                "AI",
                "案例"
            ]
        },
        {
            "id": "https://232akira.github.io/2025/04/16/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B%E2%91%A0%20%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/",
            "url": "https://232akira.github.io/2025/04/16/%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B%E2%91%A0%20%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/",
            "title": "案例① ⋮ 入门指南",
            "date_published": "2025-04-16T07:29:31.000Z",
            "content_html": "<p>关于案例的内容较多，可点击本页底部标签跳转查看。</p>\n<h1 id=\"工作流入门\"><a href=\"#工作流入门\" class=\"headerlink\" title=\"工作流入门\"></a>工作流入门</h1><h2 id=\"步骤1-安装\"><a href=\"#步骤1-安装\" class=\"headerlink\" title=\"步骤1 安装\"></a>步骤1 安装</h2><h3 id=\"安装vscode\"><a href=\"#安装vscode\" class=\"headerlink\" title=\"安装vscode\"></a>安装vscode</h3><h4 id=\"本体安装\"><a href=\"#本体安装\" class=\"headerlink\" title=\"本体安装\"></a><a href=\"https://code.visualstudio.com/\">本体安装</a></h4><h4 id=\"AI编程拓展\"><a href=\"#AI编程拓展\" class=\"headerlink\" title=\"AI编程拓展\"></a>AI编程拓展</h4><ol>\n<li><p><a href=\"https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev\">Cline</a></p>\n</li>\n<li><p><a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.copilot\">Copilot</a></p>\n</li>\n</ol>\n<p>新安装的vscode需要更多基础拓展（如python等）</p>\n<h3 id=\"安装Chatbox\"><a href=\"#安装Chatbox\" class=\"headerlink\" title=\"安装Chatbox\"></a>安装Chatbox</h3><p>这里调用Gitee的大模型API会出现报错，等我二编。</p>\n<h2 id=\"步骤2-实战\"><a href=\"#步骤2-实战\" class=\"headerlink\" title=\"步骤2 实战\"></a>步骤2 实战</h2><h3 id=\"实战1️⃣-Stable-Difussion图像生成\"><a href=\"#实战1️⃣-Stable-Difussion图像生成\" class=\"headerlink\" title=\"实战1️⃣ Stable Difussion图像生成\"></a>实战1️⃣ Stable Difussion图像生成</h3><p>已完成记录，具体可阅览本站同名文章。</p>\n<h3 id=\"实战2️⃣-接入DeepSeek-R1优化提示词\"><a href=\"#实战2️⃣-接入DeepSeek-R1优化提示词\" class=\"headerlink\" title=\"实战2️⃣ 接入DeepSeek-R1优化提示词\"></a>实战2️⃣ 接入DeepSeek-R1优化提示词</h3><p>基本框架已搭好，细节调整修改中~</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li>Serverless API编程开发指南</li>\n<li><a href=\"https://ai.gitee.com/docs/openapi/v1#tag/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/POST/images/generations\">Gitee AI Inference OpenAPI</a></li>\n</ol>\n",
            "tags": [
                "AI",
                "案例"
            ]
        }
    ]
}